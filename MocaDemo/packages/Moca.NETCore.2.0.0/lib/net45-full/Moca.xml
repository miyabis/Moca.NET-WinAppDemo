<?xml version="1.0"?>
<doc>
<assembly>
<name>
Moca
</name>
</assembly>
<members>
<member name="F:Moca.Util.ValidateTypes.None">
	<summary>「無し」又は「正常」</summary>
</member><member name="F:Moca.Util.ValidateTypes.Required">
	<summary>必須</summary>
</member><member name="F:Moca.Util.ValidateTypes.Numeric">
	<summary>数字のみ</summary>
</member><member name="F:Moca.Util.ValidateTypes.Decimal">
	<summary>数値のみ</summary>
</member><member name="F:Moca.Util.ValidateTypes.WithNumericSigned">
	<summary>符号付数値のみ</summary>
</member><member name="F:Moca.Util.ValidateTypes.Zip">
	<summary>〒</summary>
</member><member name="F:Moca.Util.ValidateTypes.Tel">
	<summary>電話番号</summary>
</member><member name="F:Moca.Util.ValidateTypes.InJis">
	<summary>文字列に全角文字が含まれているか</summary>
</member><member name="F:Moca.Util.ValidateTypes.LenghtMin">
	<summary>最小桁数</summary>
</member><member name="F:Moca.Util.ValidateTypes.LenghtMax">
	<summary>最大桁数</summary>
</member><member name="F:Moca.Util.ValidateTypes.LenghtMinB">
	<summary>最小桁数（半角 1 バイト、全角 2 バイトとして）</summary>
</member><member name="F:Moca.Util.ValidateTypes.LenghtMaxB">
	<summary>最大桁数（半角 1 バイト、全角 2 バイトとして）</summary>
</member><member name="F:Moca.Util.ValidateTypes.DateFormat">
	<summary>日付</summary>
</member><member name="F:Moca.Util.ValidateTypes.Minimum">
	<summary>最小数値</summary>
</member><member name="F:Moca.Util.ValidateTypes.Maximum">
	<summary>最大数値</summary>
</member><member name="F:Moca.Util.ValidateTypes.HalfWidthAlphanumeric">
	<summary>半角英数</summary>
</member><member name="F:Moca.Util.ValidateTypes.Mail">
	<summary>Mail</summary>
</member><member name="F:Moca.Util.ValidateTypes.URL">
	<summary>URL</summary>
</member><member name="T:Moca.Util.ValidateTypes">
	<summary>
 検証種別及び検証結果
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Util.Validator.Verify(System.String,Moca.Util.ValidateTypes,System.Object,System.Object)">
	<summary>
 検証実行
 </summary>
	<param name="value">検証対象の値</param>
	<param name="validates">検証内容（OR にて複数同時指定可能）</param>
	<param name="min">検証内容にて最小値が必要なとき指定する</param>
	<param name="max">検証内容にて最大値が必要なとき指定する</param>
	<returns>検証結果（複数エラーが発生したときは複数指定される）</returns>
	<remarks>
 必須チェックが指定されていてエラーとなったときは、他のチェックが指定されていたとしてもチェックしません。
 （必須エラーだけを返します。）
 </remarks>
</member><member name="M:Moca.Util.Validator._IsValidateType(Moca.Util.ValidateTypes,Moca.Util.ValidateTypes)">
	<summary>
 検証種別のチェック
 </summary>
	<param name="validates">チェック対象</param>
	<param name="targetType">含まれているかチェックする検証種別</param>
	<returns>True: 含まれている、False: 含まれていない</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.Validator.IsValidateType(Moca.Util.ValidateTypes,Moca.Util.ValidateTypes)">
	<summary>
 検証種別のチェック
 </summary>
	<param name="validates">チェック対象</param>
	<param name="targetType">含まれているかチェックする検証種別</param>
	<returns>True: 含まれている、False: 含まれていない</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.Validator.IsValidRequired(Moca.Util.ValidateTypes)">
	<summary>
 必須エラー有無
 </summary>
	<param name="validates">チェック結果</param>
	<returns>True:正常、False:エラー</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.Validator.IsValidNumeric(Moca.Util.ValidateTypes)">
	<summary>
 数字のみエラー有無
 </summary>
	<param name="validates">チェック結果</param>
	<returns>True:正常、False:エラー</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.Validator.IsValidDecimal(Moca.Util.ValidateTypes)">
	<summary>
 数値のみエラー有無
 </summary>
	<param name="validates">チェック結果</param>
	<returns>True:正常、False:エラー</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.Validator.IsValidWithNumericSigned(Moca.Util.ValidateTypes)">
	<summary>
 符号付数値のみエラー有無
 </summary>
	<param name="validates">チェック結果</param>
	<returns>True:正常、False:エラー</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.Validator.IsValidZip(Moca.Util.ValidateTypes)">
	<summary>
 〒エラー有無
 </summary>
	<param name="validates">チェック結果</param>
	<returns>True:正常、False:エラー</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.Validator.IsValidTel(Moca.Util.ValidateTypes)">
	<summary>
 電話番号エラー有無
 </summary>
	<param name="validates">チェック結果</param>
	<returns>True:正常、False:エラー</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.Validator.IsValidInJis(Moca.Util.ValidateTypes)">
	<summary>
 文字列に全角文字が含まれているかエラー有無
 </summary>
	<param name="validates">チェック結果</param>
	<returns>True:正常、False:エラー</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.Validator.IsValidLenghtMin(Moca.Util.ValidateTypes)">
	<summary>
 最小桁数エラー有無
 </summary>
	<param name="validates">チェック結果</param>
	<returns>True:正常、False:エラー</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.Validator.IsValidLenghtMax(Moca.Util.ValidateTypes)">
	<summary>
 最大桁数エラー有無
 </summary>
	<param name="validates">チェック結果</param>
	<returns>True:正常、False:エラー</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.Validator.IsValidLenghtMinB(Moca.Util.ValidateTypes)">
	<summary>
 最小桁数（半角 1 バイト、全角 2 バイトとして）エラー有無
 </summary>
	<param name="validates">チェック結果</param>
	<returns>True:正常、False:エラー</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.Validator.IsValidLenghtMaxB(Moca.Util.ValidateTypes)">
	<summary>
 最大桁数（半角 1 バイト、全角 2 バイトとして）エラー有無
 </summary>
	<param name="validates">チェック結果</param>
	<returns>True:正常、False:エラー</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.Validator.IsValidDateFormat(Moca.Util.ValidateTypes)">
	<summary>
 日付エラー有無
 </summary>
	<param name="validates">チェック結果</param>
	<returns>True:正常、False:エラー</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.Validator.IsValidMinimum(Moca.Util.ValidateTypes)">
	<summary>
 最小数値エラー有無
 </summary>
	<param name="validates">チェック結果</param>
	<returns>True:正常、False:エラー</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.Validator.IsValidMaximum(Moca.Util.ValidateTypes)">
	<summary>
 最大数値エラー有無
 </summary>
	<param name="validates">チェック結果</param>
	<returns>True:正常、False:エラー</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.Validator.IsValidHalfWidthAlphanumeric(Moca.Util.ValidateTypes)">
	<summary>
 半角英数エラー有無
 </summary>
	<param name="validates">チェック結果</param>
	<returns>True:正常、False:エラー</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.Validator.IsValidMail(Moca.Util.ValidateTypes)">
	<summary>
 Mailエラー有無
 </summary>
	<param name="validates">チェック結果</param>
	<returns>True:正常、False:エラー</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.Validator.IsValidURL(Moca.Util.ValidateTypes)">
	<summary>
 URLエラー有無
 </summary>
	<param name="validates">チェック結果</param>
	<returns>True:正常、False:エラー</returns>
	<remarks></remarks>
</member><member name="T:Moca.Util.Validator">
	<summary>
 値の検証クラス
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Util.VBUtil.C_REGEX_META">
	<summary>正規表現のメタ文字集</summary>
</member><member name="F:Moca.Util.VBUtil._regexMeata">
	<summary>正規表現のメタ文字集配列</summary>
</member><member name="M:Moca.Util.VBUtil.AppPath">
	<summary>
 現在展開されているディレクトリのカレントパスを返す
 </summary>
	<returns>カレントパス</returns>
	<remarks>
 VB6 以前でいう所の App.Path と同じです。
 </remarks>
</member><member name="M:Moca.Util.VBUtil.AppPath(System.String)">
	<summary>
 現在展開されているディレクトリのカレントパスを返す
 </summary>
	<param name="value">カレントパスに付加するパス</param>
	<returns>カレントパス</returns>
	<remarks>
 VB6 以前でいう所の App.Path と同じですが、指定されたパスを付加した形で戻します。
 </remarks>
</member><member name="M:Moca.Util.VBUtil.ExistsDir(System.String)">
	<summary>
 指定されたフォルダが存在するかを判定する
 </summary>
	<param name="path">対象となるフォルダ</param>
	<returns>True:存在する、False:存在しない</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Util.VBUtil.ExistsDir(System.String,System.Boolean)">
	<summary>
 指定されたフォルダが存在するかを判定し、存在しない時は作成するかどうか指定できる
 </summary>
	<param name="path">対象となるフォルダ</param>
	<param name="autoMake">存在しないときの動作<br/>True:作成する、False:作成しない</param>
	<returns>True:存在する、False:存在しない</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Util.VBUtil.RegexMeataEscape(System.String)">
	<summary>
 正規表現のメタ文字をエスケープする
 </summary>
	<param name="value">正規表現文字列</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.VBUtil.GetImageByte(System.String)">
	<summary>
 イメージをバイト型の配列に取得
 </summary>
	<param name="filePath"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.VBUtil.CreateConstantDataSet(System.String,System.Boolean,System.Object)">
	<summary>
 定数値データを作成する為のConstantDataSetを作成する
 </summary>
	<param name="tableName">定数値テーブル名称</param>
	<param name="blankRow">ブランク行を追加するかどうか（デフォルト：作成）</param>
	<param name="blankValue">ブランク行の値（デフォルト：-1）</param>
	<returns></returns>
	<remarks>
		<c>blankRow</c> にTrueを設定すれば先頭へ空データを一行自動で追加します。<br/>
 列情報は下記の通りです。<br/>
		<br/>
		<list type="table">
			<item>
				<term>Display</term>
				<description>「値：名称」（Text &amp; ":" &amp; Value）にした文字列を保持します。</description>
			</item>
			<item>
				<term>Text</term>
				<description>名称を保持します。</description>
			</item>
			<item>
				<term>Value</term>
				<description>値を保持します。</description>
			</item>
			<item>
				<term>ValueText</term>
				<description>値の文字列を保持します。</description>
			</item>
		</list>
	</remarks>
</member><member name="M:Moca.Util.VBUtil.GetEnumName``1(System.Object)">
	<summary>
 列挙型の名称を返す
 </summary>
	<typeparam name="T">列挙型</typeparam>
	<param name="value">対象となる値</param>
	<returns>名称</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.VBUtil.LeftB(System.String,System.Int32)">
	<summary>
 文字列の左端から指定したバイト数分の文字列を返します。
 </summary>
	<param name="stTarget">取り出す元になる文字列。</param>
	<param name="iByteSize">取り出すバイト数。</param>
	<returns>左端から指定されたバイト数分の文字列。</returns>
</member><member name="M:Moca.Util.VBUtil.MidB(System.String,System.Int32)">
	<summary>
 文字列の指定されたバイト位置以降のすべての文字列を返します。
 </summary>
	<param name="value">取り出す元になる文字列。</param>
	<param name="startPos">取り出しを開始する位置。</param>
	<returns>指定されたバイト位置以降のすべての文字列。</returns>
</member><member name="M:Moca.Util.VBUtil.MidB(System.String,System.Int32,System.Int32)">
	<summary>
 文字列の指定されたバイト位置から、指定されたバイト数分の文字列を返します。
 </summary>
	<param name="value">取り出す元になる文字列。</param>
	<param name="startPos">取り出しを開始する位置。</param>
	<param name="getLength">取り出すバイト数。</param>
	<returns>指定されたバイト位置から指定されたバイト数分の文字列。</returns>
</member><member name="M:Moca.Util.VBUtil.RightB(System.String,System.Int32)">
	<summary>
 文字列の右端から指定されたバイト数分の文字列を返します。
 </summary>
	<param name="stTarget">取り出す元になる文字列。</param>
	<param name="iByteSize">取り出すバイト数。</param>
	<returns>右端から指定されたバイト数分の文字列。</returns>
</member><member name="M:Moca.Util.VBUtil.LenB(System.String)">
	<summary>
 半角 1 バイト、全角 2 バイトとして、指定された文字列のバイト数を返します。
 </summary>
	<param name="stTarget">バイト数取得の対象となる文字列。</param>
	<returns>半角 1 バイト、全角 2 バイトでカウントされたバイト数。</returns>
</member><member name="M:Moca.Util.VBUtil.CAsc(System.String)">
	<summary>
 文字列を文字コードを表す整数値に変換する
 </summary>
	<param name="targetValue">変換対象の文字列</param>
	<returns></returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Util.VBUtil.IsShiftJISOnlyText(System.String)">
	<summary>
 ShiftJISに変換できない文字が含まれているか返す
 </summary>
	<param name="val">対象の文字列</param>
	<returns>True:含まれていない、False:含まれている</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.VBUtil.CBytes(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
	<summary>
 イメージをバイトへ変換
 </summary>
	<param name="source"></param>
	<param name="format"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Util.VBUtil">
	<summary>
 VB.NET 便利メソッド集
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Util.ValidateUtil.IsInJis(System.String)">
	<summary>
 文字列に全角文字が含まれているか調べる。
 </summary>
	<param name="Value">調べる対象の文字列。</param>
	<returns>全角文字が含まれている場合はTrue、そうでない場合False。</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ValidateUtil.IsSngEqules(System.Single,System.Single,System.Single)">
	<summary>
 Singleの比較
 </summary>
	<param name="valueA">比較元</param>
	<param name="valueB">比較先</param>
	<param name="delta">許容可能な差</param>
	<returns></returns>
	<remarks>
 System 名前空間にある Math クラスの Abs メソッドを使用して、2 つの数値の絶対的な差を計算します。
 許容できる最大の差を決めます。2 つの数値の差がこれより小さい場合、2 つが等価であると見なしても実用上の問題がないような値にしてください。
 差の絶対値と許容可能な差を比較します。
 </remarks>
</member><member name="M:Moca.Util.ValidateUtil.ValidFileName(System.String)">
	<summary>
 ファイル名として使用出来ない禁止文字を「＿」（アンダーバー）で置換します。
 </summary>
	<param name="filename">ファイル名</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ValidateUtil.ValidFileName(System.String,System.String)">
	<summary>
 ファイル名として使用出来ない禁止文字を指定された文字列で置換します。
 </summary>
	<param name="filename">ファイル名</param>
	<param name="replaceString">置換する文字列</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ValidateUtil.ValidExcelSheetName(System.String)">
	<summary>
 シート名として使用出来ない禁止文字を「＿」（アンダーバー）で置換し31文字以内にします。
 </summary>
	<param name="sheetName">シート名</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ValidateUtil.ValidExcelSheetName(System.String,System.String)">
	<summary>
 シート名として使用出来ない禁止文字を指定された文字列で置換し31文字以内にします。
 </summary>
	<param name="sheetName">シート名</param>
	<param name="replaceString">置換する文字列</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Util.ValidateUtil">
	<summary>
 検証集
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Util.ClassUtil.NewInstance(System.Type)">
	<summary>
 指定された型のインスタンス化
 </summary>
	<param name="type">インスタンス化したい型</param>
	<returns>生成したインスタンス</returns>
	<remarks>
 引数無しコンストラクタのとき
 </remarks>
</member><member name="M:Moca.Util.ClassUtil.NewInstance(System.Type,System.Object[])">
	<summary>
 指定された型のインスタンス化
 </summary>
	<param name="type">インスタンス化したい型</param>
	<param name="args">コンストラクタの引数</param>
	<returns>生成したインスタンス</returns>
	<remarks>
 引数有りコンストラクタのとき
 </remarks>
</member><member name="M:Moca.Util.ClassUtil.GetProperties(System.Type)">
	<summary>
 引数タイプ内のプロパティ定義を返す
 </summary>
	<param name="typ">タイプ</param>
	<returns>プロパティ定義配列</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ClassUtil.GetProperties(System.Object)">
	<summary>
 引数インスタンス内のプロパティ情報を返す
 </summary>
	<param name="target">インスタンス</param>
	<returns>プロパティ定義配列</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ClassUtil.GetProperties(System.Type,System.String)">
	<summary>
 引数タイプ内のプロパティ定義を返す
 </summary>
	<param name="typ">タイプ</param>
	<returns>プロパティ定義配列</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ClassUtil.GetFields(System.Type)">
	<summary>
 引数タイプ内のフィールド定義を返す
 </summary>
	<param name="typ">タイプ</param>
	<returns>フィールド定義配列</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ClassUtil.GetFields(System.Object)">
	<summary>
 引数インスタンス内のフィールド情報を返す
 </summary>
	<param name="target">インスタンス</param>
	<returns>フィールド定義配列</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ClassUtil.GetMethods(System.Type)">
	<summary>
 引数タイプ内のメソッド定義を返す
 </summary>
	<param name="typ">タイプ</param>
	<returns>メソッド定義配列</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ClassUtil.GetMethods(System.Object)">
	<summary>
 引数インスタンス内のメソッド情報を返す
 </summary>
	<param name="target">インスタンス</param>
	<returns>メソッド定義配列</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ClassUtil.GetEvents(System.Type)">
	<summary>
 引数タイプ内のイベント定義を返す
 </summary>
	<param name="typ">タイプ</param>
	<returns>イベント定義配列</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ClassUtil.GetEvents(System.Object)">
	<summary>
 引数インスタンス内のイベント情報を返す
 </summary>
	<param name="target">インスタンス</param>
	<returns>イベント定義配列</returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ClassUtil.GetCustomAttributes``1(System.Type)">
	<summary>
 指定された型に存在する指定されたカスタム属性を含む配列を返します。
 </summary>
	<typeparam name="T">対象となるカスタム属性</typeparam>
	<param name="typ">対象となる型</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ClassUtil.GetCustomAttribute``1(System.Type)">
	<summary>
 指定された型に存在する指定されたカスタム属性を含む配列を返します。
 </summary>
	<typeparam name="T">対象となるカスタム属性</typeparam>
	<param name="typ">対象となる型</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ClassUtil.GetCustomAttributes(System.Type)">
	<summary>
 指定されたフィールドに指定されたカスタム属性を含む配列を返します。
 </summary>
	<param name="typ">対象となるフィールド</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ClassUtil.GetCustomAttributes``1(System.Reflection.PropertyInfo)">
	<summary>
 指定されたプロパティに存在する指定されたカスタム属性を含む配列を返します。
 </summary>
	<typeparam name="T">対象となるカスタム属性</typeparam>
	<param name="prop">対象となるプロパティ</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ClassUtil.GetCustomAttribute``1(System.Reflection.PropertyInfo)">
	<summary>
 指定されたプロパティに存在する指定されたカスタム属性を返します。
 </summary>
	<typeparam name="T">対象となるカスタム属性</typeparam>
	<param name="prop">対象となるプロパティ</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ClassUtil.GetCustomAttribute``1(System.Reflection.FieldInfo)">
	<summary>
 指定されたフィールドに指定されたカスタム属性を返します。
 </summary>
	<typeparam name="T">対象となるカスタム属性</typeparam>
	<param name="field">対象となるフィールド</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ClassUtil.GetCustomAttributes``1(System.Reflection.FieldInfo)">
	<summary>
 指定されたフィールドに指定されたカスタム属性を含む配列を返します。
 </summary>
	<typeparam name="T">対象となるカスタム属性</typeparam>
	<param name="field">対象となるフィールド</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ClassUtil.GetCustomAttributes(System.Reflection.FieldInfo)">
	<summary>
 指定されたフィールドに指定されたカスタム属性を含む配列を返します。
 </summary>
	<param name="field">対象となるフィールド</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ClassUtil.GetCustomAttributes``1(System.Reflection.MethodBase,System.Boolean)">
	<summary>
 指定されたフィールドに存在するカスタム属性を含む配列を返します。
 </summary>
	<typeparam name="T">対象となるカスタム属性</typeparam>
	<param name="method">対象となるフィールド</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ClassUtil.GetCustomAttribute``1(System.Reflection.MethodBase,System.Boolean)">
	<summary>
 指定されたフィールドに存在するカスタム属性を返します。
 </summary>
	<typeparam name="T">対象となるカスタム属性</typeparam>
	<param name="method">対象となるフィールド</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ClassUtil.GetCustomAttributes``1(System.Reflection.EventInfo,System.Boolean)">
	<summary>
 指定されたフィールドに存在するカスタム属性を含む配列を返します。
 </summary>
	<typeparam name="T">対象となるカスタム属性</typeparam>
	<param name="method">対象となるフィールド</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ClassUtil.GetCustomAttribute``1(System.Reflection.EventInfo,System.Boolean)">
	<summary>
 指定されたフィールドに存在するカスタム属性を返します。
 </summary>
	<typeparam name="T">対象となるカスタム属性</typeparam>
	<param name="method">対象となるフィールド</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Util.ClassUtil.Inject(System.Object,System.Reflection.FieldInfo,System.Object[])">
	<summary>
 フィールドへインスタンスを注入
 </summary>
	<param name="target">対象となるインスタンス</param>
	<param name="field">対象となるインスタンスのフィールド</param>
	<param name="args">フィールドへ設定するインスタンスの配列</param>
	<remarks></remarks>
</member><member name="M:Moca.Util.ClassUtil.IsInterfaceImpl(System.Type,System.Type)">
	<summary>
 インタフェースが実装されているかチェックする
 </summary>
	<param name="targetType">対象となる型</param>
	<param name="checkType">チェックする型</param>
	<returns>True は存在する、False は存在しない</returns>
	<remarks></remarks>
</member><member name="T:Moca.Util.ClassUtil">
	<summary>
 タイプを操作するのに便利なメソッド集
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Util.StopWatch._sTime">
	<summary>開始時刻</summary>
</member><member name="F:Moca.Util.StopWatch._eTime">
	<summary>終了時刻</summary>
</member><member name="M:Moca.Util.StopWatch.#ctor">
	<summary>
 デフォルトコンストラクタ
 </summary>
	<remarks></remarks>
</member><member name="P:Moca.Util.StopWatch.StartTime">
	<summary>
 開始時刻
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Util.StopWatch.StopTime">
	<summary>
 終了時刻
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Util.StopWatch.ElapsedMilliseconds">
	<summary>
 計測した秒数を参照
 </summary>
	<value>計測結果秒数</value>
	<remarks>
	</remarks>
</member><member name="M:Moca.Util.StopWatch.Start">
	<summary>
 スタート
 </summary>
	<remarks>
	</remarks>
</member><member name="M:Moca.Util.StopWatch.Stop">
	<summary>
 ストップ
 </summary>
	<remarks>
	</remarks>
</member><member name="T:Moca.Util.StopWatch">
	<summary>
 ストップウォッチ
 </summary>
	<remarks>
 このクラスは、.NET Framework version 1.1 用です。<br/>
 .NET Framework version 2.0 では <see cref="T:System.Diagnostics.Stopwatch"/> が新しく追加されてます。<br/>
 基本的には標準を使ってください。機能拡張したい時はこちらを使って機能拡張するのもありかと。
 </remarks>
</member><member name="M:Moca.CultureUtil.PCCulture">
	<summary>
 実行しているOSのカルチャ情報の取得
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.CultureUtil.GetCulture(System.String[])">
	<summary>
 カルチャーを取得
 </summary>
	<param name="cultureNames"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.CultureUtil.SetCulture(System.String)">
	<summary>
 カルチャーを設定
 </summary>
	<param name="cultureName"></param>
	<remarks></remarks>
</member><member name="F:Moca.ConstantDataSet._blankRow">
	<summary>ブランク行の有無</summary>
</member><member name="F:Moca.ConstantDataSet._blankValue">
	<summary>ブランク行の値</summary>
</member><member name="F:Moca.ConstantDataSet._delm">
	<summary>値と内容の区切り文字</summary>
</member><member name="M:Moca.ConstantDataSet.#ctor(System.String,System.Boolean,System.Object,System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="tableName">定数値テーブル名称</param>
	<param name="blankRow">ブランク行を追加するかどうか（デフォルト：作成）</param>
	<param name="blankValue">ブランク行の値（デフォルト：-1）</param>
	<param name="delm">値と内容の区切り文字</param>
	<remarks></remarks>
</member><member name="P:Moca.ConstantDataSet.BlankValue">
	<summary>
 ブランク行の値プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.ConstantDataSet.Delm">
	<summary>
 値と内容の区切り文字
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.ConstantDataSet.ConstantDataTable.AddRow(System.String,System.Int32)">
	<summary>
 定数値データのDataTableへ行を追加します。
 </summary>
	<param name="text">名称</param>
	<param name="value">値</param>
	<remarks></remarks>
</member><member name="M:Moca.ConstantDataSet.ConstantDataTable.AddRow(System.String,System.String)">
	<summary>
 定数値データのDataTableへ行を追加します。
 </summary>
	<param name="text">名称</param>
	<param name="value">値</param>
	<remarks></remarks>
</member><member name="M:Moca.ConstantDataSet.ConstantDataTable.AddRow(System.String,System.Double)">
	<summary>
 定数値データのDataTableへ行を追加します。
 </summary>
	<param name="text">名称</param>
	<param name="value">値</param>
	<remarks></remarks>
</member><member name="M:Moca.ConstantDataSet.ConstantDataTable.RowsConstant(System.Int32)">
	<summary>
		<see cref="P:System.Data.DataTable.Rows"/> メソッドの戻り値を <see cref="T:Moca.ConstantDataSet.ConstantRow"/> にしたメソッド。
 </summary>
	<param name="index">行位置</param>
	<returns>ConstantRow</returns>
	<remarks></remarks>
</member><member name="T:Moca.ConstantDataSet.ConstantDataTable">
	<summary>
Represents the strongly named DataTable class.
</summary>
</member><member name="T:Moca.ConstantDataSet.ConstantRow">
	<summary>
Represents strongly named DataRow class.
</summary>
</member><member name="T:Moca.ConstantDataSet.ConstantRowChangeEvent">
	<summary>
Row event argument class
</summary>
</member><member name="T:Moca.ConstantDataSet">
	<summary>
Represents a strongly typed in-memory cache of data.
</summary>
</member><member name="F:Moca.Security.PublicKeyCryptosystem.AlgorithmType.RSA">
	<summary>RSA アルゴリズム</summary>
</member><member name="F:Moca.Security.PublicKeyCryptosystem.AlgorithmType.DSA">
	<summary>DSA アルゴリズム</summary>
</member><member name="T:Moca.Security.PublicKeyCryptosystem.AlgorithmType">
	<summary>暗号化する種別</summary>
</member><member name="F:Moca.Security.PublicKeyCryptosystem._asymmetricAlgorithm">
	<summary>暗号化するアルゴリズムインスタンス</summary>
</member><member name="M:Moca.Security.PublicKeyCryptosystem.#ctor(Moca.Security.PublicKeyCryptosystem.AlgorithmType)">
	<summary>
 デフォルトコンストラクタ
 </summary>
	<param name="hashType">暗号化する種別</param>
	<remarks>
	</remarks>
</member><member name="T:Moca.Security.PublicKeyCryptosystem">
	<summary>
 公開鍵暗号方法で暗号化する
 </summary>
	<remarks>
 未実装
 </remarks>
</member><member name="T:Moca.Security.HashCryptosystem.ComputeHashDelegate">
	<summary>暗号化するメソッドのデリゲート</summary>
</member><member name="F:Moca.Security.HashCryptosystem.ComputeHashType.MD5">
	<summary>MD5 ハッシュ アルゴリズム</summary>
</member><member name="F:Moca.Security.HashCryptosystem.ComputeHashType.SH1">
	<summary>SH1 ハッシュ アルゴリズム</summary>
</member><member name="F:Moca.Security.HashCryptosystem.ComputeHashType.SH256">
	<summary>SH256 ハッシュ アルゴリズム</summary>
</member><member name="F:Moca.Security.HashCryptosystem.ComputeHashType.SH384">
	<summary>SH384 ハッシュ アルゴリズム</summary>
</member><member name="F:Moca.Security.HashCryptosystem.ComputeHashType.SH512">
	<summary>SH512 ハッシュ アルゴリズム</summary>
</member><member name="T:Moca.Security.HashCryptosystem.ComputeHashType">
	<summary>暗号化する種別</summary>
</member><member name="F:Moca.Security.HashCryptosystem._hashAlgorithm">
	<summary>暗号化するアルゴリズムインスタンス</summary>
</member><member name="F:Moca.Security.HashCryptosystem._computeHash">
	<summary>暗号化するメソッド</summary>
</member><member name="M:Moca.Security.HashCryptosystem.#ctor(Moca.Security.HashCryptosystem.ComputeHashType)">
	<summary>
 デフォルトコンストラクタ
 </summary>
	<param name="hashType">暗号化する種別</param>
	<remarks>
	</remarks>
</member><member name="M:Moca.Security.HashCryptosystem.Dispose">
	<summary>
 リソースの解放
 </summary>
	<remarks>
	</remarks>
</member><member name="M:Moca.Security.HashCryptosystem.Encrypt(System.String)">
	<summary>
 暗号化
 </summary>
	<param name="plainText">対象の文字列</param>
	<returns>結果文字列</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Security.HashCryptosystem.Encrypt(System.Byte[])">
	<summary>
 暗号化
 </summary>
	<param name="plainText">対象のバイト配列</param>
	<returns>結果バイト配列</returns>
	<remarks>
	</remarks>
</member><member name="T:Moca.Security.HashCryptosystem">
	<summary>
 ハッシュアルゴリズム を使用してデータの暗号化を行う
 </summary>
	<remarks>
	</remarks>
</member><member name="M:Moca.Security.DPAPICryptosystem.CryptProtectData(Moca.Security.DPAPICryptosystem.DATA_BLOB@,System.String,Moca.Security.DPAPICryptosystem.DATA_BLOB@,System.IntPtr,Moca.Security.DPAPICryptosystem.CRYPTPROTECT_PROMPTSTRUCT@,System.Int32,Moca.Security.DPAPICryptosystem.DATA_BLOB@)">
	<summary>
 暗号化
 </summary>
	<param name="pDataIn"></param>
	<param name="szDataDescr"></param>
	<param name="pOptionalEntropy"></param>
	<param name="pvReseved"></param>
	<param name="pPromptStruct"></param>
	<param name="dwFlags"></param>
	<param name="pDataOut"></param>
	<returns></returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Security.DPAPICryptosystem.CryptUnprotectData(Moca.Security.DPAPICryptosystem.DATA_BLOB@,System.String,Moca.Security.DPAPICryptosystem.DATA_BLOB@,System.IntPtr,Moca.Security.DPAPICryptosystem.CRYPTPROTECT_PROMPTSTRUCT@,System.Int32,Moca.Security.DPAPICryptosystem.DATA_BLOB@)">
	<summary>
 復号化
 </summary>
	<param name="pDataIn"></param>
	<param name="szDataDescr"></param>
	<param name="pOptionalEntropy"></param>
	<param name="pvReserved"></param>
	<param name="pPromptStruct"></param>
	<param name="dwFlags"></param>
	<param name="pDataOut"></param>
	<returns></returns>
	<remarks>
	</remarks>
</member><member name="F:Moca.Security.DPAPICryptosystem.StoreType.USE_MACHINE_STORE">
	<summary>コンピュータ単位</summary>
</member><member name="F:Moca.Security.DPAPICryptosystem.StoreType.USE_USER_STORE">
	<summary>ユーザー単位</summary>
</member><member name="T:Moca.Security.DPAPICryptosystem.StoreType">
	<summary>暗号化方法</summary>
</member><member name="F:Moca.Security.DPAPICryptosystem._store">
	<summary>暗号化方法</summary>
</member><member name="M:Moca.Security.DPAPICryptosystem.#ctor(Moca.Security.DPAPICryptosystem.StoreType)">
	<summary>
 コンストラクタ
 </summary>
	<param name="storeValue">コンピュータストアかユーザーストアを指定</param>
	<remarks>
	</remarks>
</member><member name="M:Moca.Security.DPAPICryptosystem.Encrypt(System.String)">
	<summary>
 暗号化
 </summary>
	<param name="plainText">対象となる文字列</param>
	<returns>暗号化した結果文字列</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Security.DPAPICryptosystem.Encrypt(System.String,System.String)">
	<summary>
 暗号化
 </summary>
	<param name="plainText">対象となる文字列</param>
	<param name="optionalEntropy">情報の解読をより困難にするキー（ランダム値）</param>
	<returns>暗号化した結果文字列</returns>
	<remarks>
 optionalEntropyはアプリケーションにて管理する必要があります。
 </remarks>
</member><member name="M:Moca.Security.DPAPICryptosystem.Encrypt(System.Byte[],System.Byte[])">
	<summary>
 暗号化
 </summary>
	<param name="plainText">対象となるバイト配列</param>
	<param name="optionalEntropy">情報の解読をより困難にするキー（ランダム値）</param>
	<returns>暗号化した結果バイト配列</returns>
	<remarks>
 optionalEntropyはアプリケーションにて管理する必要があります。
 </remarks>
</member><member name="M:Moca.Security.DPAPICryptosystem.Decrypt(System.String)">
	<summary>
 復号化
 </summary>
	<param name="cipherText">暗号化された文字列</param>
	<returns>結果文字列</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Security.DPAPICryptosystem.Decrypt(System.String,System.String)">
	<summary>
 復号化
 </summary>
	<param name="cipherText">暗号化された文字列</param>
	<param name="optionalEntropy">情報の解読をより困難にするキー（ランダム値）</param>
	<returns>結果文字列</returns>
	<remarks>
 optionalEntropyはアプリケーションにて管理する必要があります。
 </remarks>
</member><member name="M:Moca.Security.DPAPICryptosystem.Decrypt(System.Byte[],System.Byte[])">
	<summary>
 復号化
 </summary>
	<param name="cipherText">暗号化されたバイト配列</param>
	<param name="optionalEntropy">情報の解読をより困難にするキー（ランダム値）</param>
	<returns>結果バイト配列</returns>
	<remarks>
 optionalEntropyはアプリケーションにて管理する必要があります。
 </remarks>
</member><member name="M:Moca.Security.DPAPICryptosystem._initPromptstruct(Moca.Security.DPAPICryptosystem.CRYPTPROTECT_PROMPTSTRUCT@)">
	<summary>
 初期化
 </summary>
	<param name="ps"></param>
	<remarks>
	</remarks>
</member><member name="M:Moca.Security.DPAPICryptosystem._allocBlob(System.Byte[],Moca.Security.DPAPICryptosystem.DATA_BLOB@)">
	<summary>
 暗号化データの領域割り当て
 </summary>
	<param name="data">対象データバイト配列</param>
	<param name="blob">割当てた領域</param>
	<remarks>
	</remarks>
</member><member name="T:Moca.Security.DPAPICryptosystem">
	<summary>
 DPAPI を使用してデータの暗号化と解読を行う
 </summary>
	<remarks>
 コンピュータまたはユーザーベースのキーストアを使用してデータを暗号化および解読するために、
 DPAPI (データ保護 API) への呼び出しをカプセル化するマネージクラスライブラリです。
 
 ユーザー ストア では、DPAPI 関数を呼び出すコードに関連付けられたユーザー アカウントのパスワードを利用して、暗号化キーを生成します。
 したがって、オペレーティング システムがキーを管理するため、アプリケーションではキーの管理が不要となります。
 
 コンピュータ ストア では、ユーザーは関係なくコンピュータで暗号化キーを管理します。
 エントロピ パラメータを使用しないと、すべてのユーザーがデータの暗号化を解除できるため、セキュリティが弱くなります。
 エントロピとは、機密情報の解読をより困難にするランダム値です。このパラメータはアプリケーションにて管理する必要があります。
 </remarks>
</member><member name="M:Moca.Db.CommandWrapper.UpdateCommandWrapper.#ctor(Moca.Db.IDao,System.Data.IDbCommand)">
	<summary>
 コンストラクタ
 </summary>
	<param name="dba">親となるDBAccessインスタンス</param>
	<param name="cmd">実行するDBCommandインスタンス</param>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.CommandWrapper.UpdateCommandWrapper.Execute">
	<summary>
 SQL実行！
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.CommandWrapper.UpdateCommandWrapper">
	<summary>
 UPDATE文を実行する為のDBCommandのラッパークラス
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.CommandWrapper.SqlCommandWrapper.dba">
	<summary>親となるDBAccessインスタンス</summary>
</member><member name="F:Moca.Db.CommandWrapper.SqlCommandWrapper.cmd">
	<summary>実行するDBCommandインスタンス</summary>
</member><member name="F:Moca.Db.CommandWrapper.SqlCommandWrapper._preparedStatement">
	<summary>コンパイル済みのSQLを使うかどうか</summary>
</member><member name="F:Moca.Db.CommandWrapper.SqlCommandWrapper._placeholders">
	<summary>プレースフォルダ配列</summary>
</member><member name="F:Moca.Db.CommandWrapper.SqlCommandWrapper._originalCommandText">
	<summary>SQL文のオリジナル</summary>
</member><member name="F:Moca.Db.CommandWrapper.SqlCommandWrapper._outputParams">
	<summary>実行後の戻り値</summary>
</member><member name="F:Moca.Db.CommandWrapper.SqlCommandWrapper.entityBuilder">
	<summary>データベースから取得したデータの格納先となる Entity を作成する</summary>
</member><member name="M:Moca.Db.CommandWrapper.SqlCommandWrapper.#ctor(Moca.Db.IDao,System.Data.IDbCommand)">
	<summary>
 コンストラクタ
 </summary>
	<param name="dba">親となるDBAccessインスタンス</param>
	<param name="cmd">実行するDBCommandインスタンス</param>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.CommandWrapper.SqlCommandWrapper.Dispose(System.Boolean)">
	<summary>
 IDisposable
 </summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="P:Moca.Db.CommandWrapper.SqlCommandWrapper.Command">
	<summary>
 実行するDBCommandインスタンスを参照
 </summary>
	<value>実行するDBCommandインスタンス</value>
	<remarks>
	</remarks>
</member><member name="P:Moca.Db.CommandWrapper.SqlCommandWrapper.PreparedStatement">
	<summary>
 コンパイル済みのSQLを使うかどうかを指定
 </summary>
	<value>
 True:使用する
 False:使用しない
 </value>
	<remarks>
	</remarks>
</member><member name="P:Moca.Db.CommandWrapper.SqlCommandWrapper.CommandText">
	<summary>
 SQL文
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.CommandWrapper.SqlCommandWrapper.ResultOutputParam">
	<summary>
 実行後の戻り値を返す
 </summary>
	<value></value>
	<returns>戻り値</returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.CommandWrapper.SqlCommandWrapper.SetParameter(System.String,System.Object)">
	<summary>
 入力パラメータを設定する
 </summary>
	<param name="parameterName">パラメータ名</param>
	<param name="value">値</param>
	<returns>パラメータインスタンス</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.CommandWrapper.SqlCommandWrapper.SetParameter(System.String,System.Array)">
	<summary>
 入力パラメータを設定する
 </summary>
	<param name="parameterName">パラメータ名</param>
	<param name="values">値配列</param>
	<returns>パラメータインスタンス</returns>
	<remarks>
 当メソッドでは IN 句を作成します。
 IN 句はパラメータとしては扱えないので、SQL文内に存在するパラメータ名部分を文字列変換します。
 </remarks>
</member><member name="M:Moca.Db.CommandWrapper.SqlCommandWrapper.AddInParameter(System.String,System.Data.DbType)">
	<summary>
 入力パラメータを追加する
 </summary>
	<param name="parameterName">パラメータ名</param>
	<param name="dbTypeValue">パラメータの型</param>
	<returns>パラメータインスタンス</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.CommandWrapper.SqlCommandWrapper.AddInParameter(System.String,System.Data.DbType,System.Int32)">
	<summary>
 入力パラメータを追加する
 </summary>
	<param name="parameterName">パラメータ名</param>
	<param name="dbTypeValue">パラメータの型</param>
	<param name="size">パラメータのサイズ</param>
	<returns>パラメータインスタンス</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.CommandWrapper.SqlCommandWrapper.AddOutParameter(System.String)">
	<summary>
 出力パラメータを追加する
 </summary>
	<param name="parameterName">パラメータ名</param>
	<returns>パラメータインスタンス</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.CommandWrapper.SqlCommandWrapper.AddOutParameter(System.String,System.Data.DbType)">
	<summary>
 出力パラメータを追加する
 </summary>
	<param name="parameterName">パラメータ名</param>
	<param name="dbTypeValue">パラメータの型</param>
	<returns>パラメータインスタンス</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.CommandWrapper.SqlCommandWrapper.HaveOutParameter">
	<summary>
 パラメータ内に戻り値があるか返す
 </summary>
	<returns>True は戻り値有り、False は戻り値無し</returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.CommandWrapper.SqlCommandWrapper.GetParameterValue(System.String)">
	<summary>
 出力パラメータを参照する
 </summary>
	<param name="parameterName">パラメータ名</param>
	<returns>出力パラメータ値</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.CommandWrapper.SqlCommandWrapper.Execute">
	<summary>
 SQL実行
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.CommandWrapper.SqlCommandWrapper.Prepare">
	<summary>
 コンパイル済みのSQLにする
 </summary>
	<remarks>
 当メソッド実行前に予め <see cref="M:Moca.Db.CommandWrapper.SqlCommandWrapper.AddInParameter(System.String,System.Data.DbType)"/> を使用してパラメータを設定しておいてください。<br/>
	</remarks>
</member><member name="M:Moca.Db.CommandWrapper.SqlCommandWrapper.addParameter(System.String,System.Object)">
	<summary>
 パラメータを追加又は取得する
 </summary>
	<param name="parameterName">パラメータ名</param>
	<param name="value">パラメータの値</param>
	<returns>パラメータインスタンス</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.CommandWrapper.SqlCommandWrapper.cnvPlaceholder">
	<summary>
 プレースフォルダを取得
 </summary>
	<remarks>
 今後の拡張のための実装<br/>
 だが、リリースするかは不明
 </remarks>
</member><member name="M:Moca.Db.CommandWrapper.SqlCommandWrapper._getPlaceholder">
	<summary>
 SQLコマンドのプレースフォルダを返す。
 </summary>
	<returns>プレースフォルダ名の配列</returns>
	<remarks>
 プレースフォルダは「/*name*/」としてください。<br/>
	</remarks>
</member><member name="T:Moca.Db.CommandWrapper.SqlCommandWrapper">
	<summary>
 DBCommandのラッピング抽象クラス
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.CommandWrapper.SelectCommandWrapper._dtEnum">
	<summary>結果の行データ</summary>
</member><member name="F:Moca.Db.CommandWrapper.SelectCommandWrapper.ds">
	<summary>Select文を実行した結果</summary>
</member><member name="F:Moca.Db.CommandWrapper.SelectCommandWrapper.executeResult">
	<summary>Select文を実行した結果(Reader版)</summary>
</member><member name="M:Moca.Db.CommandWrapper.SelectCommandWrapper.#ctor(Moca.Db.IDao,System.Data.IDbCommand)">
	<summary>
 コンストラクタ
 </summary>
	<param name="dba">親となるDBAccessインスタンス</param>
	<param name="cmd">実行するDBCommandインスタンス</param>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.CommandWrapper.SelectCommandWrapper.Dispose(System.Boolean)">
	<summary>
 破棄
 </summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="M:Moca.Db.CommandWrapper.SelectCommandWrapper.Execute">
	<summary>
 SQL実行！
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.CommandWrapper.SelectCommandWrapper.Behavior">
	<summary>
 ExecuteReader に渡す CommandBehavior
 </summary>
	<value></value>
	<returns></returns>
	<remarks>
		<see cref="M:Moca.Db.CommandWrapper.SelectCommandWrapper.Execute"></see>以外では無視されます。
 <see cref="T:System.Data.SqlClient.SqlDataReader"></see>を使用している場合のみ有効。
 </remarks>
</member><member name="P:Moca.Db.CommandWrapper.SelectCommandWrapper.ResultDataSet">
	<summary>
 Select文を実行した結果を設定／参照
 </summary>
	<value>Select文を実行した結果</value>
	<remarks>
	</remarks>
</member><member name="P:Moca.Db.CommandWrapper.SelectCommandWrapper.Result1stTable">
	<summary>
 DataSet内の先頭テーブルを返す
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.CommandWrapper.SelectCommandWrapper.Result1stTableRowEnumerator">
	<summary>
 DataSet内の先頭テーブルに存在する行データのEnumeratorを返す
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.CommandWrapper.SelectCommandWrapper.Execute``1">
	<summary>
 クエリを実行し、指定されたエンティティに変換して返します。
 </summary>
	<typeparam name="T">エンティティ</typeparam>
	<returns>エンティティのリスト</returns>
	<remarks>
 当メソッドは予めデータベースをオープンしておく必要がありますが、
 オープンされていないときは、自動でオープンして終了時にクローズします。<br/>
	</remarks>
</member><member name="M:Moca.Db.CommandWrapper.SelectCommandWrapper.ExecuteScalar">
	<summary>
 クエリを実行し、そのクエリが返す結果セットの最初の行にある最初の列を返します。余分な列または行は無視されます。
 </summary>
	<returns>結果セットの最初の行にある最初の列。</returns>
	<remarks>
 当メソッドは予めデータベースをオープンしておく必要がありますが、
 オープンされていないときは、自動でオープンして終了時にクローズします。<br/>
 詳細は、<seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/> を参照してください。
 </remarks>
</member><member name="M:Moca.Db.CommandWrapper.SelectCommandWrapper.Result1stTableEntitis``1">
	<summary>
 DataSet内の先頭テーブルに存在する行データのEnumeratorを返す
 </summary>
	<typeparam name="T"></typeparam>
	<returns></returns>
	<remarks>
 存在しないときは、空の配列を返す。
 </remarks>
</member><member name="M:Moca.Db.CommandWrapper.SelectCommandWrapper.Result1stTableEntity``1(System.Int32)">
	<summary>
 DataSet内の先頭テーブルの指定された行を返す
 </summary>
	<typeparam name="T"></typeparam>
	<param name="index"></param>
	<returns>先頭テーブルのデータを指定されたEntityを使用した配列に変換して返す</returns>
	<remarks>
 存在しないときは、Nothing を返す。
 </remarks>
</member><member name="M:Moca.Db.CommandWrapper.SelectCommandWrapper.ResultConstantDataSet(System.String,System.String,System.Boolean,System.Object,System.String)">
	<summary>
 キーと値のみのデータを<see cref="T:Moca.ConstantDataSet"></see>で返す。
 </summary>
	<param name="textColumnName">文字列として扱う列名</param>
	<param name="valueColumnName">値として扱う列名</param>
	<param name="blankRow">空行有無</param>
	<param name="blankValue">空の時の値</param>
	<param name="delm">文字列と値の区切り文字</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.CommandWrapper.SelectCommandWrapper.ResultConstantDataSet(System.Int32,System.Int32,System.Boolean,System.Object,System.String)">
	<summary>
 キーと値のみのデータを<see cref="T:Moca.ConstantDataSet"></see>で返す。
 </summary>
	<param name="textColumnIndex">文字列として扱う列位置</param>
	<param name="valueColumnIndex">値として扱う列位置</param>
	<param name="blankRow">空行有無</param>
	<param name="blankValue">空の時の値</param>
	<param name="delm">文字列と値の区切り文字</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.CommandWrapper.SelectCommandWrapper">
	<summary>
 SELECT文を実行する為のDBCommandのラッパークラス
 </summary>
	<remarks></remarks>
</member><member name="P:Moca.My.Resources.Resources.ResourceManager">
	<summary>
  このクラスで使用されているキャッシュされた ResourceManager インスタンスを返します。
</summary>
</member><member name="P:Moca.My.Resources.Resources.Culture">
	<summary>
  厳密に型指定されたこのリソース クラスを使用して、すべての検索リソースに対し、
  現在のスレッドの CurrentUICulture プロパティをオーバーライドします。
</summary>
</member><member name="T:Moca.My.Resources.Resources">
	<summary>
  ローカライズされた文字列などを検索するための、厳密に型指定されたリソース クラスです。
</summary>
</member><member name="F:Moca.Html.TagTR.Tag">
	<summary>タグ名</summary>
</member><member name="F:Moca.Html.TagTR.attr">
	<summary>属性</summary>
</member><member name="F:Moca.Html.TagTR.rows">
	<summary>行</summary>
</member><member name="F:Moca.Html.TagTR.cols">
	<summary>列</summary>
</member><member name="M:Moca.Html.TagTR.#ctor">
	<summary>
 デフォルトコンストラクタ
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Html.TagTR.ToString">
	<summary>
 タグ出力
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Html.TagTR.AddAttribute(System.String)">
	<summary>
 属性の追加
 </summary>
	<param name="value">値</param>
	<remarks></remarks>
</member><member name="M:Moca.Html.TagTR.AddRow">
	<summary>
 行の追加
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Html.TagTR.AddRow(System.String)">
	<summary>
 行の追加
 </summary>
	<param name="attr">属性</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Html.TagTR.AddTD(System.String)">
	<summary>
 列の追加
 </summary>
	<param name="value">値</param>
	<remarks></remarks>
</member><member name="M:Moca.Html.TagTR.AddTD(System.String,System.String)">
	<summary>
 列の追加
 </summary>
	<param name="value">値</param>
	<param name="attr">属性</param>
	<remarks></remarks>
</member><member name="M:Moca.Html.TagTR.chkRowSpan">
	<summary>
 行追加があれば、rowspan属性を付ける
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Html.TagTR">
	<summary>
 ＴＲタグ出力クラス
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Html.TagTD.Tag">
	<summary>タグ名</summary>
</member><member name="F:Moca.Html.TagTD.value">
	<summary>値</summary>
</member><member name="F:Moca.Html.TagTD.attr">
	<summary>属性</summary>
</member><member name="M:Moca.Html.TagTD.#ctor">
	<summary>
 デフォルトコンストラクタ
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Html.TagTD.ToString">
	<summary>
 ＴＤタグの出力
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Html.TagTD.AddAttribute(System.String)">
	<summary>
 属性の追加
 </summary>
	<param name="value">値</param>
	<remarks></remarks>
</member><member name="M:Moca.Html.TagTD.AddValue(System.String)">
	<summary>
 値の追加
 </summary>
	<param name="value">値</param>
	<remarks></remarks>
</member><member name="M:Moca.Html.TagTD.AddValue(System.String,System.String)">
	<summary>
 値の追加
 </summary>
	<param name="value">値</param>
	<param name="attr">属性</param>
	<remarks></remarks>
</member><member name="T:Moca.Html.TagTD">
	<summary>
 ＴＤタグ出力クラス
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Html.AbstractTag.sNewLine">
	<summary>改行有無</summary>
</member><member name="M:Moca.Html.AbstractTag.#ctor">
	<summary>
 デフォルトコンストラクタ
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Html.AbstractTag.sTag(System.String,System.String)">
	<summary>
 開始タグ
 </summary>
	<param name="value">タグ名</param>
	<param name="attr">属性文字列</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Html.AbstractTag.eTag(System.String)">
	<summary>
 閉じタグ
 </summary>
	<param name="value">タグ名</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Html.AbstractTag">
	<summary>
 タグ出力抽象クラス
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Db.CommandWrapper.InsertCommandWrapper.#ctor(Moca.Db.IDao,System.Data.IDbCommand)">
	<summary>
 コンストラクタ
 </summary>
	<param name="dba">親となるDBAccessインスタンス</param>
	<param name="cmd">実行するDBCommandインスタンス</param>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.CommandWrapper.InsertCommandWrapper.Execute">
	<summary>
 SQL実行！
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.CommandWrapper.InsertCommandWrapper">
	<summary>
 INSERT文を実行する為のDBCommandのラッパークラス
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Security.DPAPIConfiguration.C_PROVIDER">
	<summary>使用するプロパイダー</summary>
</member><member name="F:Moca.Security.DPAPIConfiguration.config">
	<summary>使用するapp.configファイル</summary>
</member><member name="F:Moca.Security.DPAPIConfiguration._mylog">
	<summary>log4net logger</summary>
</member><member name="M:Moca.Security.DPAPIConfiguration.#ctor">
	<summary>
 デフォルトコンストラクタ
 </summary>
	<remarks>
 起動中アプリケーションの構成ファイルに対して処理します。
 </remarks>
</member><member name="M:Moca.Security.DPAPIConfiguration.#ctor(System.Configuration.Configuration)">
	<summary>
 コンストラクタ
 </summary>
	<param name="config">使用するapp.configファイル</param>
	<remarks>app.configファイルを指定する時に使用する。</remarks>
</member><member name="M:Moca.Security.DPAPIConfiguration.ProtectConnectionStrings">
	<summary>
 接続文字列を暗号化します。
 </summary>
	<remarks>
 アプリケーション構成ファイルの接続文字列セクションに対して暗号化を行います。<br/>
 ただし、下記の場合は暗号化は行いません。<br/>
 ・接続文字列が無い時<br/>
 ・既に暗号化されている時<br/>
 ・ロックされている時<br/>
	</remarks>
</member><member name="M:Moca.Security.DPAPIConfiguration.UnProtectConnectionStrings">
	<summary>
 接続文字列を複合化します。
 </summary>
	<remarks>
 アプリケーション構成ファイルの接続文字列セクションに対して複合化を行います。<br/>
 ただし、下記の場合は複合化は行いません。<br/>
 ・接続文字列が無い時<br/>
 ・既に暗号化されている時<br/>
 ・ロックされている時<br/>
	</remarks>
</member><member name="T:Moca.Security.DPAPIConfiguration">
	<summary>
 Dpapiを利用してapp.configを暗号化する為のクラス
 </summary>
	<remarks>
 下記の暗号化/複合化をサポートしています。
 <list>
			<item>ConnectionStrings</item>
		</list>
	</remarks>
</member><member name="F:Moca.Db.CommandWrapper.StoredProcedureCommandWrapper._addParameterValueCount">
	<summary>パラメータカウンター</summary>
</member><member name="M:Moca.Db.CommandWrapper.StoredProcedureCommandWrapper.#ctor(Moca.Db.IDao,System.Data.IDbCommand)">
	<summary>
 コンストラクタ
 </summary>
	<param name="dba">親となるDBAccessインスタンス</param>
	<param name="cmd">実行するDBCommandインスタンス</param>
	<remarks>
	</remarks>
</member><member name="P:Moca.Db.CommandWrapper.StoredProcedureCommandWrapper.ReturnValue">
	<summary>
 実行後の戻り値を返す
 </summary>
	<value></value>
	<returns>戻り値</returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.CommandWrapper.StoredProcedureCommandWrapper.SetParameterValue(System.String,System.Object)">
	<summary>
 入力パラメータ値を設定する
 </summary>
	<param name="parameterName">パラメータ名</param>
	<param name="value">値</param>
	<remarks>
 ストアドのパラメータを設定するときのみ使用可能
 </remarks>
</member><member name="M:Moca.Db.CommandWrapper.StoredProcedureCommandWrapper.SetParameterValue(System.Int32,System.Object)">
	<summary>
 入力パラメータ値を設定する
 </summary>
	<param name="index">パラメータ位置</param>
	<param name="value">値</param>
	<remarks>
 ストアドのパラメータを設定するときのみ使用可能です。
 パラメータ位置の０番目は@RETURN_VALUEになる為、指定された位置に＋１する。
 </remarks>
</member><member name="M:Moca.Db.CommandWrapper.StoredProcedureCommandWrapper.AddParameterValue(System.Object)">
	<summary>
 入力パラメータ値の設定を追加する
 </summary>
	<param name="value"></param>
	<remarks></remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 指定されたパラメータが多すぎます。
 </exception>
</member><member name="M:Moca.Db.CommandWrapper.StoredProcedureCommandWrapper.getParameters">
	<summary>
 ストアド プロシージャからパラメータ情報を取得し、指定した SqlCommand オブジェクトの Parameters コレクションにパラメータを格納します。
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Db.CommandWrapper.StoredProcedureCommandWrapper.ExecuteNonQuery">
	<summary>
 更新系のストアドを実行！
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.CommandWrapper.StoredProcedureCommandWrapper.Execute">
	<summary>
 SQL実行！
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.CommandWrapper.StoredProcedureCommandWrapper.Execute``1">
	<summary>
 クエリを実行し、指定されたエンティティに変換して返します。
 </summary>
	<typeparam name="T">エンティティ</typeparam>
	<returns>エンティティのリスト</returns>
	<remarks>
 当メソッドは予めデータベースをオープンしておく必要がありますが、
 オープンされていないときは、自動でオープンして終了時にクローズします。<br/>
	</remarks>
</member><member name="M:Moca.Db.CommandWrapper.StoredProcedureCommandWrapper.ExecuteScalar">
	<summary>
 クエリを実行し、そのクエリが返す結果セットの最初の行にある最初の列を返します。余分な列または行は無視されます。
 </summary>
	<returns>結果セットの最初の行にある最初の列。</returns>
	<remarks>
 当メソッドは予めデータベースをオープンしておく必要がありますが、
 オープンされていないときは、自動でオープンして終了時にクローズします。<br/>
 詳細は、<seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/> を参照してください。
 </remarks>
</member><member name="T:Moca.Db.CommandWrapper.StoredProcedureCommandWrapper">
	<summary>
 StoredProcedureを実行する為のDBCommandのラッパークラス
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.Helper.SqlDbErrorNumbers.DuplicationPKey">
	<summary>重複エラーコード</summary>
</member><member name="F:Moca.Db.Helper.SqlDbErrorNumbers.LockTimeOut">
	<summary>タイムアウトエラーコード</summary>
	<remarks>
 接続時や排他ロック時のデッドロックでタイムアウトするとこのエラー<br/>
 接続エラー時は「タイムアウトに達しました。操作が完了する前にタイムアウト期間が過ぎたか、またはサーバーが応答していません。」となり、
 SQL実行時は「タイムアウトに達しました。操作が完了する前にタイムアウト期間が過ぎたか、またはサーバーが応答していません。 ステートメントは終了されました。」となる。<br/>
 
 ただし、デッドロック時は <see cref="P:System.Data.SqlClient.SqlException.Number"></see> が変わる可能性がある。<br/>
 lock_timeout が 0 以外の時は、-2 となり、0 のときは、タイムアウトせずに直ぐにエラーが発生し、1222 が返ってくる。<br/>
 1222は「ロック要求がタイムアウトしました。」
 </remarks>
</member><member name="F:Moca.Db.Helper.SqlDbErrorNumbers.LockTimeOut0">
	<summary>タイムアウトエラーコード</summary>
	<remarks>
 接続時や排他ロック時のデッドロックでタイムアウトするとこのエラー<br/>
 接続エラー時は「タイムアウトに達しました。操作が完了する前にタイムアウト期間が過ぎたか、またはサーバーが応答していません。」となり、
 SQL実行時は「タイムアウトに達しました。操作が完了する前にタイムアウト期間が過ぎたか、またはサーバーが応答していません。 ステートメントは終了されました。」となる。<br/>
 
 ただし、デッドロック時は <see cref="P:System.Data.SqlClient.SqlException.Number"></see> が変わる可能性がある。<br/>
 lock_timeout が 0 以外の時は、-2 となり、0 のときは、タイムアウトせずに直ぐにエラーが発生し、1222 が返ってくる。<br/>
 1222は「ロック要求がタイムアウトしました。」
 </remarks>
</member><member name="F:Moca.Db.Helper.SqlDbErrorNumbers.StatementEnd">
	<summary>
 ステートメントは終了されました。
 </summary>
	<remarks></remarks>
</member><member name="T:Moca.Db.Helper.SqlDbErrorNumbers">
	<summary>ＳＱＬエラーコード</summary>
</member><member name="F:Moca.Db.Helper.SqlDbAccessHelper.C_ERRORCODE">
	<summary>ＳＱＬエラーコード</summary>
</member><member name="F:Moca.Db.Helper.SqlDbAccessHelper._conn">
	<summary>ＳＱＬコネクション</summary>
</member><member name="M:Moca.Db.Helper.SqlDbAccessHelper.#ctor(Moca.Db.IDao)">
	<summary>
 コンストラクタ
 </summary>
	<param name="dba">使用するデータベースアクセス</param>
	<remarks></remarks>
</member><member name="M:Moca.Db.Helper.SqlDbAccessHelper.CDbParameterName(System.String)">
	<summary>
 SQLステータスのパラメータ名を変換する。
 </summary>
	<param name="name">パラメータ名</param>
	<returns></returns>
	<remarks>
 パラメータ名の先頭文字が「＠」でないときは「＠」を付加する。
 </remarks>
</member><member name="M:Moca.Db.Helper.SqlDbAccessHelper.ErrorCount(System.Exception)">
	<summary>
 エラーの件数を返す
 </summary>
	<param name="ex">エラー件数を取得したい例外</param>
	<returns>エラー件数</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.Helper.SqlDbAccessHelper.ErrorNumbers(System.Exception)">
	<summary>
 エラー番号を返す
 </summary>
	<param name="ex">エラー番号を取得したい例外</param>
	<returns>エラー番号配列</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.Helper.SqlDbAccessHelper.GetSchemaColumns(Moca.Db.DbInfoTable)">
	<summary>
 列情報を取得する
 </summary>
	<param name="table">取得対象となるテーブル情報のモデル</param>
	<returns>取得した列情報モデルのコレクション</returns>
	<remarks>
 列名の取得は「COLUMN_NAME」列となる。<br/>
 その他は下記を参照してください。<br/>
 http://msdn.microsoft.com/ja-jp/library/ms254969(VS.80).aspx <br/>
	</remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.Helper.SqlDbAccessHelper.GetSchemaFunctions">
	<summary>
 関数情報を取得する
 </summary>
	<returns></returns>
	<remarks></remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.Helper.SqlDbAccessHelper.GetSchemaProcedures">
	<summary>
 プロシージャ情報を取得する
 </summary>
	<returns></returns>
	<remarks></remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.Helper.SqlDbAccessHelper.GetSchemaTables">
	<summary>
 テーブル情報を取得する
 </summary>
	<returns></returns>
	<remarks></remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.Helper.SqlDbAccessHelper.GetSchemaTable(System.String)">
	<summary>
 テーブル情報を取得する
 </summary>
	<param name="tablename">テーブル名</param>
	<returns></returns>
	<remarks></remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.Helper.SqlDbAccessHelper.HasSqlNativeError(System.Exception,System.Int64)">
	<summary>
 指定されたエラー番号が発生した例外に存在するか返す
 </summary>
	<param name="ex">対象となる例外</param>
	<param name="errorNumber">エラー番号</param>
	<returns>True:存在する、False:存在しない</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.Helper.SqlDbAccessHelper.HasSqlNativeErrorDuplicationPKey(System.Exception)">
	<summary>
 重複エラーが発生した例外に存在するか返す
 </summary>
	<param name="ex">対象となる例外</param>
	<returns>True:存在する、False:存在しない</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.Helper.SqlDbAccessHelper.HasSqlNativeErrorTimtout(System.Exception)">
	<summary>
 タイムアウトエラーが発生した例外に存在するか返す
 </summary>
	<param name="ex">対象となる例外</param>
	<returns>True:存在する、False:存在しない</returns>
	<remarks>
	</remarks>
</member><member name="P:Moca.Db.Helper.SqlDbAccessHelper.PlaceholderMark">
	<summary>
 SQLプレースフォルダのマークを返す。
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.Helper.SqlDbAccessHelper.RefreshProcedureParameters(System.Data.IDbCommand)">
	<summary>
 プロシージャのパラメータ情報を取得する
 </summary>
	<param name="cmd"></param>
	<remarks></remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.Helper.SqlDbAccessHelper.getColumnMaxLength(System.Data.DataRow,System.Int32@,System.Int32@)">
	<summary>
 列の最大桁数を返す
 </summary>
	<param name="row">行データ</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.Helper.SqlDbAccessHelper.getColumnLength(System.Data.DataRow)">
	<summary>
 列の桁数を返します。
 </summary>
	<param name="row">行データ</param>
	<returns>テーブル又は列が存在しないときや、桁数の指定が不要な型の時は DBNull.Value を返します。</returns>
	<remarks>
 バイナリ データ、文字データ、またはテキスト/イメージ データの最大長 (文字単位)。
 それ以外の場合は、NULL が返されます。
 詳細については、『Microsoft SQL Server 2000 Transact-SQL プログラマーズリファレンス上』の「第 3 章 Transact-SQL のデータ型」を参照してください。
 </remarks>
</member><member name="M:Moca.Db.Helper.SqlDbAccessHelper.getColumnPrecision(System.Data.DataRow)">
	<summary>
 列の桁数を返します。
 </summary>
	<param name="row">行データ</param>
	<returns>テーブル又は列が存在しないときや、桁数の指定が不要な型の時は DBNull.Value を返します。</returns>
	<remarks>
 概数データ、真数データ、整数データ、または通貨データの有効桁数。それ以外の場合は、NULL が返されます。
 </remarks>
</member><member name="M:Moca.Db.Helper.SqlDbAccessHelper.getColumnScale(System.Data.DataRow)">
	<summary>
 列の桁数を返します。
 </summary>
	<param name="row">行データ</param>
	<returns>テーブル又は列が存在しないときや、桁数の指定が不要な型の時は DBNull.Value を返します。</returns>
	<remarks>
 概数データ、真数データ、整数データ、または通貨データの桁数。それ以外の場合は、NULL が返されます。
 </remarks>
</member><member name="M:Moca.Db.Helper.SqlDbAccessHelper.getColumnDbType``1(System.Data.DataRow)">
	<summary>
 列の型をかえします。
 </summary>
	<typeparam name="T">使用する型のDbTypeを指定する</typeparam>
	<param name="row">行データ</param>
	<returns>テーブル又は列が存在しないときは DBNull.Value を返します。</returns>
	<remarks>
 SQLServer は numeric は SqlDbType には存在しないから Decimal にマップします。
 </remarks>
</member><member name="M:Moca.Db.Helper.SqlDbAccessHelper.isUniCode(System.String)">
	<summary>
 型がUniCodeか判定
 </summary>
	<param name="typ"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.Helper.SqlDbAccessHelper">
	<summary>
 SqlClientを使用したDBアクセス
 </summary>
	<remarks>
 データベース接続にSqlClientを使用するときは、当クラスを使用します。
 </remarks>
</member><member name="F:Moca.Db.CommandWrapper.Select4UpdateCommandWrapper._adp">
	<summary>アダプタオブジェクト</summary>
</member><member name="M:Moca.Db.CommandWrapper.Select4UpdateCommandWrapper.#ctor(Moca.Db.IDao,System.Data.IDbCommand)">
	<summary>
 コンストラクタ
 </summary>
	<param name="dba">親となるDBAccessインスタンス</param>
	<param name="cmd">実行するDBCommandインスタンス</param>
	<remarks>
	</remarks>
</member><member name="P:Moca.Db.CommandWrapper.Select4UpdateCommandWrapper.Adapter">
	<summary>
 アダプタインスタンス
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.CommandWrapper.Select4UpdateCommandWrapper.Execute">
	<summary>
 Select SQL実行！
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.CommandWrapper.Select4UpdateCommandWrapper.Update">
	<summary>
 Adapter Update 実行！
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.CommandWrapper.Select4UpdateCommandWrapper">
	<summary>
 SELECT文を実行し、DataSetを使ってUPDATEする為のDBCommandのラッパークラス
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.OdbcSetting.C_DSN_SYS">
	<summary>データソースのシステムキー値</summary>
</member><member name="F:Moca.Db.OdbcSetting.C_DSN_USR">
	<summary>データソースのユーザーキー値</summary>
</member><member name="F:Moca.Db.OdbcSetting.C_DSN_REG_KEY">
	<summary>データソースのレジストリキー値</summary>
</member><member name="T:Moca.Db.OdbcSetting.RegistrationType">
	<summary>
 登録の種類
 </summary>
	<remarks></remarks>
</member><member name="T:Moca.Db.OdbcSetting.ProviderType">
	<summary>
 利用出来るプロバイダの種類
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.OdbcSetting._dsnRegist">
	<summary>登録の種類</summary>
</member><member name="F:Moca.Db.OdbcSetting._dbProvider">
	<summary>プロバイダの種類</summary>
</member><member name="F:Moca.Db.OdbcSetting._dsnName">
	<summary>プロバイダー名称</summary>
</member><member name="F:Moca.Db.OdbcSetting._dsnDescription">
	<summary>説明</summary>
</member><member name="F:Moca.Db.OdbcSetting._dbServer">
	<summary>サーバー名</summary>
</member><member name="F:Moca.Db.OdbcSetting._dbName">
	<summary>データベース名</summary>
</member><member name="F:Moca.Db.OdbcSetting._dbUser">
	<summary>データベース接続ユーザー</summary>
</member><member name="F:Moca.Db.OdbcSetting._dbUserPassword">
	<summary>データベース接続ユーザーパスワード</summary>
</member><member name="P:Moca.Db.OdbcSetting.Registration">
	<summary>
 登録の種類
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.OdbcSetting.RegistrationName">
	<summary>
 登録の種類
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.OdbcSetting.Provider">
	<summary>
 プロバイダー
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.OdbcSetting.ProviderName">
	<summary>
 プロバイダー名称
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.OdbcSetting.DSN">
	<summary>
 DSN
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.OdbcSetting.DsnDescription">
	<summary>
 説明
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.OdbcSetting.ServerName">
	<summary>
 サーバー名
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.OdbcSetting.DatabaseName">
	<summary>
 データベース名
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.OdbcSetting.UserName">
	<summary>
 データベース接続ユーザー
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.OdbcSetting.Password">
	<summary>
 データベース接続ユーザーパスワード
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.OdbcSetting.IsExisting(System.String)">
	<summary>
 設定が存在するか返す
 </summary>
	<param name="dsn"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.OdbcSetting.Add">
	<summary>
 追加する
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Db.OdbcSetting.Modify">
	<summary>
 修正する
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Db.OdbcSetting.execODBCconf">
	<summary>
 ODBC設定コマンド実行
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Db.OdbcSetting.makeCommandParam">
	<summary>
 ODBC設定コマンドのパラメータ文字列作成
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.OdbcSetting">
	<summary>
 ODBC設定の管理
 </summary>
	<remarks>
 ODBCデータソース設定の管理をします。
 </remarks>
</member><member name="P:Moca.Db.IDbAccess.Transaction">
	<summary>
 トランザクションオブジェクト
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Moca.Db.IDbAccess.TransactionScope">
	<summary>
 トランザクションスコープオブジェクト
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDbAccess.NewTransactionScope">
	<summary>
 トランザクションスコープを作成する
 </summary>
	<returns>トランザクションスコープ</returns>
	<remarks></remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.IDbAccess.TransactionComplete">
	<summary>
 トランザクションスコープを完了する
 </summary>
	<remarks></remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.IDbAccess.TransactionStart">
	<summary>
 トランザクションを開始する
 </summary>
	<remarks>
 トランザクションを使用する場合は事前にDBへの接続が必要な為、自動でDBとの接続を行います。<br/>
 通常は、<see cref="P:Moca.Db.IDbAccess.TransactionScope"/>を使用してください。
 </remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.IDbAccess.TransactionBinding(Moca.Db.IDbAccess)">
	<summary>
 他のDBAccessクラスとトランザクションを同じにする
 </summary>
	<param name="dba">同期するDbAccessインスタンス</param>
 通常は、<see cref="P:Moca.Db.IDbAccess.TransactionScope"/>を使用してください。
 <remarks>
 コネクションオブジェクトとトランザクションオブジェクトを指定されたDbAccessのオブジェクトで上書きします。
 </remarks>
</member><member name="M:Moca.Db.IDbAccess.TransactionEnd">
	<summary>
 トランザクションを終了する（コミット）
 </summary>
	<remarks>
 DBとの接続を切断します。
 通常は、<see cref="P:Moca.Db.IDbAccess.TransactionScope"/>を使用してください。
 </remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.IDbAccess.TransactionRollback">
	<summary>
 トランザクションをロールバックする
 </summary>
	<remarks>
 DBとの接続を切断します。
 通常は、<see cref="P:Moca.Db.IDbAccess.TransactionScope"/>を使用してください。
 </remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.IDbAccess.ExecuteNonQuery(Moca.Db.IDbCommandInsert)">
	<summary>
 INSERT文の実行
 </summary>
	<param name="commandWrapper">INSERT文を実行する為のDBCommandのラッパーインスタンス</param>
	<returns>更新件数</returns>
	<remarks>
 当メソッドを使用する場合は、トランザクションの開始<see cref="M:Moca.Db.DbAccess.TransactionStart"></see>、終了<see cref="M:Moca.Db.DbAccess.TransactionEnd"></see>を行ってください。
 </remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.IDbAccess.ExecuteNonQuery(Moca.Db.IDbCommandUpdate)">
	<summary>
 UPDATE文の実行
 </summary>
	<param name="commandWrapper">UPDATE文を実行する為のDBCommandのラッパーインスタンス</param>
	<returns>更新件数</returns>
	<remarks>
 当メソッドを使用する場合は、トランザクションの開始<see cref="M:Moca.Db.DbAccess.TransactionStart"></see>、終了<see cref="M:Moca.Db.DbAccess.TransactionEnd"></see>を行ってください。
 </remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.IDbAccess.ExecuteNonQuery(Moca.Db.IDbCommandDelete)">
	<summary>
 DELETE文の実行
 </summary>
	<param name="commandWrapper">DELETE文を実行する為のDBCommandのラッパーインスタンス</param>
	<returns>更新件数</returns>
	<remarks>
 当メソッドを使用する場合は、トランザクションの開始<see cref="M:Moca.Db.DbAccess.TransactionStart"></see>、終了<see cref="M:Moca.Db.DbAccess.TransactionEnd"></see>を行ってください。
 </remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.IDbAccess.ExecuteNonQuery(Moca.Db.IDbCommandStoredProcedure)">
	<summary>
 ストアドの実行
 </summary>
	<param name="commandWrapper">ストアドを実行する為のDBCommandのラッパーインスタンス</param>
	<returns>更新件数</returns>
	<remarks>
 当メソッドを使用する場合は、トランザクションの開始<see cref="M:Moca.Db.DbAccess.TransactionStart"></see>、終了<see cref="M:Moca.Db.DbAccess.TransactionEnd"></see>を行ってください。
 </remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.IDbAccess.ExecuteNonQuery(Moca.Db.IDbCommandDDL)">
	<summary>
 DDLの実行
 </summary>
	<param name="commandWrapper">DDLを実行する為のDBCommandのラッパーインスタンス</param>
	<returns>更新件数</returns>
	<remarks>
 当メソッドを使用する場合は、トランザクションの開始<see cref="M:Moca.Db.DbAccess.TransactionStart"></see>、終了<see cref="M:Moca.Db.DbAccess.TransactionEnd"></see>を行ってください。
 </remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.IDbAccess.ExecuteNonQuery(Moca.Db.IDbCommandSelect4Update)">
	<summary>
 データを更新
 </summary>
	<param name="commandWrapper">更新を実行する為のDBCommandのラッパーインスタンス</param>
	<returns></returns>
	<remarks></remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="T:Moca.Db.IDbAccess">
	<summary>
 DBへアクセスする為の基本的な機能を提供するインタフェース
 </summary>
	<remarks>
	</remarks>
</member><member name="F:Moca.Db.EntityBuilder._entityMap">
	<summary>一度解析したEntityを格納しておく</summary>
</member><member name="M:Moca.Db.EntityBuilder.CreateTable``2(System.String[])">
	<summary>
 DataTableのカラム構成を構築する
 </summary>
	<typeparam name="T"></typeparam>
	<typeparam name="Order"></typeparam>
	<param name="captions"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.EntityBuilder.Create``1(System.Data.DataTable)">
	<summary>
 引数の DataTable から指定されたタイプのデータ配列へ変換して返す。
 </summary>
	<typeparam name="T">変換先のタイプ</typeparam>
	<param name="tbl">変換元テーブルデータ</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.EntityBuilder.Create``1(System.Data.DataRow)">
	<summary>
 引数の DataRow から指定されたタイプのデータ配列へ変換して返す。
 </summary>
	<typeparam name="T">変換先のタイプ</typeparam>
	<param name="row">変換元行データ</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.EntityBuilder.Create``1(System.Data.DataRow,System.Data.DataRowVersion)">
	<summary>
	</summary>
	<typeparam name="T"></typeparam>
	<param name="row"></param>
	<param name="version">変換するデータのバージョン</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.EntityBuilder.Create``1(System.Data.IDataReader)">
	<summary>
	</summary>
	<typeparam name="T"></typeparam>
	<param name="reader"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.EntityBuilder.Convert(System.Object,System.Data.DataRow)">
	<summary>
 引数のエンティティから DataRow へ変換
 </summary>
	<param name="entity">変換元</param>
	<param name="row">変換先</param>
	<remarks></remarks>
</member><member name="M:Moca.Db.EntityBuilder.SetColumnInfo(System.Object)">
	<summary>
 引数のオブジェクト内にTable属性のフィールドが存在する場合は列情報を設定する
 </summary>
	<param name="obj">対象のインスタンス</param>
	<remarks></remarks>
</member><member name="M:Moca.Db.EntityBuilder._create``1(System.Collections.Hashtable,System.Data.DataRow,System.Object)">
	<summary>
 Entity をインスタンス化し、行データを Entity へ設定する
 </summary>
	<typeparam name="T"></typeparam>
	<param name="keys"></param>
	<param name="row"></param>
	<param name="version"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.EntityBuilder._create``1(System.Collections.Hashtable,System.Data.IDataReader,System.Object)">
	<summary>
	</summary>
	<typeparam name="T"></typeparam>
	<param name="keys"></param>
	<param name="reader"></param>
	<param name="version"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.EntityBuilder._create``1(System.Collections.Hashtable)">
	<summary>
 Entity をインスタンス化し、行データを Entity へ設定する
 </summary>
	<typeparam name="T"></typeparam>
	<param name="keys"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.EntityBuilder._getEntityInfo(System.Type)">
	<summary>
 Entity 情報を取得する
 </summary>
	<param name="typ"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.EntityBuilder">
	<summary>
 データベースから取得したデータの格納先となる Entity を作成する
 </summary>
	<remarks>
 一度解析したEntity情報は内部で保存します。<br/>
 2回目以降は解析せず保存した情報を元にします。
 </remarks>
</member><member name="M:Moca.Db.CommandWrapper.DeleteCommandWrapper.#ctor(Moca.Db.IDao,System.Data.IDbCommand)">
	<summary>
 コンストラクタ
 </summary>
	<param name="dba">親となるDBAccessインスタンス</param>
	<param name="cmd">実行するDBCommandインスタンス</param>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.CommandWrapper.DeleteCommandWrapper.Execute">
	<summary>
 SQL実行！
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.CommandWrapper.DeleteCommandWrapper">
	<summary>
 DELETE文を実行する為のDBCommandのラッパークラス
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Db.CommandWrapper.DDLCommandWrapper.#ctor(Moca.Db.IDao,System.Data.IDbCommand)">
	<summary>
 コンストラクタ
 </summary>
	<param name="dba">親となるDBAccessインスタンス</param>
	<param name="cmd">実行するDBCommandインスタンス</param>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.CommandWrapper.DDLCommandWrapper.Execute">
	<summary>
 SQL実行！
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.CommandWrapper.DDLCommandWrapper">
	<summary>
 DDL文を実行する為のDBCommandのラッパークラス
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.DbUtil.C_ORDER_BY">
	<summary>SQL のソート構文テンプレート</summary>
</member><member name="F:Moca.Db.DbUtil.C_ORDER_BY_COL">
	<summary>SQL のソート構文テンプレート</summary>
</member><member name="M:Moca.Db.DbUtil.CommandDispose(Moca.Db.IDbCommandSql)">
	<summary>
 DbCommandインスタンスを終了する
 </summary>
	<param name="cmd"></param>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbUtil.CNull(System.Object,System.Boolean)">
	<summary>
 Null変換
 </summary>
	<param name="Value">検証値</param>
	<returns>変換値</returns>
	<remarks>
 空の場合は、DBNull.Value を返します。
 文字列が空の場合は、DBNull.Value を返します。
 </remarks>
</member><member name="M:Moca.Db.DbUtil.CNull(System.Int32)">
	<summary>
 Null変換
 </summary>
	<param name="Value">検証値</param>
	<returns>変換値</returns>
	<remarks>
 空の場合は、DBNull.Value を返します。
 0の場合は、DBNull.Value を返します。
 </remarks>
</member><member name="M:Moca.Db.DbUtil.CDateValue(System.DateTime)">
	<summary>
 Null変換
 </summary>
	<param name="Value">検証値</param>
	<returns>変換値</returns>
	<remarks>
 初期値（Date.MinValue）の時は、Nothingを返す
 </remarks>
</member><member name="M:Moca.Db.DbUtil.CIntValue(System.Object)">
	<summary>
 DBから取得したデータがInteger値の場合の変換
 </summary>
	<param name="Value">対象値</param>
	<returns>変換値</returns>
	<remarks>
 Nullの場合は、０に変換する
 </remarks>
</member><member name="M:Moca.Db.DbUtil.CLngValue(System.Object)">
	<summary>
 DBから取得したデータがLong値の場合の変換
 </summary>
	<param name="Value">対象値</param>
	<returns>変換値</returns>
	<remarks>
 Nullの場合は、０に変換する
 </remarks>
</member><member name="M:Moca.Db.DbUtil.CSngValue(System.Object,System.Single)">
	<summary>
 DBから取得したデータがSingle値の場合の変換
 </summary>
	<param name="Value">対象値</param>
	<returns>変換値</returns>
	<remarks>
 Nullの場合は、０に変換する
 </remarks>
</member><member name="M:Moca.Db.DbUtil.CStrValue(System.Object,System.String)">
	<summary>
 DBから取得したデータがString値の場合の変換
 </summary>
	<param name="Value">対象値</param>
	<returns>変換値</returns>
	<remarks>
 Nullの場合は、String.Emptyに変換する
 </remarks>
</member><member name="M:Moca.Db.DbUtil.CStrTrimValue(System.Object)">
	<summary>
 DBから取得したデータがString値の場合の変換（Trimあり）
 </summary>
	<param name="Value">対象値</param>
	<returns>変換値</returns>
	<remarks>
 Nullの場合は、String.Emptyに変換する
 </remarks>
</member><member name="M:Moca.Db.DbUtil.CMoneyValue(System.Object)">
	<summary>
 DBから取得したデータが金額の場合の変換
 </summary>
	<param name="Value">対象値</param>
	<returns>変換値</returns>
	<remarks>
 Nullの場合は、String.Emptyに変換する。
 3桁のカンマ区切り文字列として返します。（"###,###,###,###"）
 </remarks>
</member><member name="M:Moca.Db.DbUtil.CMoneyValue(System.Object,System.String)">
	<summary>
 DBから取得したデータが金額の場合の変換
 </summary>
	<param name="Value">対象値</param>
	<param name="formatString"></param>
	<returns>変換値</returns>
	<remarks>
 Nullの場合は、String.Emptyに変換する。
 指定されたフォーマット文字列に変換して返します。
 </remarks>
</member><member name="M:Moca.Db.DbUtil.CDateValueToNoTimeString(System.Object)">
	<summary>
 DBから取得したデータがDate値の場合に日付のみの文字列へ変換
 </summary>
	<param name="Value">対象値</param>
	<returns>変換値</returns>
	<remarks>
 Nullの場合は、String.Emptyに変換する
 </remarks>
</member><member name="M:Moca.Db.DbUtil.CDateValueToYYYYMM(System.Object)">
	<summary>
 DBから取得したデータがDate値の場合に日付のみの文字列へ変換
 </summary>
	<param name="Value">対象値</param>
	<returns>変換値</returns>
	<remarks>
 Nullの場合は、String.Emptyに変換する
 </remarks>
</member><member name="M:Moca.Db.DbUtil.CIntValueToYYYYMM(System.Object)">
	<summary>
 DBから取得したデータがInteger値の場合に日付のみの文字列へ変換
 </summary>
	<param name="Value">対象値</param>
	<returns>変換値</returns>
	<remarks>
 Nullの場合は、String.Emptyに変換する
 </remarks>
</member><member name="M:Moca.Db.DbUtil.CFormat(System.Object,System.String)">
	<summary>
 DBから取得したデータを指定されたフォーマットに変換する
 </summary>
	<param name="Value">対象値</param>
	<param name="formatString">フォーマット文字列</param>
	<returns>変換値</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.DbUtil.CDictionary(System.Data.DataRowCollection,System.String,System.String)">
	<summary>
 キーと値を保持したコレクションを作成する
 </summary>
	<param name="rows">作成元となるデータ</param>
	<param name="keyColumnName">キーとするデータの列名</param>
	<param name="valueColumnName">キーに対して値とするデータの列名</param>
	<returns>コレクション</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.DbUtil.MakeSQLWhereLikeList(System.String@,System.String[]@,System.String@)">
	<summary>
 SQL文の条件式LIKEを複数作成します。
 </summary>
	<param name="columnName">列名</param>
	<param name="arr"></param>
	<param name="op"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:Moca.Db.DbUtil._entityBuilder">
	<summary>データベースから取得したデータの格納先となる Entity を作成する</summary>
</member><member name="M:Moca.Db.DbUtil.GetColumnNames(System.Type)">
	<summary>
 指定されたオブジェクトのプロパティ名及び、属性から列名を取得する
 </summary>
	<param name="typ">列名を取得したいモデルのタイプ</param>
	<returns>列名配列</returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbUtil.GetColumnNames(System.Object)">
	<summary>
 指定されたオブジェクトのプロパティ名及び、属性から列名を取得する
 </summary>
	<param name="target">列名を取得したいモデル</param>
	<returns>列名配列</returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbUtil.CreateTable``2(System.String[])">
	<summary>
 DataTableのカラム構成を構築する
 </summary>
	<typeparam name="T">エンティティとなるクラス</typeparam>
	<typeparam name="Order">項目の順序となる列挙型</typeparam>
	<param name="captions">列のキャプションとなる文字列配列</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbUtil.Create``1(System.Data.DataTable)">
	<summary>
 引数の DataTable から指定されたタイプのデータ配列へ変換して返す。
 </summary>
	<typeparam name="T">変換先のタイプ</typeparam>
	<param name="tbl">変換元テーブルデータ</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbUtil.Create``1(System.Data.DataRow)">
	<summary>
 引数の DataRow から指定されたタイプのデータ配列へ変換して返す。
 </summary>
	<typeparam name="T">変換先のタイプ</typeparam>
	<param name="row">変換元行データ</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbUtil.Create``1(System.Data.DataRow,System.Data.DataRowVersion)">
	<summary>
 引数の DataRow から指定されたタイプのデータ配列へ変換して返す。
 </summary>
	<typeparam name="T">変換先のタイプ</typeparam>
	<param name="row">変換元行データ</param>
	<param name="version">変換するデータのバージョン</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbUtil.SetColumnInfo(System.Object)">
	<summary>
 引数のオブジェクト内にTable属性のフィールドが存在する場合は列情報を設定する
 </summary>
	<param name="obj">対象のインスタンス</param>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbUtil.Convert(System.Object,System.Data.DataRow)">
	<summary>
 引数のエンティティから DataRow へ変換
 </summary>
	<param name="entity">変換元</param>
	<param name="row">変換先</param>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbUtil.GetOrderBy(System.String[])">
	<summary>
 SQL のソート部分で使用するカラムを作成
 </summary>
	<returns>SQL のソート文字列</returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbUtil.GetOrderByColumn(System.String,Moca.Db.SortDirectionValue)">
	<summary>
 SQL のソート部分で使用するカラムを作成
 </summary>
	<param name="sortExpression">ソート項目名</param>
	<param name="sortDirection">ソート順</param>
	<returns>SQL のソートに使用するカラム文字列</returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbUtil.ToStringParameter(System.Data.IDataParameterCollection)">
	<summary>
 DBパラメータをカンマで連結して文字列に変換する
 </summary>
	<param name="params">DBパラメータ</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbUtil.Replace2NullWithSinQt(System.Object)">
	<summary>
 Null変換(シングルクォーテーション付き)
 </summary>
	<param name="val"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.DbUtil">
	<summary>
 データベースアクセス周りで使用するユーティリティメソッド集
 </summary>
	<remarks></remarks>
</member><member name="T:Moca.Db.DbInfoTableCollection">
	<summary>
 テーブル情報モデルのコレクション
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.DbInfoTable._columns">
	<summary>列情報</summary>
</member><member name="M:Moca.Db.DbInfoTable.#ctor(System.String,System.String,System.String,System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="catalog">カタログ名</param>
	<param name="schema">スキーマ名</param>
	<param name="name">名称</param>
	<param name="typ">型</param>
	<remarks></remarks>
</member><member name="P:Moca.Db.DbInfoTable.Columns">
	<summary>
 列情報
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.DbInfoTable.ToTableName">
	<summary>
 テーブル名のみ返す
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.DbInfoTable">
	<summary>
 テーブル情報のモデル
 </summary>
	<remarks></remarks>
</member><member name="T:Moca.Db.DbInfoProcedureCollection">
	<summary>
 ストアドプロシージャ情報モデルのコレクション
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.DbInfoProcedure._src">
	<summary>ソース</summary>
</member><member name="M:Moca.Db.DbInfoProcedure.#ctor(System.String,System.String,System.String,System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="catalog">カタログ名</param>
	<param name="schema">スキーマ名</param>
	<param name="name">名称</param>
	<param name="typ">型</param>
	<remarks></remarks>
</member><member name="P:Moca.Db.DbInfoProcedure.Src">
	<summary>
 ソースプロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.DbInfoProcedure">
	<summary>
 ストアドプロシージャ情報のモデル
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.DbInfo._catalog">
	<summary>カタログ名称</summary>
</member><member name="F:Moca.Db.DbInfo._schema">
	<summary>スキーマ名</summary>
</member><member name="F:Moca.Db.DbInfo._name">
	<summary>名称</summary>
</member><member name="F:Moca.Db.DbInfo._typ">
	<summary>型</summary>
</member><member name="M:Moca.Db.DbInfo.#ctor(System.String,System.String,System.String,System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="catalog">カタログ名</param>
	<param name="schema">スキーマ名</param>
	<param name="name">名称</param>
	<param name="typ">型</param>
	<remarks></remarks>
</member><member name="P:Moca.Db.DbInfo.Catalog">
	<summary>
 カタログ名称プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.DbInfo.Schema">
	<summary>
 スキーマ名プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.DbInfo.Name">
	<summary>
 名称プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.DbInfo.Typ">
	<summary>
 型プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbInfo.ToString">
	<summary>
 ToString の上書き処理
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.DbInfo">
	<summary>
 データベース情報の共通モデル
 </summary>
	<remarks></remarks>
</member><member name="T:Moca.Db.DbInfoFunctionCollection">
	<summary>
 ストアドプロシージャ情報モデルのコレクション
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.DbInfoFunction._src">
	<summary>ソース</summary>
</member><member name="M:Moca.Db.DbInfoFunction.#ctor(System.String,System.String,System.String,System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="catalog">カタログ名</param>
	<param name="schema">スキーマ名</param>
	<param name="name">名称</param>
	<param name="typ">型</param>
	<remarks></remarks>
</member><member name="P:Moca.Db.DbInfoFunction.Src">
	<summary>
 ソースプロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.DbInfoFunction">
	<summary>
 関数情報のモデル
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.Helper.DbAccessHelper.targetDba">
	<summary>元となるデータベースアクセスクラスインスタンス</summary>
</member><member name="F:Moca.Db.Helper.DbAccessHelper.myDba">
	<summary>当クラスで使用するデータベースアクセスクラスインスタンス</summary>
</member><member name="M:Moca.Db.Helper.DbAccessHelper.#ctor(Moca.Db.IDao)">
	<summary>
 コンストラクタ
 </summary>
	<param name="dba">使用するデータベースアクセス</param>
	<remarks></remarks>
</member><member name="T:Moca.Db.Helper.DbAccessHelper">
	<summary>
 DBアクセスの各プロパイダーに対応したヘルパーの抽象クラス
 </summary>
	<remarks>
 各DBベンダー毎に異なる部分を吸収する為のクラスです。<br/>
	</remarks>
</member><member name="F:Moca.Db.DbAccessException.useDBAccess">
	<summary>使用しているDBAccessインスタンス</summary>
</member><member name="M:Moca.Db.DbAccessException.#ctor(Moca.Db.IDao,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 コンストラクタ
 </summary>
	<param name="useDBAccess">使用しているDBAccessインスタンス</param>
	<param name="Message">エラーメッセージ</param>
	<remarks>
	</remarks>
 -----------------------------------------------------------------------------

</member><member name="M:Moca.Db.DbAccessException.#ctor(Moca.Db.IDao,System.Exception)">
 -----------------------------------------------------------------------------
 <summary>
 コンストラクタ
 </summary>
	<param name="useDBAccess">使用しているDBAccessインスタンス</param>
	<param name="ex">例外インスタンス</param>
	<remarks>
	</remarks>
 -----------------------------------------------------------------------------

</member><member name="M:Moca.Db.DbAccessException.#ctor(Moca.Db.IDbAccess,System.Exception,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 コンストラクタ
 </summary>
	<param name="useDBAccess">使用しているDBAccessインスタンス</param>
	<param name="ex">例外インスタンス</param>
	<param name="Message">エラーメッセージ</param>
	<remarks>
	</remarks>
 -----------------------------------------------------------------------------

</member><member name="M:Moca.Db.DbAccessException.GetErrors">
	<summary>
 エラー番号たち
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbAccessException.HasSqlNativeErrorDuplicationPKey">
	<summary>
 重複エラーが発生した例外に存在するか返す
 </summary>
	<returns>True:存在する、False:存在しない</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.DbAccessException.HasSqlNativeErrorTimtout">
	<summary>
 タイムアウトエラーが発生した例外に存在するか返す
 </summary>
	<returns>True:存在する、False:存在しない</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.DbAccessException.HasSqlNativeError(System.Int64)">
	<summary>
 指定されたエラー番号が発生した例外に存在するか返す
 </summary>
	<param name="errorNumber">エラー番号</param>
	<returns>True:存在する、False:存在しない</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.DbAccessException.hasSqlNativeError(System.Exception,System.Int64)">
	<summary>
 指定されたエラー番号が発生した例外に存在するか返す
 </summary>
	<param name="ex">例外</param>
	<param name="errorNumber">エラー番号</param>
	<returns>True:存在する、False:存在しない</returns>
	<remarks>
	</remarks>
</member><member name="T:Moca.Db.DbAccessException">
	<summary>
 データベースアクセス関係の例外
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.DbAccess._tx">
	<summary>トランザクションオブジェクト</summary>
</member><member name="F:Moca.Db.DbAccess._txs">
	<summary>トランザクションスコープオブジェクト</summary>
</member><member name="F:Moca.Db.DbAccess._mylog">
	<summary>log4net logger</summary>
</member><member name="M:Moca.Db.DbAccess.#ctor">
	<summary>
 デフォルトコンストラクタ
 </summary>
	<remarks>
 外部からは利用不可
 </remarks>
</member><member name="M:Moca.Db.DbAccess.#ctor(Moca.Db.Dbms)">
	<summary>
 コンストラクタ
 </summary>
	<param name="myDbms">接続先のDBMS</param>
	<remarks></remarks>
</member><member name="P:Moca.Db.DbAccess.TransactionScope">
	<summary>
 トランザクションスコープオブジェクト
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Moca.Db.DbAccess.Transaction">
	<summary>
 トランザクションオブジェクト
 </summary>
	<value></value>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.DbAccess.NewTransactionScope">
	<summary>
 トランザクションスコープを作成する
 </summary>
	<returns>トランザクションスコープ</returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbAccess.TransactionComplete">
	<summary>
 トランザクションスコープを完了する
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbAccess.TransactionStart">
	<summary>
 トランザクションを開始する
 </summary>
	<remarks>
 トランザクションを使用する場合は事前にDBへの接続が必要な為、自動でDBとの接続を行います。
 </remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.DbAccess.TransactionBinding(Moca.Db.IDbAccess)">
	<summary>
 他のDBAccessクラスとトランザクションを同じにする
 </summary>
	<param name="dba">同期するDbAccessインスタンス</param>
	<remarks>
 コネクションオブジェクトとトランザクションオブジェクトを指定されたDbAccessのオブジェクトで上書きします。
 </remarks>
</member><member name="M:Moca.Db.DbAccess.TransactionEnd">
	<summary>
 トランザクションを終了する（コミット）
 </summary>
	<remarks>
 DBとの接続を切断します。
 </remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.DbAccess.TransactionRollback">
	<summary>
 トランザクションをロールバックする
 </summary>
	<remarks>
 DBとの接続を切断します。
 </remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.DbAccess.createCommandWrapper(Moca.Db.SQLCommandTypes,System.String,System.Data.IDbConnection)">
	<summary>
 指定されたタイプのDbCommandインスタンスを生成する
 </summary>
	<param name="sqlCommandType">コマンド種別</param>
	<param name="commandText">実行するSQL文又は、ストアド名</param>
	<param name="useConn">使用するコネクション</param>
	<returns>指定されたタイプのインスタンス</returns>
	<remarks>
 コマンド種別に該当するISqlCommandのインスタンスを生成します。<br/>
		<list>
			<item><term>SelectText</term><description>ISelectCommand</description></item>
			<item><term>Select4Update</term><description>ISelect4UpdateCommand</description></item>
			<item><term>UpdateText</term><description>IUpdateCommand</description></item>
			<item><term>InsertText</term><description>IInsertCommand</description></item>
			<item><term>DeleteText</term><description>IDeleteCommand</description></item>
			<item><term>StoredProcedure</term><description>IStoredProcedureCommand</description></item>
			<item><term>DDL</term><description>IDDLCommand</description></item>
		</list>
	</remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.DbAccess.ExecuteNonQuery(Moca.Db.IDbCommandInsert)">
	<summary>
 INSERT文の実行
 </summary>
	<param name="commandWrapper">INSERT文を実行する為のDBCommandのラッパーインスタンス</param>
	<returns>更新件数</returns>
	<remarks>
 当メソッドを使用する場合は、トランザクションの開始<see cref="M:Moca.Db.DbAccess.TransactionStart"></see>、終了<see cref="M:Moca.Db.DbAccess.TransactionEnd"></see>を行ってください。
 </remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.DbAccess.ExecuteNonQuery(Moca.Db.IDbCommandUpdate)">
	<summary>
 UPDATE文の実行
 </summary>
	<param name="commandWrapper">UPDATE文を実行する為のDBCommandのラッパーインスタンス</param>
	<returns>更新件数</returns>
	<remarks>
 当メソッドを使用する場合は、トランザクションの開始<see cref="M:Moca.Db.DbAccess.TransactionStart"></see>、終了<see cref="M:Moca.Db.DbAccess.TransactionEnd"></see>を行ってください。
 </remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.DbAccess.ExecuteNonQuery(Moca.Db.IDbCommandDelete)">
	<summary>
 DELETE文の実行
 </summary>
	<param name="commandWrapper">DELETE文を実行する為のDBCommandのラッパーインスタンス</param>
	<returns>更新件数</returns>
	<remarks>
 当メソッドを使用する場合は、トランザクションの開始<see cref="M:Moca.Db.DbAccess.TransactionStart"></see>、終了<see cref="M:Moca.Db.DbAccess.TransactionEnd"></see>を行ってください。
 </remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.DbAccess.ExecuteNonQuery(Moca.Db.IDbCommandStoredProcedure)">
	<summary>
 ストアドの実行
 </summary>
	<param name="commandWrapper">ストアドを実行する為のDBCommandのラッパーインスタンス</param>
	<returns>更新件数</returns>
	<remarks>
 当メソッドを使用する場合は、トランザクションの開始<see cref="M:Moca.Db.DbAccess.TransactionStart"></see>、終了<see cref="M:Moca.Db.DbAccess.TransactionEnd"></see>を行ってください。
 </remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.DbAccess.ExecuteNonQuery(Moca.Db.IDbCommandDDL)">
	<summary>
 DDLの実行
 </summary>
	<param name="commandWrapper">DDLを実行する為のDBCommandのラッパーインスタンス</param>
	<returns>更新件数</returns>
	<remarks>
 当メソッドを使用する場合は、トランザクションの開始<see cref="M:Moca.Db.DbAccess.TransactionStart"></see>、終了<see cref="M:Moca.Db.DbAccess.TransactionEnd"></see>を行ってください。
 </remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.DbAccess.ExecuteNonQuery(Moca.Db.IDbCommandSelect4Update)">
	<summary>
 データを更新
 </summary>
	<param name="commandWrapper">更新を実行する為のDBCommandのラッパーインスタンス</param>
	<returns></returns>
	<remarks></remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="T:Moca.Db.DbAccess">
	<summary>
 DBへアクセスする為の基本的な機能を提供する
 </summary>
	<remarks>
	</remarks>
</member><member name="F:Moca.Db.DbSetting._config">
	<summary>特定のコンピュータ、アプリケーション、またはリソースに適用できる構成ファイル</summary>
</member><member name="F:Moca.Db.DbSetting._name">
	<summary>接続文字列の名称</summary>
</member><member name="F:Moca.Db.DbSetting._providerName">
	<summary>プロパイダクラス名</summary>
</member><member name="F:Moca.Db.DbSetting._server">
	<summary>サーバー名</summary>
</member><member name="F:Moca.Db.DbSetting._database">
	<summary>データベース名</summary>
</member><member name="F:Moca.Db.DbSetting._user">
	<summary>接続ユーザー名</summary>
</member><member name="F:Moca.Db.DbSetting._password">
	<summary>接続ユーザーのパスワード</summary>
</member><member name="F:Moca.Db.DbSetting._oleDbProviderName">
	<summary>OleDbプロパイダクラス名</summary>
</member><member name="F:Moca.Db.DbSetting._currentName">
	<summary>接続文字列の名称（カレント保存用）</summary>
</member><member name="M:Moca.Db.DbSetting.#ctor">
	<summary>
 デフォルトコンストラクタ
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbSetting.#ctor(System.Configuration.ConnectionStringSettings)">
	<summary>
 コンストラクタ
 </summary>
	<param name="setting">構成ファイルの接続文字列セクション内の名前付きで単一の接続文字列を表すクラス</param>
	<remarks></remarks>
</member><member name="P:Moca.Db.DbSetting.Config">
	<summary>
 構成ファイルプロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.DbSetting.Name">
	<summary>
 接続文字列の名称プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.DbSetting.ProviderName">
	<summary>
 プロパイダクラス名プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.DbSetting.Server">
	<summary>
 サーバー名プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.DbSetting.Database">
	<summary>
 データベース名プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.DbSetting.User">
	<summary>
 接続ユーザー名プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.DbSetting.Password">
	<summary>
 接続ユーザーのパスワードプロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.DbSetting.OleDbProviderName">
	<summary>
 OleDb接続時のプロバイダー
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbSetting.GetSection(System.String)">
	<summary>
 構成ファイルの接続文字列セクションを返します。
 </summary>
	<param name="name">ConnectionStringSettings</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbSetting.AddSection">
	<summary>
 構成ファイルへ接続文字列セクションを追加します。
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbSetting.ModSection">
	<summary>
 構成ファイルの接続文字列セクションを変更します。
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbSetting.DelSection(System.String)">
	<summary>
 構成ファイルの接続文字列セクションを削除します。
 </summary>
	<param name="name">セクション名称</param>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbSetting.Read(System.String)">
	<summary>
 接続文字列セクションを
 </summary>
	<param name="name">セクション名称</param>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbSetting.Save">
	<summary>
 構成ファイルを保存します。
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbSetting.SaveDPAPI">
	<summary>
 構成ファイルを暗号化して保存します。
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbSetting.moveValues(System.Configuration.ConnectionStringSettings)">
	<summary>
 設定内容を退避します。
 </summary>
	<param name="setting"></param>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbSetting.getSection">
	<summary>
 接続文字列セクションを返します。
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbSetting.cnvSetting">
	<summary>
 内部で保持しているデータをConnectionStringSettingsへ変換する。
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.DbSetting">
	<summary>
 構成ファイルの接続文字列セクション又はDB接続文字列を管理します。
 </summary>
	<remarks>
 特定のコンピュータ、アプリケーション、またはリソースに適用できる構成ファイルへDB接続文字列を保存したり、読込んだりします。
 </remarks>
</member><member name="T:Moca.Db.DbInfoColumnCollection">
	<summary>
 列情報モデルのコレクション
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.DbInfoColumn._maxLength">
	<summary>最大桁数</summary>
</member><member name="M:Moca.Db.DbInfoColumn.#ctor(System.String,System.String,System.String,System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="catalog">カタログ名</param>
	<param name="schema">スキーマ名</param>
	<param name="name">名称</param>
	<param name="typ">型</param>
	<remarks></remarks>
</member><member name="P:Moca.Db.DbInfoColumn.MaxLength">
	<summary>最大桁数</summary>
</member><member name="P:Moca.Db.DbInfoColumn.UniCode">
	<summary>ユニコード文字列かどうか</summary>
</member><member name="P:Moca.Db.DbInfoColumn.MaxLengthB">
	<summary>最大桁数（半角 1 バイト、全角 2 バイトとして）</summary>
</member><member name="P:Moca.Db.DbInfoColumn.Precision">
	<summary>小数点の右側および左側にある保存できる最大文字</summary>
</member><member name="P:Moca.Db.DbInfoColumn.Scale">
	<summary>小数点の右側にある保存できる最大文字</summary>
</member><member name="P:Moca.Db.DbInfoColumn.ColumnType">
	<summary>列の型オブジェクト</summary>
</member><member name="T:Moca.Db.DbInfoColumn">
	<summary>
 列情報のモデル
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.Attr.ColumnIgnoreAttribute._ignore">
	<summary>使用有無</summary>
</member><member name="M:Moca.Db.Attr.ColumnIgnoreAttribute.#ctor(System.Boolean)">
	<summary>
 コンストラクタ
 </summary>
	<param name="ignore">使用するときは True、使用しないときは False</param>
	<remarks></remarks>
</member><member name="P:Moca.Db.Attr.ColumnIgnoreAttribute.Ignore">
	<summary>
 使用有無プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.Attr.ColumnIgnoreAttribute">
	<summary>
 未使用属性
 </summary>
	<remarks>
 列として使用しないときに指定する。<br/>
 指定されていないときは、「使用する」となる。
 </remarks>
</member><member name="F:Moca.Db.Attr.ColumnAttribute._columnName">
	<summary>カラム名</summary>
</member><member name="M:Moca.Db.Attr.ColumnAttribute.#ctor(System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="columnName">列名</param>
	<remarks></remarks>
</member><member name="P:Moca.Db.Attr.ColumnAttribute.ColumnName">
	<summary>
 列名プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.Attr.ColumnAttribute">
	<summary>
 列名属性
 </summary>
	<remarks>
 列名がプロパティ名とは異なるときに指定する。
 </remarks>
</member><member name="F:Moca.Serialization.DataSerializer.dataFilename">
	<summary>対象となるXMLファイルパス</summary>
</member><member name="F:Moca.Serialization.DataSerializer.schemaFilename">
	<summary>対象となるXMLファイルのXSDスキーマファイルパス</summary>
</member><member name="P:Moca.Serialization.DataSerializer.XmlFilename">
	<summary>
 対象となるXMLファイルパスプロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Serialization.DataSerializer.XsdFilename">
	<summary>
 対象となるXMLファイルのXSDスキーマファイルパスプロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Serialization.DataSerializer.Deserialize``1">
	<summary>
 XMLファイルを逆シリアル化します
 </summary>
	<typeparam name="T">シリアライズ対象のタイプ</typeparam>
	<returns></returns>
	<remarks>
 既定の名前空間とスキーマ検証は無しで逆シリアル化する。
 </remarks>
</member><member name="M:Moca.Serialization.DataSerializer.Deserialize``1(System.String)">
	<summary>
 XMLファイルを逆シリアル化します
 </summary>
	<typeparam name="T">シリアライズ対象のタイプ</typeparam>
	<param name="defaultNamespace">既定の名前空間</param>
	<returns>逆シリアライズされたオブジェクトのインスタンス</returns>
	<remarks>
 XsdFilename プロパティにて XMLスキーマファイル（XSD）が指定されているときは、スキーマ検証を実施します。<br/>
 スキーマ検証は無しで逆シリアル化する。
 </remarks>
	<exception cref="T:System.ArgumentNullException">XmlFilename プロパティが指定されていないとき</exception>
	<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">XMLスキーマ検証でエラーがあったとき</exception>
</member><member name="M:Moca.Serialization.DataSerializer.Deserialize``1(System.String,System.Boolean)">
	<summary>
 XMLファイルを逆シリアル化します
 </summary>
	<typeparam name="T">シリアライズ対象のタイプ</typeparam>
	<param name="defaultNamespace">既定の名前空間</param>
	<param name="varidate">スキーマ検証の有無</param>
	<returns>逆シリアライズされたオブジェクトのインスタンス</returns>
	<remarks>
 XsdFilename プロパティにて XMLスキーマファイル（XSD）が指定されているときは、スキーマ検証を実施します。<br/>
	</remarks>
	<exception cref="T:System.ArgumentNullException">XmlFilename プロパティが指定されていないとき</exception>
	<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">XMLスキーマ検証でエラーがあったとき</exception>
</member><member name="M:Moca.Serialization.DataSerializer.VaridateSchema">
	<summary>
 XMLファイルのスキーマ検証をします
 </summary>
	<remarks></remarks>
	<exception cref="T:System.ArgumentNullException">XsdFilename プロパティが指定されていないとき</exception>
	<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">XMLスキーマ検証でエラーがあったとき</exception>
</member><member name="M:Moca.Serialization.DataSerializer.Serialize``1">
	<summary>
 XMLファイルへシリアル化します
 </summary>
	<typeparam name="T">シリアライズ対象のタイプ</typeparam>
	<remarks></remarks>
</member><member name="M:Moca.Serialization.DataSerializer.Serialize``1(System.String)">
	<summary>
 XMLファイルへシリアル化します
 </summary>
	<typeparam name="T">シリアライズ対象のタイプ</typeparam>
	<param name="defaultNamespace">既定の名前空間</param>
	<remarks></remarks>
	<exception cref="T:System.ArgumentNullException">XmlFilename プロパティが指定されていないとき</exception>
</member><member name="T:Moca.Serialization.DataSerializer">
	<summary>
 オブジェクトをXMLファイルにシリアル化又は逆シリアル化するための抽象クラス
 </summary>
	<remarks></remarks>
</member><member name="P:Moca.Net.FtpClient.Server">
	<summary>FTPサーバー名</summary>
</member><member name="P:Moca.Net.FtpClient.UserName">
	<summary>接続ユーザー名</summary>
</member><member name="P:Moca.Net.FtpClient.Password">
	<summary>接続ユーザーのパスワード</summary>
</member><member name="P:Moca.Net.FtpClient.KeepAlive">
	<summary>接続維持の有無</summary>
	<remarks>デフォルトは維持しない</remarks>
</member><member name="P:Moca.Net.FtpClient.UseBinary">
	<summary>転送モード</summary>
	<remarks>デフォルトはASCIIモード</remarks>
</member><member name="P:Moca.Net.FtpClient.UsePassive">
	<summary>PASVモード</summary>
	<remarks>デフォルトはPASVモードではない</remarks>
</member><member name="P:Moca.Net.FtpClient.RequestTimeout">
	<summary>タイムアウト時間</summary>
	<remarks>デフォルトは１０</remarks>
</member><member name="M:Moca.Net.FtpClient.#ctor">
	<summary>
 デフォルトコンストラクタ
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Net.FtpClient.UploadFile(System.String,System.String,System.String)">
	<summary>
 アップロード
 </summary>
	<param name="localFileName">ローカルファイルフルパス</param>
	<param name="serverDir">サーバー上のディレクトリ</param>
	<param name="filename">サーバー上のファイル名</param>
	<returns><see cref="T:System.Net.FtpWebResponse"></see></returns>
	<remarks></remarks>
</member><member name="T:Moca.Net.FtpClient">
	<summary>
 FTPクライアント
 </summary>
	<remarks>
		<see cref="T:System.Net.FtpWebRequest"/>を使ってFTP操作します。
 </remarks>
</member><member name="F:Moca.Interceptor.FieldSetterInterceptor._mylog">
	<summary>log4net logger</summary>
</member><member name="T:Moca.Interceptor.FieldSetterInterceptor">
	<summary>
 フィールドの Setter メソッドインターセプター
 </summary>
	<remarks>
 AOPにてインスタンスが定義を違うインスタンスになってしまったとき、
 フィールドが存在しない状態となり、フィールドへインスタンスを設定するときにエラーとなる。
 これを回避するためにこいつを使う。
 </remarks>
</member><member name="F:Moca.Interceptor.FieldGetterInterceptor._mylog">
	<summary>log4net logger</summary>
</member><member name="T:Moca.Interceptor.FieldGetterInterceptor">
	<summary>
 フィールドの Getter メソッドインターセプター
 </summary>
	<remarks>
 AOPにてインスタンスが定義を違うインスタンスになってしまったとき、
 フィールドが存在しない状態となり、フィールドへインスタンスを取得するときにエラーとなる。
 これを回避するためにこいつを使う。
 </remarks>
</member><member name="M:Moca.Exceptions.MocaRuntimeException.#ctor(System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="Message">エラーメッセージ</param>
	<remarks>
	</remarks>
</member><member name="M:Moca.Exceptions.MocaRuntimeException.#ctor(System.Exception)">
	<summary>
 コンストラクタ
 </summary>
	<param name="ex">例外インスタンス</param>
	<remarks>
	</remarks>
</member><member name="M:Moca.Exceptions.MocaRuntimeException.#ctor(System.Exception,System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="ex">例外インスタンス</param>
	<param name="Message">エラーメッセージ</param>
	<remarks>
	</remarks>
</member><member name="T:Moca.Exceptions.MocaRuntimeException">
	<summary>
 当ライブラリの実行時例外の基本クラス
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Di.MocaContainerFactory._instance">
	<summary>シングルトン用コンテナインスタンス</summary>
</member><member name="M:Moca.Di.MocaContainerFactory.Init">
	<summary>
 初期化処理
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Di.MocaContainerFactory.Destroy">
	<summary>
 コンポーネントの消去
 </summary>
	<remarks></remarks>
</member><member name="P:Moca.Di.MocaContainerFactory.Container">
	<summary>
 デフォルトのコンテナインスタンス作成
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Di.MocaContainerFactory">
	<summary>
 コンテナのファクトリクラス
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Exceptions.CommonException._baseException">
	<summary>元になる例外</summary>
</member><member name="F:Moca.Exceptions.CommonException.myMessage">
	<summary>エラーメッセージ</summary>
</member><member name="F:Moca.Exceptions.CommonException.myStatckTrace">
	<summary>不要かどうか検証中</summary>
</member><member name="M:Moca.Exceptions.CommonException.#ctor(System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="Message">エラーメッセージ</param>
	<remarks>
	</remarks>
</member><member name="M:Moca.Exceptions.CommonException.#ctor(System.Exception)">
	<summary>
 コンストラクタ
 </summary>
	<param name="ex">例外インスタンス</param>
	<remarks>
	</remarks>
</member><member name="M:Moca.Exceptions.CommonException.#ctor(System.Exception,System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="ex">例外インスタンス</param>
	<param name="Message">エラーメッセージ</param>
	<remarks>
	</remarks>
</member><member name="P:Moca.Exceptions.CommonException.Message">
	<summary>
 メッセージ
 </summary>
	<value>当システム用のメッセージに元の例外のメッセージを付加したメッセージ</value>
	<remarks>
 フォーマットは下記のとおり
 当システム用メッセージ（元の例外メッセージ）
 </remarks>
</member><member name="P:Moca.Exceptions.CommonException.StackTrace">
	<summary>
 スタックトレース
 </summary>
	<value></value>
	<remarks>
	</remarks>
</member><member name="P:Moca.Exceptions.CommonException.BaseException">
	<summary>元になる例外</summary>
</member><member name="P:Moca.Exceptions.CommonException.NewMessage">
	<summary>
 エラーメッセージメッセージ
 </summary>
	<value>当システム用に設定したメッセージ</value>
	<remarks>
	</remarks>
</member><member name="P:Moca.Exceptions.CommonException.OrignalMessage">
	<summary>
 オリジナル例外のメッセージ
 </summary>
	<value>オリジナル例外のメッセージ内容</value>
	<remarks>
	</remarks>
</member><member name="M:Moca.Exceptions.CommonException.SaveStackTraceToRemoteStackTraceString(System.Exception)">
	<summary>
 StackTraceを保存する
 </summary>
	<param name="ex">発生した例外</param>
	<remarks>
		<see cref="T:System.Exception"/>の private field である _remoteStackTraceString に InnerException の StackTrace を保存する。
 </remarks>
</member><member name="T:Moca.Exceptions.CommonException">
	<summary>
 カスタム共通例外クラス
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Di.MocaInjector._analyzer">
	<summary>属性解析</summary>
</member><member name="F:Moca.Di.MocaInjector._mylog">
	<summary>Logging For Log4net</summary>
</member><member name="M:Moca.Di.MocaInjector.#ctor">
	<summary>
 デフォルトコンストラクタ
 </summary>
	<remarks></remarks>
</member><member name="P:Moca.Di.MocaInjector.Analyzer">
	<summary>
 属性解析プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Di.MocaInjector.Create(System.Type)">
	<summary>
 依存性の注入してインスタンスを生成する
 </summary>
	<param name="target"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Di.MocaInjector.Inject(System.Object)">
	<summary>
 依存性の注入
 </summary>
	<param name="target"></param>
	<remarks>
 指定されたインスタンスのフィールドで Interface のみに対応しています。
 </remarks>
</member><member name="M:Moca.Di.MocaInjector.DaoDispose(System.Object)">
	<summary>
 DAO インスタンスの開放
 </summary>
	<param name="target"></param>
	<remarks>
	</remarks>
</member><member name="M:Moca.Di.MocaInjector.fieldInject(System.Object,System.Reflection.FieldInfo,Moca.Di.MocaComponent)">
	<summary>
 フィールドへインスタンスの注入
 </summary>
	<param name="target">対象となるオブジェクト</param>
	<param name="field">対象となるフィールド</param>
	<param name="component">対象となるコンポーネント</param>
	<returns>生成したインスタンス</returns>
	<remarks></remarks>
</member><member name="T:Moca.Di.MocaInjector">
	<summary>
 依存性の注入
 </summary>
	<remarks>
 インタフェースの属性に指定された実態クラスをインスタンス化しフィールドへ注入する。<br/>
 実装クラスの指定は、<see cref="T:Moca.Attr.ImplementationAttribute"/> 属性を使用して指定します。<br/>
 引数で指定されたインスタンスのフィールドに対して、この属性を指定されたインタフェースが存在したときは、
 自動でインスタンス化してフィールドに注入します。<br/>
 よって、これらのフィールドはインスタンス化（<c>New</c>）する必要はありません。<br/>
 ※インスタンス化するなら <see cref="T:Moca.Attr.ImplementationAttribute"/> 属性は指定しないでください。<br/>
	</remarks>
</member><member name="F:Moca.Di.MocaContainer._components">
	<summary>コンポーネント格納</summary>
</member><member name="F:Moca.Di.MocaContainer._rwLock">
	<summary>ロック用</summary>
</member><member name="M:Moca.Di.MocaContainer.#ctor">
	<summary>
 デフォルトコンストラクタ
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Di.MocaContainer.Init">
	<summary>
 初期化処理
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Di.MocaContainer.GetComponent(System.Type)">
	<summary>
 格納しているコンポーネントを返す。
 </summary>
	<param name="componentType">取得する型</param>
	<returns>該当するコンポーネント。該当しないときは Nothing を返す。</returns>
	<remarks></remarks>
</member><member name="M:Moca.Di.MocaContainer.GetComponent(System.String)">
	<summary>
 格納しているコンポーネントを返す。
 </summary>
	<param name="componentKey">取得するキー</param>
	<returns>該当するコンポーネント。該当しないときは Nothing を返す。</returns>
	<remarks></remarks>
</member><member name="M:Moca.Di.MocaContainer.SetComponent(Moca.Di.MocaComponent)">
	<summary>
 コンポーネントを格納する。
 </summary>
	<param name="component">対象のコンポーネント</param>
	<remarks></remarks>
</member><member name="M:Moca.Di.MocaContainer.Destroy">
	<summary>
 コンポーネントの消去
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Di.MocaContainer.GetEnumerator">
	<summary>
		<see cref="T:Moca.Di.MocaComponent"/> を反復処理する列挙子を返します。
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Di.MocaContainer">
	<summary>
 コンポーネントたちのコンテナ
 </summary>
	<remarks>
		<see cref="T:System.Threading.ReaderWriterLock"/> を使ってスレッドセーフにしてます。<br/>
	</remarks>
</member><member name="F:Moca.Di.MocaComponent._key">
	<summary>コンポーネントのキー</summary>
</member><member name="F:Moca.Di.MocaComponent._implType">
	<summary>実態の型</summary>
</member><member name="F:Moca.Di.MocaComponent._fieldType">
	<summary>フィールドの型</summary>
</member><member name="F:Moca.Di.MocaComponent._aspects">
	<summary>アスペクト配列</summary>
</member><member name="M:Moca.Di.MocaComponent.#ctor(System.Type,System.Type)">
	<summary>
 コンストラクタ
 </summary>
	<param name="implType">実態の型</param>
	<param name="fieldType">フィールドの型</param>
	<remarks></remarks>
</member><member name="M:Moca.Di.MocaComponent.#ctor(System.String,System.Type)">
	<summary>
 コンストラクタ
 </summary>
	<param name="key">コンポーネントのキー</param>
	<param name="fieldType">フィールドの型</param>
	<remarks></remarks>
</member><member name="P:Moca.Di.MocaComponent.Aspects">
	<summary>
 アスペクト配列プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Di.MocaComponent.ImplType">
	<summary>
 実態の型プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Di.MocaComponent.Key">
	<summary>
 キープロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Di.MocaComponent.FieldType">
	<summary>
 フィールドの型プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Di.MocaComponent.Create">
	<summary>
 オブジェクトをインスタンス化して返します。
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Di.MocaComponent.Create(System.Object)">
	<summary>
 オブジェクトをインスタンス化して返します。
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Di.MocaComponent.createObject(System.Object)">
	<summary>
 オブジェクトをインスタンス化して返します。
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Di.MocaComponent.createProxyObject(System.Object)">
	<summary>
 オブジェクトをプロキシとしてインスタンス化して返します。
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Di.MocaComponent">
	<summary>
 コンテナに格納する標準的なコンポーネント
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Attr.ImplementationAttribute._type">
	<summary>指定された実体化するクラスタイプ</summary>
</member><member name="M:Moca.Attr.ImplementationAttribute.#ctor(System.Type)">
	<summary>
 コンストラクタ
 </summary>
	<param name="typ">クラスタイプ</param>
	<remarks></remarks>
</member><member name="P:Moca.Attr.ImplementationAttribute.ImplType">
	<summary>
 クラスタイププロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Attr.ImplementationAttribute.CreateComponent(System.Reflection.FieldInfo)">
	<summary>
 コンポーネント作成
 </summary>
	<param name="field">フィールド</param>
	<returns>コンポーネント</returns>
	<remarks></remarks>
</member><member name="T:Moca.Attr.ImplementationAttribute">
	<summary>
 実態を指定する属性
 </summary>
	<remarks>
 Interface又は、Fieldのみに指定できます。<br/>
 この属性を指定されたインタフェースは、自動的に引数のクラスタイプをインスタンス化してフィールドへ注入することが出来ます。<br/>
	</remarks>
</member><member name="F:Moca.Db.SQLCommandTypes.SelectText">
	<summary>SELECT文を実行する</summary>
</member><member name="F:Moca.Db.SQLCommandTypes.Select4Update">
	<summary>SELECT文実行後にDataSetによるUPDATE実行する</summary>
</member><member name="F:Moca.Db.SQLCommandTypes.UpdateText">
	<summary>UPDATE文を実行する</summary>
</member><member name="F:Moca.Db.SQLCommandTypes.InsertText">
	<summary>INSERT文を実行する</summary>
</member><member name="F:Moca.Db.SQLCommandTypes.DeleteText">
	<summary>DELETE文を実行する</summary>
</member><member name="F:Moca.Db.SQLCommandTypes.StoredProcedure">
	<summary>ストアド実行を実行する</summary>
</member><member name="F:Moca.Db.SQLCommandTypes.DDL">
	<summary>DDL実行を実行する</summary>
</member><member name="T:Moca.Db.SQLCommandTypes">
	<summary>
 コマンド種別の列挙型
 </summary>
</member><member name="F:Moca.Di.MocaComponent4Db._dbms">
	<summary>扱うDBMS</summary>
</member><member name="M:Moca.Di.MocaComponent4Db.#ctor(System.Type,System.Type,Moca.Db.Dbms)">
	<summary>
 コンストラクタ
 </summary>
	<param name="implType">実態の型</param>
	<param name="fieldType">フィールドの型</param>
	<param name="targetDbms">対象となるDBMS</param>
	<remarks></remarks>
</member><member name="P:Moca.Di.MocaComponent4Db.Dbms">
	<summary>
 DBMS
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Di.MocaComponent4Db.createObject(System.Object)">
	<summary>
 オブジェクトをインスタンス化して返します。
 </summary>
	<returns></returns>
	<remarks>オーバーライドメソッド</remarks>
</member><member name="M:Moca.Di.MocaComponent4Db.createProxyObject(System.Object)">
	<summary>
 オブジェクトをプロキシとしてインスタンス化して返します。
 </summary>
	<returns></returns>
	<remarks>オーバーライドメソッド</remarks>
</member><member name="T:Moca.Di.MocaComponent4Db">
	<summary>
 コンテナに格納するデータベースを扱うコンポーネント
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Di.IContainer.Init">
	<summary>
 初期化処理
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Di.IContainer.Destroy">
	<summary>
 コンポーネントの消去
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Di.IContainer.GetComponent(System.Type)">
	<summary>
 格納しているコンポーネントを返す。
 </summary>
	<param name="componentType">取得する型</param>
	<returns>該当するコンポーネント。該当しないときは Nothing を返す。</returns>
	<remarks></remarks>
</member><member name="M:Moca.Di.IContainer.GetComponent(System.String)">
	<summary>
 格納しているコンポーネントを返す。
 </summary>
	<param name="componentKey">取得するキー</param>
	<returns>該当するコンポーネント。該当しないときは Nothing を返す。</returns>
	<remarks></remarks>
</member><member name="M:Moca.Di.IContainer.SetComponent(Moca.Di.MocaComponent)">
	<summary>
 コンポーネントを格納する。
 </summary>
	<param name="component">対象のコンポーネント</param>
	<remarks></remarks>
</member><member name="M:Moca.Di.IContainer.GetEnumerator">
	<summary>
		<see cref="T:Moca.Di.MocaComponent"/> を反復処理する列挙子を返します。
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Di.IContainer">
	<summary>
 コンポーネントたちのコンテナインタフェース
 </summary>
	<remarks></remarks>
</member><member name="T:Moca.Db.IDbCommandUpdate">
	<summary>
 UPDATE文を実行する為のDBCommandをラッピングするインタフェース
 </summary>
	<remarks>
 UPDATE文を実行するときに使用します。<br/>
		<example>
			<code lang="vb">
 Using dba As DbAccess = New DbAccess("Connection String")
 	Using cmd As IDbCommandUpdate = dba.CreateCommandUpdate("UPDATE HOGE SET Name=@Name, Note=@Note WHERE IDA=@IDA AND ID=@ID")
 		cmd.AddInParameter("@IDA", 1)
 		cmd.AddInParameter("@ID", 1)
 		cmd.AddInParameter("@Name", "hoge11")
 		cmd.AddInParameter("@Note", "hogehoge11")

 		Dim rc As Integer
 		rc = cmd.Execute()
 		Debug.Print(rc)
 	End Using
 End Using
 </code>
		</example>
	</remarks>
</member><member name="P:Moca.Db.IDbCommandStoredProcedure.ReturnValue">
	<summary>
 実行後の戻り値を返す
 </summary>
	<value></value>
	<returns>戻り値</returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDbCommandStoredProcedure.SetParameterValue(System.Int32,System.Object)">
	<summary>
 入力パラメータ値を設定する
 </summary>
	<param name="index">パラメータ位置</param>
	<param name="value">値</param>
	<remarks>
 ストアドのパラメータを設定するときのみ使用可能です。
 パラメータ位置の０番目は@RETURN_VALUEになる為、指定された位置に＋１する。
 </remarks>
</member><member name="M:Moca.Db.IDbCommandStoredProcedure.SetParameterValue(System.String,System.Object)">
	<summary>
 入力パラメータ値を設定する
 </summary>
	<param name="parameterName">パラメータ名</param>
	<param name="value">値</param>
	<remarks>
 ストアドのパラメータを設定するときのみ使用可能
 </remarks>
</member><member name="M:Moca.Db.IDbCommandStoredProcedure.AddParameterValue(System.Object)">
	<summary>
 入力パラメータ値の設定を追加する
 </summary>
	<param name="value"></param>
	<remarks></remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 指定されたパラメータが多すぎます。
 </exception>
</member><member name="M:Moca.Db.IDbCommandStoredProcedure.ExecuteNonQuery">
	<summary>
 更新系のストアドを実行！
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.IDbCommandStoredProcedure">
	<summary>
 StoredProcedureを実行する為のDBCommandをラッピングするインタフェース
 </summary>
	<remarks>
 StoredProcedureを実行するときに使用します。<br/>
		<example>
			<code lang="vb">
 Using dba As DbAccess = New DbAccess("Connection String")
 	Using cmd As IDbCommandStoredProcedure = dba.CreateCommandStoredProcedure("HOGE_S01")
 		cmd.SetParameterValue("@IDA", 1)
 		cmd.SetParameterValue("@ID", 1)

 		Dim rc As Integer
 		rc = cmd.Execute()
 		Debug.Print(rc)
 	End Using
 End Using
 </code>
		</example>
	</remarks>
</member><member name="P:Moca.Db.IDbCommandSql.Command">
	<summary>
 実行するDBCommandインスタンスを参照
 </summary>
	<value>実行するDBCommandインスタンス</value>
	<remarks></remarks>
</member><member name="P:Moca.Db.IDbCommandSql.PreparedStatement">
	<summary>
 コンパイル済みのSQLを使うかどうかを指定
 </summary>
	<value>
 True:使用する
 False:使用しない
 </value>
	<remarks></remarks>
</member><member name="P:Moca.Db.IDbCommandSql.CommandText">
	<summary>
 SQL文
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.IDbCommandSql.ResultOutParameter">
	<summary>
 実行後の出力パラメータを返す
 </summary>
	<value></value>
	<returns>出力パラメータ</returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDbCommandSql.SetParameter(System.String,System.Object)">
	<summary>
 入力パラメータを設定する
 </summary>
	<param name="parameterName">パラメータ名</param>
	<param name="value">値</param>
	<returns>パラメータインスタンス</returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDbCommandSql.SetParameter(System.String,System.Array)">
	<summary>
 入力パラメータを設定する
 </summary>
	<param name="parameterName">パラメータ名</param>
	<param name="values">値配列</param>
	<returns>パラメータインスタンス</returns>
	<remarks>
 当メソッドでは IN 句を作成します。
 IN 句はパラメータとしては扱えないので、SQL文内に存在するパラメータ名部分を文字列変換します。
 </remarks>
</member><member name="M:Moca.Db.IDbCommandSql.AddInParameter(System.String,System.Data.DbType)">
	<summary>
 入力パラメータを追加する
 </summary>
	<param name="parameterName">パラメータ名</param>
	<param name="dbTypeValue">パラメータの型</param>
	<returns>パラメータインスタンス</returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDbCommandSql.AddInParameter(System.String,System.Data.DbType,System.Int32)">
	<summary>
 入力パラメータを追加する
 </summary>
	<param name="parameterName">パラメータ名</param>
	<param name="dbTypeValue">パラメータの型</param>
	<param name="size">パラメータのサイズ</param>
	<returns>パラメータインスタンス</returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDbCommandSql.AddOutParameter(System.String)">
	<summary>
 出力パラメータを追加する
 </summary>
	<param name="parameterName">パラメータ名</param>
	<returns>パラメータインスタンス</returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDbCommandSql.AddOutParameter(System.String,System.Data.DbType)">
	<summary>
 出力パラメータを追加する
 </summary>
	<param name="parameterName">パラメータ名</param>
	<param name="dbTypeValue">パラメータの型</param>
	<returns>パラメータインスタンス</returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDbCommandSql.HaveOutParameter">
	<summary>
 パラメータ内に戻り値があるか返す
 </summary>
	<returns>True は戻り値有り、False は戻り値無し</returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDbCommandSql.GetParameterValue(System.String)">
	<summary>
 出力パラメータを参照する
 </summary>
	<param name="parameterName">パラメータ名</param>
	<returns>出力パラメータ値</returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDbCommandSql.Prepare">
	<summary>
 コンパイル済みのSQLにする
 </summary>
	<remarks>
 当メソッド実行前に予め <see cref="M:Moca.Db.IDbCommandSql.AddInParameter(System.String,System.Data.DbType)"/> を使用してパラメータを設定しておいてください。<br/>
	</remarks>
</member><member name="M:Moca.Db.IDbCommandSql.Execute">
	<summary>
 SQL実行！
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.IDbCommandSql">
	<summary>
 DBCommandをラッピングするインタフェース
 </summary>
	<remarks></remarks>
</member><member name="P:Moca.Db.IDbCommandSelect.Behavior">
	<summary>
 ExecuteReader に渡す CommandBehavior
 </summary>
	<value></value>
	<returns></returns>
	<remarks>
		<see cref="M:Moca.Db.IDbCommandSelect.Execute``1"></see>以外では無視されます。
 <see cref="T:System.Data.SqlClient.SqlDataReader"></see>を使用している場合のみ有効。
 </remarks>
</member><member name="P:Moca.Db.IDbCommandSelect.ResultDataSet">
	<summary>
 Select文を実行した結果を設定／参照
 </summary>
	<value>Select文を実行した結果</value>
	<remarks></remarks>
</member><member name="P:Moca.Db.IDbCommandSelect.Result1stTable">
	<summary>
 DataSet内の先頭テーブルを返す
 </summary>
	<value></value>
	<returns>先頭テーブル</returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.IDbCommandSelect.Result1stTableRowEnumerator">
	<summary>
 DataSet内の先頭テーブルに存在する行データのEnumeratorを返す
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDbCommandSelect.Result1stTableEntitis``1">
	<summary>
 DataSet内の先頭テーブルを返す
 </summary>
	<typeparam name="T"></typeparam>
	<returns>先頭テーブルのデータを指定されたEntityを使用した配列に変換して返す</returns>
	<remarks>
 Execute 後に当メソッドでエンティティを取得するより<see cref="M:Moca.Db.IDbCommandSelect.Execute``1"></see>を使った方が高速でステップを減らせます。
 </remarks>
</member><member name="M:Moca.Db.IDbCommandSelect.Result1stTableEntity``1(System.Int32)">
	<summary>
 DataSet内の先頭テーブルの指定された行を返す
 </summary>
	<typeparam name="T"></typeparam>
	<param name="index"></param>
	<returns>先頭テーブルのデータを指定されたEntityを使用した配列に変換して返す</returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDbCommandSelect.ResultConstantDataSet(System.String,System.String,System.Boolean,System.Object,System.String)">
	<summary>
 DataSet内の先頭テーブルをConstantDataSet型で返す
 </summary>
	<param name="textColumnName">テキストとして扱う列の名称</param>
	<param name="valueColumnName">値として扱う列の名称</param>
	<param name="blankRow">空白行の有無</param>
	<param name="blankValue">空白行有りのときの空白行の値</param>
	<param name="delm">テキストと値の区切り文字</param>
	<returns>ConstantDataSet</returns>
	<remarks>
 主に、コンボボックス等で使用する場合に使えます。
 </remarks>
</member><member name="M:Moca.Db.IDbCommandSelect.ResultConstantDataSet(System.Int32,System.Int32,System.Boolean,System.Object,System.String)">
	<summary>
 DataSet内の先頭テーブルをConstantDataSet型で返す
 </summary>
	<param name="textColumnIndex">テキストとして扱う列の位置</param>
	<param name="valueColumnIndex">値として扱う列の位置</param>
	<param name="blankRow">空白行の有無</param>
	<param name="blankValue">空白行有りのときの空白行の値</param>
	<param name="delm">テキストと値の区切り文字</param>
	<returns>ConstantDataSet</returns>
	<remarks>
 主に、コンボボックス等で使用する場合に使えます。
 </remarks>
</member><member name="M:Moca.Db.IDbCommandSelect.ExecuteScalar">
	<summary>
 クエリを実行し（ExecuteScalar）、そのクエリが返す結果セットの最初の行にある最初の列を返します。余分な列または行は無視されます。
 </summary>
	<returns>結果セットの最初の行にある最初の列。</returns>
	<remarks>
 当メソッドは予めデータベースをオープンしておく必要がありますが、
 オープンされていないときは、自動でオープンして終了時にクローズします。<br/>
 詳細は、<seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/> を参照してください。
 </remarks>
</member><member name="M:Moca.Db.IDbCommandSelect.Execute``1">
	<summary>
 クエリを実行し（ExecuteReader）、指定されたエンティティに変換して返します。
 </summary>
	<typeparam name="T">エンティティ</typeparam>
	<returns>エンティティのリスト</returns>
	<remarks>
 当メソッドは予めデータベースをオープンしておく必要がありますが、
 オープンされていないときは、自動でオープンして終了時にクローズします。<br/>
 詳細は、<seealso cref="M:System.Data.IDbCommand.ExecuteReader"/> を参照してください。<br/>
		<br/>
 なお、当メソッドを使用した場合は結果をエンティティとして扱うことを前提としているため、<see cref="T:System.Data.DataSet"></see>や<see cref="T:System.Data.DataTable"></see>としては扱えません。<br/>
 よって<see cref="P:Moca.Db.IDbCommandSelect.ResultDataSet"></see>, <see cref="P:Moca.Db.IDbCommandSelect.Result1stTable"></see>などのメソッドは使用できません。<br/>
 バッチSQLステートメント時は<see cref="M:Moca.Db.IDbCommandSelect.NextResult``1"></see>にて次の結果を取得してください。
 </remarks>
</member><member name="M:Moca.Db.IDbCommandSelect.NextResult``1">
	<summary>
 次の結果を返す
 </summary>
	<typeparam name="T">エンティティ</typeparam>
	<returns>存在しないときは Nothing をかえす</returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.IDbCommandSelect">
	<summary>
 SELECT文を実行する為のDBCommandをラッピングするインタフェース
 </summary>
	<remarks>
 データ抽出系のストアド実行でも使用出来ますが、ストアドの時は<see cref="T:Moca.Db.IDbCommandStoredProcedure"/>を使用してください。<br/>
		<example>
			<code lang="vb">
 Using dba As IDbAccess = New DbAccess("Connection String")
 	Using cmd As IDbCommandSelect = dba.CreateCommandSelect("SELECT * FROM TableName")
 		If cmd.Execute() &lt;= 0 Then
 			Return Nothing
 		End If
 		Return cmd.ResultDataSet
 	End Using
 End Using
 </code>
		</example>
	</remarks>
</member><member name="P:Moca.Db.IDbCommandSelect4Update.Adapter">
	<summary>
 アダプタインスタンス
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDbCommandSelect4Update.Update">
	<summary>
 Adapter Update 実行！
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.IDbCommandSelect4Update">
	<summary>
 SELECT文を実行し、DataSetを使ってUPDATEする為のDBCommandのラッピングするインタフェース
 </summary>
	<remarks>
		<example>
			<code lang="vb">
 Using dba As IDbAccess = New DbAccess("Connection String")
 	Using cmd As IDbCommandSelect4Update = dba.CreateCommandSelect4Update("SELECT * FROM TableName")
 		If cmd.Execute() &lt;= 0 Then
 			Return Nothing
 		End If
 
 		... cmd.ResultDataSet に対して更新処理 ...
 
 		Dim rc As Integer
 		rc = cmd.Update()
 		Debug.Print(rc)
 	End Using
 End Using
 </code>
		</example>
	</remarks>
</member><member name="T:Moca.Db.IDbCommandInsert">
	<summary>
 INSERT文を実行する為のDBCommandをラッピングするインタフェース
 </summary>
	<remarks>
		<example>
			<code lang="vb">
 Using dba As IDbAccess = New DbAccess("Connection String")
 	Using cmd As IDbCommandInsert = dba.CreateCommandInsert("INSERT INTO HOGE([IDA],[ID],[Name],[Note])VALUES(@IDA,@ID,@Name,@Note)")
 		cmd.AddInParameter("IDA", 1)
 		cmd.AddInParameter("ID", 1)
 		cmd.AddInParameter("Name", "Name11")
 		cmd.AddInParameter("Note", "Note11")
 
 		Dim rc As Integer
 		rc = cmd.Execute()
 		Debug.Print(rc)
 	End Using
 End Using
 </code>
		</example>
	</remarks>
</member><member name="T:Moca.Db.IDbCommandDelete">
	<summary>
 DELETE文を実行する為のDBCommandをラッピングするインタフェース
 </summary>
	<remarks>
 DELETE文を実行するときに使用します。<br/>
		<example>
			<code lang="vb">
 Using dba As DbAccess = New DbAccess("Connection String")
 	Using cmd As IDbCommandDelete = dba.CreateCommandDelete("DELETE FROM HOGE WHERE IDA=@IDA AND ID=@ID")
 		cmd.AddInParameter("@IDA", 1)
 		cmd.AddInParameter("@ID", 1)

 		Dim rc As Integer
 		rc = cmd.Execute()
 		Debug.Print(rc)
 	End Using
 End Using
 </code>
		</example>
	</remarks>
</member><member name="T:Moca.Db.IDbCommandDDL">
	<summary>
 DDL文を実行する為のDBCommandをラッピングするインタフェース
 </summary>
	<remarks>
 UPDATE文を実行するときに使用します。<br/>
		<example>
			<code lang="vb">
 Using dba As DbAccess = New DbAccess("Connection String")
 	Using cmd As IDbCommandDDL = dba.CreateCommandDDL("DROP TABLE [HOGE]")
 		Dim rc As Integer
 		rc = cmd.Execute()
 		Debug.Print(rc)
 	End Using
 End Using
 </code>
		</example>
	</remarks>
</member><member name="M:Moca.Db.IDbAccessHelper.ErrorCount(System.Exception)">
	<summary>
 エラーの件数を返す
 </summary>
	<param name="ex">エラー件数を取得したい例外</param>
	<returns>エラー件数</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.IDbAccessHelper.ErrorNumbers(System.Exception)">
	<summary>
 エラー番号を返す
 </summary>
	<param name="ex">エラー番号を取得したい例外</param>
	<returns>エラー番号配列</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.IDbAccessHelper.HasSqlNativeError(System.Exception,System.Int64)">
	<summary>
 指定されたエラー番号が発生した例外に存在するか返す
 </summary>
	<param name="ex">対象となる例外</param>
	<param name="errorNumber">エラー番号</param>
	<returns>True:存在する、False:存在しない</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.IDbAccessHelper.HasSqlNativeErrorDuplicationPKey(System.Exception)">
	<summary>
 重複エラーが発生した例外に存在するか返す
 </summary>
	<param name="ex">対象となる例外</param>
	<returns>True:存在する、False:存在しない</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.IDbAccessHelper.HasSqlNativeErrorTimtout(System.Exception)">
	<summary>
 タイムアウトエラーが発生した例外に存在するか返す
 </summary>
	<param name="ex">対象となる例外</param>
	<returns>True:存在する、False:存在しない</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.IDbAccessHelper.GetSchemaTable(System.String)">
	<summary>
 スキーマに存在するテーブル情報を取得する
 </summary>
	<param name="tablename">取得したいテーブル名</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDbAccessHelper.GetSchemaTables">
	<summary>
 スキーマに存在するテーブル情報を取得する
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDbAccessHelper.GetSchemaColumns(Moca.Db.DbInfoTable)">
	<summary>
 スキーマに存在するテーブル情報を取得する
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDbAccessHelper.GetSchemaProcedures">
	<summary>
 スキーマに存在するプロシージャ情報を取得する
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDbAccessHelper.GetSchemaFunctions">
	<summary>
 スキーマに存在する関数情報を取得する
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDbAccessHelper.RefreshProcedureParameters(System.Data.IDbCommand)">
	<summary>
 ストアドのパラメータを取得する
 </summary>
	<param name="cmd">実行対象のDBコマンド</param>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDbAccessHelper.CDbParameterName(System.String)">
	<summary>
 SQLステータスのパラメータ名を変換する。
 </summary>
	<param name="name">パラメータ名</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.IDbAccessHelper.PlaceholderMark">
	<summary>
 SQLプレースフォルダのマークを返す。
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.IDbAccessHelper">
	<summary>
 DBアクセスの各プロパイダーに対応したヘルパーのインタフェース
 </summary>
	<remarks>
 各DBベンダー毎に異なる部分を吸収する為のインタフェースです。<br/>
	</remarks>
</member><member name="P:Moca.Db.IDao.Dbms">
	<summary>
 DBMS
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Moca.Db.IDao.Connection">
	<summary>
 コネクションオブジェクト
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Moca.Db.IDao.Adapter">
	<summary>
 アダプタオブジェクト
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Moca.Db.IDao.Helper">
	<summary>
 ヘルパークラスを返す
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.IDao.CommandWrapper">
	<summary>
 現在のコマンドラッパークラスを返す
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.IDao.ExecuteHistory">
	<summary>
 コマンド実行履歴有無指定
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.IDao.ExecuteUpdateHistory">
	<summary>
 更新コマンド実行履歴有無指定
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.IDao.ExecuteHistories">
	<summary>
 コマンド実行履歴
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.IDao.RollbackStatus">
	<summary>
 ロールバック有無
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDao.CheckConnect">
	<summary>
 接続確認の為に一度接続してみる
 </summary>
	<remarks>
 接続出来たときは切断します。
 </remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.IDao.CreateCommandSelect(System.String)">
	<summary>
 SELECT文を実行する為のDBCommandのラッパークラスを生成する。
 </summary>
	<param name="commandText">SELECT文文字列</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDao.CreateCommandSelect4Update(System.String)">
	<summary>
 SELECT文を実行し、DataSetを使ってUPDATEする為のDBCommandのラッパークラスを生成する。
 </summary>
	<param name="commandText">SELECT文文字列</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDao.CreateCommandInsert(System.String)">
	<summary>
 INSERT文を実行する為のDBCommandのラッパークラスを生成する。
 </summary>
	<param name="commandText">INSERT文文字列</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDao.CreateCommandUpdate(System.String)">
	<summary>
 UPDATE文を実行する為のDBCommandのラッパークラスを生成する。
 </summary>
	<param name="commandText">UPDATE文文字列</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDao.CreateCommandDelete(System.String)">
	<summary>
 DELETE文を実行する為のDBCommandのラッパークラスを生成する。
 </summary>
	<param name="commandText">DELETE文文字列</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDao.CreateCommandStoredProcedure(System.String)">
	<summary>
 StoredProcedureを実行する為のDBCommandのラッパークラスを生成する。
 </summary>
	<param name="commandText">ストアド名</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDao.CreateCommandDDL(System.String)">
	<summary>
 DDLを実行する為のDBCommandのラッパークラスを生成する。
 </summary>
	<param name="commandText">DDL文文字列</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.IDao.ExecuteScalar(Moca.Db.IDbCommandSelect)">
	<summary>
 クエリを実行し、そのクエリが返す結果セットの最初の行にある最初の列を返します。余分な列または行は無視されます。
 </summary>
	<param name="commandWrapper"></param>
	<returns>結果セットの最初の行にある最初の列。</returns>
	<remarks>
 当メソッドは予めデータベースをオープンしておく必要がありますが、
 オープンされていないときは、自動でオープンして終了時にクローズします。<br/>
 詳細は、<seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/> を参照してください。
 </remarks>
</member><member name="M:Moca.Db.IDao.Execute(Moca.Db.IDbCommandSelect)">
	<summary>
 SELECT文の実行
 </summary>
	<param name="commandWrapper">SELECT文を実行する為のDBCommandのラッパーインスタンス</param>
	<returns>データ件数</returns>
	<remarks>
	</remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.IDao.Execute``1(Moca.Db.IDbCommandSelect)">
	<summary>
 SELECT文の実行
 </summary>
	<param name="commandWrapper">SELECT文を実行する為のDBCommandのラッパーインスタンス</param>
	<returns>結果</returns>
	<remarks>
	</remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.IDao.Execute(Moca.Db.IDbCommandSelect4Update)">
	<summary>
 SELECT文の実行(後にAdapterを利用した更新を行う場合)
 </summary>
	<param name="commandWrapper">SELECT文を実行する為のDBCommandのラッパーインスタンス</param>
	<returns>データ件数</returns>
	<remarks>
 SELECT実行後のデータ更新をDataSetを使って更新する場合は、こちらを使用してください。<br/>
 予めAdapterとCommandを関連付けます。
 </remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.IDao.ExecuteNonQuery(Moca.Db.IDbCommandSql)">
	<summary>
 INSERT,UPDATE,DELETE文の実行
 </summary>
	<param name="commandWrapper">実行する為のDBCommandのラッパーインスタンス</param>
	<returns>更新件数</returns>
	<remarks>
	</remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.IDao.UpdateAdapter(System.Data.DataSet,System.Data.IDbDataAdapter)">
	<summary>
 アダプターによる更新
 </summary>
	<param name="ds">更新するデータ</param>
	<param name="adp">アダプター</param>
	<returns>更新件数</returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.IDao">
	<summary>
 Data Access Object のインタフェース
 </summary>
	<remarks>
 データベースアクセスする際に最低限必要と思われる機能を提供します。<br/>
	</remarks>
</member><member name="F:Moca.Db.Helper.OleDbErrorNumbers.DuplicationPKey">
	<summary>重複エラーコード</summary>
</member><member name="F:Moca.Db.Helper.OleDbErrorNumbers.TimeOut">
	<summary>タイムアウトエラーコード</summary>
</member><member name="F:Moca.Db.Helper.OleDbErrorNumbers.TableCompatibilityRestrictions">
	<summary>
 指定した値は、列またはテーブルの整合性制約に違反しました。
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.Helper.OleDbErrorNumbers.StatementEnd">
	<summary>
 ステートメントは終了されました。
 </summary>
	<remarks></remarks>
</member><member name="T:Moca.Db.Helper.OleDbErrorNumbers">
	<summary>ＳＱＬエラーコード</summary>
</member><member name="F:Moca.Db.Helper.OleDbAccessHelper._conn">
	<summary>ＳＱＬコネクション</summary>
</member><member name="M:Moca.Db.Helper.OleDbAccessHelper.#ctor(Moca.Db.IDao)">
	<summary>
 コンストラクタ
 </summary>
	<param name="dba">使用するデータベースアクセス</param>
	<remarks></remarks>
</member><member name="M:Moca.Db.Helper.OleDbAccessHelper.CDbParameterName(System.String)">
	<summary>
 SQLステータスのパラメータ名を変換する。
 </summary>
	<param name="name">パラメータ名</param>
	<returns></returns>
	<remarks>
 プレースフォルダが「？」なので、指定された名称はそのまま利用する。
 </remarks>
</member><member name="M:Moca.Db.Helper.OleDbAccessHelper.ErrorCount(System.Exception)">
	<summary>
 エラーの件数を返す
 </summary>
	<param name="ex">エラー件数を取得したい例外</param>
	<returns>エラー件数</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.Helper.OleDbAccessHelper.HasSqlNativeError(System.Exception,System.Int64)">
	<summary>
 指定されたエラー番号が発生した例外に存在するか返す
 </summary>
	<param name="ex">対象となる例外</param>
	<param name="errorNumber">エラー番号</param>
	<returns>True:存在する、False:存在しない</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.Helper.OleDbAccessHelper.HasSqlNativeErrorDuplicationPKey(System.Exception)">
	<summary>
 重複エラーが発生した例外に存在するか返す
 </summary>
	<param name="ex">対象となる例外</param>
	<returns>True:存在する、False:存在しない</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.Helper.OleDbAccessHelper.HasSqlNativeErrorTimtout(System.Exception)">
	<summary>
 タイムアウトエラーが発生した例外に存在するか返す
 </summary>
	<param name="ex">対象となる例外</param>
	<returns>True:存在する、False:存在しない</returns>
	<remarks>
	</remarks>
</member><member name="P:Moca.Db.Helper.OleDbAccessHelper.PlaceholderMark">
	<summary>
 SQLプレースフォルダのマークを返す。
 </summary>
	<value></value>
	<returns>「？」</returns>
	<remarks>「？」1文字固定</remarks>
</member><member name="M:Moca.Db.Helper.OleDbAccessHelper.RefreshProcedureParameters(System.Data.IDbCommand)">
	<summary>
 ストアドのパラメータを取得する
 </summary>
	<param name="cmd">実行対象のDBコマンド</param>
	<remarks></remarks>
</member><member name="M:Moca.Db.Helper.OleDbAccessHelper.ErrorNumbers(System.Exception)">
	<summary>
 エラー番号を返す
 </summary>
	<param name="ex">エラー番号を取得したい例外</param>
	<returns>エラー番号配列</returns>
	<remarks>
	</remarks>
</member><member name="M:Moca.Db.Helper.OleDbAccessHelper.getSchemaOleDbColumns(Moca.Db.DbInfoTable)">
	<summary>
 スキーマからカラム情報を取得する
 </summary>
	<param name="table"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.Helper.OleDbAccessHelper.getColumnMaxLength(System.Data.DataRow,System.Int32@,System.Int32@)">
	<summary>
 列の最大桁数を返す
 </summary>
	<param name="row">行データ</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.Helper.OleDbAccessHelper.getColumnLength(System.Data.DataRow)">
	<summary>
 列の桁数を返します。
 </summary>
	<param name="row">行データ</param>
	<returns>テーブル又は列が存在しないときや、桁数の指定が不要な型の時は DBNull.Value を返します。</returns>
	<remarks>
 バイナリ データ、文字データ、またはテキスト/イメージ データの最大長 (文字単位)。
 それ以外の場合は、NULL が返されます。
 詳細については、『Microsoft SQL Server 2000 Transact-SQL プログラマーズリファレンス上』の「第 3 章 Transact-SQL のデータ型」を参照してください。
 </remarks>
</member><member name="M:Moca.Db.Helper.OleDbAccessHelper.getColumnPrecision(System.Data.DataRow)">
	<summary>
 列の桁数を返します。
 </summary>
	<param name="row">行データ</param>
	<returns>テーブル又は列が存在しないときや、桁数の指定が不要な型の時は DBNull.Value を返します。</returns>
	<remarks>
 概数データ、真数データ、整数データ、または通貨データの有効桁数。それ以外の場合は、NULL が返されます。
 </remarks>
</member><member name="M:Moca.Db.Helper.OleDbAccessHelper.getColumnScale(System.Data.DataRow)">
	<summary>
 列の桁数を返します。
 </summary>
	<param name="row">行データ</param>
	<returns>テーブル又は列が存在しないときや、桁数の指定が不要な型の時は DBNull.Value を返します。</returns>
	<remarks>
 概数データ、真数データ、整数データ、または通貨データの桁数。それ以外の場合は、NULL が返されます。
 </remarks>
</member><member name="M:Moca.Db.Helper.OleDbAccessHelper.getColumnDbType``1(System.Data.DataRow)">
	<summary>
 列の型をかえします。
 </summary>
	<typeparam name="T">使用する型のDbTypeを指定する</typeparam>
	<param name="row">行データ</param>
	<returns>テーブル又は列が存在しないときは DBNull.Value を返します。</returns>
	<remarks>
 SQLServer は numeric は OleDbType には存在しないから Decimal にマップします。
 </remarks>
</member><member name="M:Moca.Db.Helper.OleDbAccessHelper.isUniCode(System.String)">
	<summary>
 型がUniCodeか判定
 </summary>
	<param name="typ"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.Helper.OleDbAccessHelper">
	<summary>
 OleDbを使用したDBアクセス
 </summary>
	<remarks>
 データベース接続にOleDbを使用するときは、当クラスを使用します。
 </remarks>
</member><member name="F:Moca.Db.DbmsManager._myInstance">
	<summary>自分自身のインスタンス</summary>
</member><member name="F:Moca.Db.DbmsManager._dbms">
	<summary>DBMS のキャッシュ</summary>
</member><member name="F:Moca.Db.DbmsManager._daoProxy">
	<summary>AopProxy のキャッシュ</summary>
</member><member name="F:Moca.Db.DbmsManager._daos">
	<summary>DbAccess のキャッシュ</summary>
</member><member name="F:Moca.Db.DbmsManager._mylog">
	<summary>log4net logger</summary>
</member><member name="M:Moca.Db.DbmsManager.#ctor">
	<summary>
 デフォルトコンストラクタ
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbmsManager.Finalize">
	<summary>
 デストラクタ
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbmsManager._my">
	<summary>
 自分自身
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbmsManager.GetDbms(System.String)">
	<summary>
 DBMSをアプリケーション構成ファイル内から取得します。
 </summary>
	<param name="appKey">キー値</param>
	<returns>DBMS</returns>
	<remarks>
 一度読込まれた接続先情報は保存されます。
 </remarks>
</member><member name="M:Moca.Db.DbmsManager.GetDbms(System.String,System.String,System.String)">
	<summary>
 DBMSを引数から指定します。
 </summary>
	<param name="name">接続名称</param>
	<param name="providerName">プロパイダ名</param>
	<param name="connectionString">接続文字列</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbmsManager.GetDbms(System.String,System.String,System.String,System.String,System.String)">
	<summary>
 DBMSを引数から指定します。
 </summary>
	<param name="providerName">プロパイダ名</param>
	<param name="serverName">サーバー名</param>
	<param name="databaseName">データベース名</param>
	<param name="userName">ユーザー名</param>
	<param name="password">パスワード</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbmsManager._getDbms(System.String)">
	<summary>
 DBMSをアプリケーション構成ファイル内から取得します。
 </summary>
	<param name="appKey">キー値</param>
	<returns>DBMS</returns>
	<remarks>
 一度読込まれた接続先情報は保存されます。
 </remarks>
</member><member name="M:Moca.Db.DbmsManager._getDbms(System.String,System.String,System.String)">
	<summary>
 DBMSを引数から指定します。
 </summary>
	<param name="name">接続名称</param>
	<param name="providerName">プロパイダ名</param>
	<param name="connectionString">接続文字列</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.DbmsManager._getDbms(System.String,System.String,System.String,System.String,System.String)">
	<summary>
 DBMSを引数から指定します。
 </summary>
	<param name="providerName">プロパイダ名</param>
	<param name="serverName">サーバー名</param>
	<param name="databaseName">データベース名</param>
	<param name="userName">ユーザー名</param>
	<param name="password">パスワード</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.DbmsManager">
	<summary>
 DBMS を管理します。
 </summary>
	<remarks>
	</remarks>
</member><member name="F:Moca.Db.Dbms._dbSetting">
	<summary>構成ファイルの接続文字列セクション又はDB接続文字列を管理</summary>
</member><member name="F:Moca.Db.Dbms._connectionStringSettings">
	<summary>構成ファイルの接続文字列セクション内の名前付きで単一の接続文字列を表します。</summary>
</member><member name="F:Moca.Db.Dbms._providerFactory">
	<summary>プロバイダのデータ ソース クラスの実装のインスタンスを作成するためのメソッドのセットを表します。</summary>
</member><member name="F:Moca.Db.Dbms._mylog">
	<summary>log4net logger</summary>
</member><member name="M:Moca.Db.Dbms.#ctor(System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="appKey">app.config の接続文字列キー名</param>
	<remarks>
 app.config から接続文字列、プロパイダを取得しコネクションを作成する
 </remarks>
	<exception cref="T:System.ArgumentException">
 DB接続する為の接続文字列が設定されていないときに発生する。
 </exception>
</member><member name="M:Moca.Db.Dbms.#ctor(System.String,System.String,System.String,System.String,System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="providerName">プロパイダ名</param>
	<param name="serverName">接続先サーバー名</param>
	<param name="databaseName">接続するデータベース名</param>
	<param name="userName">接続ユーザー名</param>
	<param name="password">接続ユーザーパスワード</param>
	<remarks>
 指定された情報を元に接続文字列、プロパイダを取得しコネクションを作成する
 </remarks>
</member><member name="M:Moca.Db.Dbms.#ctor(System.String,System.String,System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="name">接続先名称</param>
	<param name="providerName">プロパイダ名</param>
	<param name="connectionString">接続文字列</param>
	<remarks>
 指定された情報を元に接続文字列、プロパイダを取得しコネクションを作成する
 </remarks>
</member><member name="P:Moca.Db.Dbms.Setting">
	<summary>構成ファイルの接続文字列セクション又はDB接続文字列を管理</summary>
</member><member name="P:Moca.Db.Dbms.ConnectionStringSettings">
	<summary>構成ファイルの接続文字列セクション内の名前付きで単一の接続文字列を表します。</summary>
</member><member name="P:Moca.Db.Dbms.ProviderFactory">
	<summary>プロバイダのデータ ソース クラスの実装のインスタンスを作成するためのメソッドのセットを表します。</summary>
</member><member name="M:Moca.Db.Dbms.GetHelper(Moca.Db.IDao)">
	<summary>
 ヘルパークラスのインスタンス化
 </summary>
	<param name="dba">DBへアクセスするインスタンス</param>
	<remarks></remarks>
</member><member name="M:Moca.Db.Dbms.CreateConnection">
	<summary>
 新しい接続を作成する
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.Dbms.CreateDbAccess">
	<summary>
 新しい DBAccess インスタンスを作成する。
 </summary>
	<returns>新しい DBAccess インスタンス</returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.Dbms.CreateDbAccess``1">
	<summary>
 新しい DBAccess インスタンスを作成する。
 </summary>
	<returns>新しい DBAccess インスタンス</returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.Dbms">
	<summary>
 DBMS
 </summary>
	<remarks>
 DataBase Management Systemの略。
 データベースを構築・運用するために用いられる管理ソフトウェアのことで、
 このクラスで１接続先を表します。
 </remarks>
</member><member name="F:Moca.Db.Attr.TransactionAttributeAnalyzer._mylog">
	<summary>log4net logger</summary>
</member><member name="T:Moca.Db.Attr.TransactionAttributeAnalyzer">
	<summary>
 トランザクション属性解析
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.AbstractDao._dbms">
	<summary>DBMS</summary>
</member><member name="F:Moca.Db.AbstractDao._conn">
	<summary>コネクションオブジェクト</summary>
</member><member name="F:Moca.Db.AbstractDao._adp">
	<summary>アダプタオブジェクト</summary>
</member><member name="F:Moca.Db.AbstractDao._dbaHelper">
	<summary>ヘルパーオブジェクト</summary>
</member><member name="F:Moca.Db.AbstractDao._commandWrapper">
	<summary>コマンドラッパーオブジェクト</summary>
</member><member name="F:Moca.Db.AbstractDao._executeHistory">
	<summary>コマンド履歴有無</summary>
</member><member name="F:Moca.Db.AbstractDao._executeUpdateHistory">
	<summary>更新コマンド履歴有無</summary>
</member><member name="F:Moca.Db.AbstractDao._executeHistoryList">
	<summary>コマンド履歴</summary>
</member><member name="F:Moca.Db.AbstractDao._rollbackStatus">
	<summary>ロールバック有無</summary>
</member><member name="F:Moca.Db.AbstractDao._txContext">
	<summary>トランザクション制御情報</summary>
</member><member name="F:Moca.Db.AbstractDao._mylog">
	<summary>log4net logger</summary>
</member><member name="M:Moca.Db.AbstractDao.#ctor">
	<summary>
 デフォルトコンストラクタ
 </summary>
	<remarks>
 外部からは利用不可
 </remarks>
</member><member name="M:Moca.Db.AbstractDao.#ctor(Moca.Db.Dbms)">
	<summary>
 コンストラクタ
 </summary>
	<param name="myDbms">接続先のDBMS</param>
	<remarks></remarks>
</member><member name="M:Moca.Db.AbstractDao.Finalize">
	<summary>
 デストラクタ
 </summary>
	<remarks></remarks>
</member><member name="P:Moca.Db.AbstractDao.Connection">
	<summary>
 コネクションオブジェクト
 </summary>
	<value></value>
	<remarks>
	</remarks>
</member><member name="P:Moca.Db.AbstractDao.Adapter">
	<summary>
 アダプタオブジェクト
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.AbstractDao.Dbms">
	<summary>
 DBMS
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.AbstractDao.Helper">
	<summary>
 ヘルパークラスを返す
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.AbstractDao.TargetDbms">
	<summary>
 DBMS
 </summary>
	<value></value>
	<remarks>
	</remarks>
</member><member name="P:Moca.Db.AbstractDao.RollbackStatus">
	<summary>
 ロールバック有無
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.AbstractDao.CheckConnect">
	<summary>
 接続確認の為に一度接続してみる
 </summary>
	<remarks>
 接続出来たときは切断します。
 </remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.AbstractDao.createCommandWrapper(Moca.Db.SQLCommandTypes,System.String,System.Data.IDbConnection)">
	<summary>
 指定されたタイプのDbCommandインスタンスを生成する
 </summary>
	<param name="sqlCommandType">コマンド種別</param>
	<param name="commandText">実行するSQL文又は、ストアド名</param>
	<param name="useConn">使用するコネクション</param>
	<returns>指定されたタイプのインスタンス</returns>
	<remarks>
 コマンド種別に該当するISqlCommandのインスタンスを生成します。<br/>
		<list>
			<item><term>SelectText</term><description>ISelectCommand</description></item>
			<item><term>Select4Update</term><description>ISelect4UpdateCommand</description></item>
			<item><term>UpdateText</term><description>IUpdateCommand</description></item>
			<item><term>InsertText</term><description>IInsertCommand</description></item>
			<item><term>DeleteText</term><description>IDeleteCommand</description></item>
			<item><term>StoredProcedure</term><description>IStoredProcedureCommand</description></item>
			<item><term>DDL</term><description>IDDLCommand</description></item>
		</list>
	</remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.AbstractDao.CreateCommandSelect(System.String)">
	<summary>
 SELECT文を実行する為のDBCommandのラッパークラスを生成する。
 </summary>
	<param name="commandText">SELECT文文字列</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.AbstractDao.CreateCommandSelect4Update(System.String)">
	<summary>
 SELECT文を実行し、DataSetを使ってUPDATEする為のDBCommandのラッパークラスを生成する。
 </summary>
	<param name="commandText">SELECT文文字列</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.AbstractDao.CreateCommandInsert(System.String)">
	<summary>
 INSERT文を実行する為のDBCommandのラッパークラスを生成する。
 </summary>
	<param name="commandText">INSERT文文字列</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.AbstractDao.CreateCommandUpdate(System.String)">
	<summary>
 UPDATE文を実行する為のDBCommandのラッパークラスを生成する。
 </summary>
	<param name="commandText">UPDATE文文字列</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.AbstractDao.CreateCommandDelete(System.String)">
	<summary>
 DELETE文を実行する為のDBCommandのラッパークラスを生成する。
 </summary>
	<param name="commandText">DELETE文文字列</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.AbstractDao.CreateCommandStoredProcedure(System.String)">
	<summary>
 StoredProcedureを実行する為のDBCommandのラッパークラスを生成する。
 </summary>
	<param name="commandText">ストアド名</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.AbstractDao.CreateCommandDDL(System.String)">
	<summary>
 DDLを実行する為のDBCommandのラッパークラスを生成する。
 </summary>
	<param name="commandText">DDL文文字列</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.AbstractDao.ExecuteScalar(Moca.Db.IDbCommandSelect)">
	<summary>
 クエリを実行し、そのクエリが返す結果セットの最初の行にある最初の列を返します。余分な列または行は無視されます。
 </summary>
	<param name="commandWrapper"></param>
	<returns>結果セットの最初の行にある最初の列。</returns>
	<remarks>
 当メソッドは予めデータベースをオープンしておく必要がありますが、
 オープンされていないときは、自動でオープンして終了時にクローズします。<br/>
 詳細は、<seealso cref="M:System.Data.IDbCommand.ExecuteScalar"/> を参照してください。
 </remarks>
</member><member name="M:Moca.Db.AbstractDao.Execute(Moca.Db.IDbCommandSelect)">
	<summary>
 SELECT文の実行
 </summary>
	<param name="commandWrapper">SELECT文を実行する為のDBCommandのラッパーインスタンス</param>
	<returns>データ件数</returns>
	<remarks>
	</remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.AbstractDao.Execute``1(Moca.Db.IDbCommandSelect)">
	<summary>
 SELECT文の実行(ExecuteReader)
 </summary>
	<typeparam name="T">エンティティ</typeparam>
	<param name="commandWrapper">コマンドラッパー</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.AbstractDao.Execute(Moca.Db.IDbCommandSelect4Update)">
	<summary>
 SELECT文の実行(後にAdapterを利用した更新を行う場合)
 </summary>
	<param name="commandWrapper">SELECT文を実行する為のDBCommandのラッパーインスタンス</param>
	<returns>データ件数</returns>
	<remarks>
 SELECT実行後のデータ更新をDataSetを使って更新する場合は、こちらを使用してください。<br/>
 予めAdapterとCommandを関連付けます。
 </remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.AbstractDao.ExecuteNonQuery(Moca.Db.IDbCommandSql)">
	<summary>
 INSERT,UPDATE,DELETE文の実行
 </summary>
	<param name="commandWrapper">実行する為のDBCommandのラッパーインスタンス</param>
	<returns>更新件数</returns>
	<remarks>
	</remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.AbstractDao.UpdateAdapter(System.Data.DataSet,System.Data.IDbDataAdapter)">
	<summary>
 データを更新
 </summary>
	<param name="ds">データセットオブジェクト</param>
	<param name="adp">対象となるアダプター</param>
	<returns>DataSet で正常に追加または更新された行数</returns>
	<remarks>
 DataAdapterを使ってDataSet内の変更された情報により更新を行います。
 </remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.AbstractDao.CNothing(System.String)">
	<summary>
 文字列が空の時はNothingに変換
 </summary>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.AbstractDao.CNothing(System.Int32,System.Int32)">
	<summary>
 数値が0（デフォルト）の時はNothingに変換
 </summary>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.AbstractDao.fill(System.Data.DataSet@)">
	<summary>
 データを取得
 </summary>
	<param name="ds">取得したデータのデータセット</param>
	<returns>データ件数</returns>
	<remarks>
	</remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.AbstractDao.fill(System.Data.DataSet@,System.Data.IDbDataAdapter)">
	<summary>
 データを取得
 </summary>
	<param name="ds">取得したデータのデータセット</param>
	<param name="adp">アダプタ</param>
	<returns>データ件数</returns>
	<remarks>
 アダプタを使用して更新するときに使用する。
 </remarks>
</member><member name="M:Moca.Db.AbstractDao.fill(System.Data.DataSet@,System.String,System.Data.IDbDataAdapter)">
	<summary>
 データを取得
 </summary>
	<param name="ds">取得したデータのデータセット</param>
	<param name="DataSetName">データセットの名称</param>
	<param name="adapter">アダプタ</param>
	<returns>データ件数</returns>
	<remarks>
	</remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.AbstractDao.getResultOutParameter(Moca.Db.IDbCommandSql)">
	<summary>
 戻り値を取得する
 </summary>
	<param name="commandWrapper"></param>
	<remarks></remarks>
</member><member name="P:Moca.Db.AbstractDao.TransactionContext">
	<summary>
 トランザクション制御情報
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.AbstractDao._getTxConnection">
	<summary>
 DB接続
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.AbstractDao._getTransaction">
	<summary>
 トランザクション
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.AbstractDao._addExecuteHistory(System.Data.IDbCommand,System.Boolean)">
	<summary>
 コマンド実行履歴の追加
 </summary>
	<param name="cmd"></param>
	<remarks></remarks>
</member><member name="T:Moca.Db.AbstractDao">
	<summary>
 Data Access Object のインタフェースの実装抽象クラス
 </summary>
	<remarks>
 データベースアクセスする際に最低限必要と思われる機能を提供します。<br/>
 各システムで Data Access Object（DAO）を使用するときは、等クラスを継承します。<br/>
	</remarks>
</member><member name="F:Moca.Db.Attr.TransactionAttribute._scopeOption">
	<summary>追加オプション</summary>
</member><member name="F:Moca.Db.Attr.TransactionAttribute._isolationLevel">
	<summary>分離レベル</summary>
</member><member name="M:Moca.Db.Attr.TransactionAttribute.#ctor">
	<summary>
 デフォルトコンストラクタ
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Db.Attr.TransactionAttribute.#ctor(System.Transactions.TransactionScopeOption)">
	<summary>
 コンストラクタ
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Db.Attr.TransactionAttribute.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.IsolationLevel)">
	<summary>
 コンストラクタ
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Db.Attr.TransactionAttribute.CreateAspect(System.Reflection.MethodBase)">
	<summary>
 トランザクション用アスペクトを作成する
 </summary>
	<param name="method">メソッド</param>
	<returns>トランザクション用アスペクト</returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.Attr.TransactionAttribute">
	<summary>
 トランザクション属性
 </summary>
	<remarks>
 メソッド内の処理をトランザクションで括るときに指定する。
 </remarks>
</member><member name="F:Moca.Db.Attr.DbmsAttribute._appkey">
	<summary>キー値</summary>
</member><member name="M:Moca.Db.Attr.DbmsAttribute.#ctor(System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="appkey">アプリケーション構成のキー</param>
	<remarks></remarks>
</member><member name="P:Moca.Db.Attr.DbmsAttribute.Appkey">
	<summary>キー値</summary>
</member><member name="M:Moca.Db.Attr.DbmsAttribute.GetDbms">
	<summary>
 DBMSを返す
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.Attr.DbmsAttribute">
	<summary>
 DBMS属性
 </summary>
	<remarks>
		<see cref="T:Moca.Db.IDbAccess"/> クラスに DBMS を関連付けるときに使用する。
 </remarks>
</member><member name="F:Moca.Db.Attr.DaoAttribute._type">
	<summary>指定された実体化するクラスタイプ</summary>
</member><member name="M:Moca.Db.Attr.DaoAttribute.#ctor(System.String,System.Type)">
	<summary>
 コンストラクタ
 </summary>
	<param name="appkey">アプリケーション構成のキー</param>
	<param name="typ">クラスタイプ</param>
	<remarks></remarks>
</member><member name="P:Moca.Db.Attr.DaoAttribute.ImplType">
	<summary>
 クラスタイププロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.Attr.DaoAttribute.CreateComponent(System.Reflection.FieldInfo)">
	<summary>
 コンポーネント作成
 </summary>
	<param name="field">フィールド</param>
	<returns>DBMSコンポーネント</returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.Attr.DaoAttribute">
	<summary>
 DAO属性
 </summary>
	<remarks>
		<see cref="T:Moca.Db.IDao"/> を実装したクラスを指定する属性
 </remarks>
</member><member name="F:Moca.Attr.ImplementationAttributeAnalyzer._mylog">
	<summary>log4net logger</summary>
</member><member name="T:Moca.Attr.ImplementationAttributeAnalyzer">
	<summary>
 実態を指定する属性の解析
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.Attr.DaoAttributeAnalyzer._mylog">
	<summary>log4net logger</summary>
</member><member name="T:Moca.Db.Attr.DaoAttributeAnalyzer">
	<summary>
 DAO属性解析
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Install.ConfigProtectionInstaller.#ctor">
	<summary>
 デフォルトコンストラクタ
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Install.ConfigProtectionInstaller.Install(System.Collections.IDictionary)">
	<summary>
 インストール時のカスタム動作「インストール」処理
 </summary>
	<param name="stateSaver"></param>
	<remarks></remarks>
</member><member name="M:Moca.Install.ConfigProtectionInstaller.ProtectConfig">
	<summary>
 app.config ファイルの暗号化を行う
 </summary>
	<remarks></remarks>
</member><member name="T:Moca.Install.ConfigProtectionInstaller">
	<summary>
 インストール時にアプリケーション構成ファイルを暗号化する
 </summary>
	<remarks></remarks>
</member><member name="T:Moca.UpdateEntityValidate">
	<summary>
 エンティティに対してコントロールの値を設定する際に検証した結果を処理するデリゲート
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Moca.UpdateEntityValidateArgs.#ctor(System.Collections.Generic.IList{System.String})">
	<summary>
 コンストラクタ
 </summary>
	<param name="errorColumns"></param>
	<remarks></remarks>
</member><member name="P:Moca.UpdateEntityValidateArgs.EntityPropertyName">
	<summary>エンティティのプロパティ名</summary>
</member><member name="P:Moca.UpdateEntityValidateArgs.Caption">
	<summary>エンティティのプロパティキャプション</summary>
</member><member name="P:Moca.UpdateEntityValidateArgs.ValidateType">
	<summary>検証種別</summary>
</member><member name="P:Moca.UpdateEntityValidateArgs.ValidateResultType">
	<summary>検証結果</summary>
</member><member name="P:Moca.UpdateEntityValidateArgs.Min">
	<summary>最小値</summary>
</member><member name="P:Moca.UpdateEntityValidateArgs.Max">
	<summary>最大値</summary>
</member><member name="P:Moca.UpdateEntityValidateArgs.ValidateStop">
	<summary>検証の中止有無</summary>
</member><member name="P:Moca.UpdateEntityValidateArgs.Value">
	<summary>値</summary>
</member><member name="P:Moca.UpdateEntityValidateArgs.IsValid">
	<summary>検証結果</summary>
</member><member name="P:Moca.UpdateEntityValidateArgs.IsError(System.String)">
	<summary>
 エラー発生コントロールか返す
 </summary>
	<param name="caption"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.UpdateEntityValidateArgs">
	<summary>
 エンティティに対してコントロールの値を設定する際に検証した結果を処理するデリゲートの引数
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Entity.AbstractEntity._backup">
	<summary>バックアップ</summary>
</member><member name="F:Moca.Entity.AbstractEntity._inTxn">
	<summary>トランザクションフラグ</summary>
</member><member name="M:Moca.Entity.AbstractEntity.BeginEdit">
	<summary>
 オブジェクトの編集を開始
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Entity.AbstractEntity.CancelEdit">
	<summary>
 最後に <see cref="M:Moca.Entity.AbstractEntity.BeginEdit"></see> が呼び出された後に行われた変更を破棄
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Entity.AbstractEntity.EndEdit">
	<summary>
 対象となるオブジェクトに、最後に <see cref="M:Moca.Entity.AbstractEntity.BeginEdit"></see> または <see cref="M:System.ComponentModel.IBindingList.AddNew"></see> を呼び出した後に行われた変更を適用
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Entity.AbstractEntity.DeepCopy(System.Object)">
	<summary>
 オブジェクトのバックアップ時にディープコピーするときはオーバーライドする
 </summary>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Moca.Entity.AbstractEntity.Restore(System.Object)">
	<summary>
 変更を破棄する時のリストア処理を実装する
 </summary>
	<param name="backup"></param>
	<remarks></remarks>
</member><member name="T:Moca.Entity.AbstractEntity">
	<summary>
 エンティティの抽象クラス
 </summary>
	<remarks>
 データ ソースとして使用されるオブジェクトの変更をコミットまたはロールバックする機能の共通処理を実装
 </remarks>
</member><member name="F:Moca.Db.Tx.ScopeTxInterceptor._scopeOption">
	<summary>トランザクションオプション</summary>
</member><member name="F:Moca.Db.Tx.ScopeTxInterceptor._isolationLevel">
	<summary>分離レベル</summary>
</member><member name="F:Moca.Db.Tx.ScopeTxInterceptor._methodName">
	<summary>Aspectメソッド名</summary>
</member><member name="F:Moca.Db.Tx.ScopeTxInterceptor._mylog">
	<summary>Logging For Log4net</summary>
</member><member name="M:Moca.Db.Tx.ScopeTxInterceptor.#ctor(System.Object,System.Object)">
	<summary>
 コンストラクタ
 </summary>
	<param name="scopeOption"></param>
	<remarks></remarks>
</member><member name="M:Moca.Db.Tx.ScopeTxInterceptor.Invoke(Moca.Aop.IMethodInvocation)">
	<summary>
 メソッド実行
 </summary>
	<param name="invocation">Interceptorからインターセプトされているメソッドの情報</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.Tx.ScopeTxInterceptor.TransactionManager_DistributedTransactionStarted(System.Object,System.Transactions.TransactionEventArgs)">
	<summary>
 DTC 昇格が発生した場合のイベント
 </summary>
	<param name="sender"></param>
	<param name="d"></param>
	<remarks></remarks>
</member><member name="M:Moca.Db.Tx.ScopeTxInterceptor.TransactionCompleted_OnCommitted(System.Object,System.Transactions.TransactionEventArgs)">
	<summary>
 トランザクション完了イベント
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:Moca.Db.Tx.ScopeTxInterceptor">
	<summary>
 スコープトランザクション処理のインターセプター
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.Tx.Local.LocalTransactionScope._mgr">
	<summary>トランザクションマネージャー</summary>
</member><member name="F:Moca.Db.Tx.Local.LocalTransactionScope._dao">
	<summary>Dao</summary>
</member><member name="F:Moca.Db.Tx.Local.LocalTransactionScope._localTxContext">
	<summary>ローカルトランザクションコンテキスト</summary>
</member><member name="F:Moca.Db.Tx.Local.LocalTransactionScope._txContext">
	<summary>ローカルトランザクション</summary>
</member><member name="F:Moca.Db.Tx.Local.LocalTransactionScope._mylog">
	<summary>Logging For Log4net</summary>
</member><member name="M:Moca.Db.Tx.Local.LocalTransactionScope.#ctor(System.Object,System.Object,Moca.Db.IDao)">
	<summary>
 コンストラクタ
 </summary>
	<param name="scopeOption">スコープオプション</param>
	<remarks></remarks>
</member><member name="P:Moca.Db.Tx.Local.LocalTransactionScope.Dao">
	<summary>
 Dao
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.Tx.Local.LocalTransactionScope.Dbms">
	<summary>
 DBMS
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.Tx.Local.LocalTransactionScope.TransactionContext">
	<summary>
 ローカルトランザクションコンテキスト
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.Tx.Local.LocalTransactionScope.TransactionContextHashCode">
	<summary>
 ローカルトランザクションコンテキストハッシュコード
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.Tx.Local.LocalTransactionScope">
	<summary>
 トランザクション属性がついたメソッド一つ分のスコープ
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.Tx.Local.TransactionContext._dbms">
	<summary>DBMS</summary>
</member><member name="F:Moca.Db.Tx.Local.TransactionContext._conn">
	<summary>接続</summary>
</member><member name="F:Moca.Db.Tx.Local.TransactionContext._tx">
	<summary>トランザクション</summary>
</member><member name="F:Moca.Db.Tx.Local.TransactionContext._rollbackStatus">
	<summary>ロールバック有無</summary>
</member><member name="F:Moca.Db.Tx.Local.TransactionContext._isolationLevel">
	<summary>分離レベル</summary>
</member><member name="F:Moca.Db.Tx.Local.TransactionContext._mylog">
	<summary>Logging For Log4net</summary>
</member><member name="M:Moca.Db.Tx.Local.TransactionContext.#ctor(Moca.Db.Dbms,System.Transactions.IsolationLevel)">
	<summary>
 コンストラクタ
 </summary>
	<param name="dbms"></param>
	<remarks></remarks>
</member><member name="T:Moca.Db.Tx.Local.TransactionContext">
	<summary>
 トランザクション情報
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.Tx.Local.LocalTransactionContext._mgr">
	<summary>ローカルトランザクションマネージャー</summary>
</member><member name="F:Moca.Db.Tx.Local.LocalTransactionContext._parentLocalTxContext">
	<summary>親のコンテキスト</summary>
</member><member name="F:Moca.Db.Tx.Local.LocalTransactionContext._scopes">
	<summary>当コンテキストで扱うスコープたち</summary>
</member><member name="F:Moca.Db.Tx.Local.LocalTransactionContext._localTxContext">
	<summary>当コンテキストで扱うトランザクション情報たち</summary>
</member><member name="F:Moca.Db.Tx.Local.LocalTransactionContext._isolationLevel">
	<summary>分離レベル</summary>
</member><member name="F:Moca.Db.Tx.Local.LocalTransactionContext._mylog">
	<summary>Logging For Log4net</summary>
</member><member name="M:Moca.Db.Tx.Local.LocalTransactionContext.#ctor(Moca.Db.Tx.Local.LocalTransactionManager,System.Transactions.IsolationLevel)">
	<summary>
 コンストラクタ
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Db.Tx.Local.LocalTransactionContext.#ctor(Moca.Db.Tx.Local.LocalTransactionManager,System.Transactions.IsolationLevel,Moca.Db.Tx.Local.LocalTransactionContext)">
	<summary>
 コンストラクタ
 </summary>
	<remarks></remarks>
</member><member name="P:Moca.Db.Tx.Local.LocalTransactionContext.ParentScope">
	<summary>
 親のコンテキスト
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.Tx.Local.LocalTransactionContext.RollbackStatus">
	<summary>
 ロールバックステータス
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Moca.Db.Tx.Local.LocalTransactionContext.IsolationLevel">
	<summary>
 分離レベル
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.Tx.Local.LocalTransactionContext.TransactionContext(Moca.Db.Tx.Local.LocalTransactionScope)">
	<summary>
 トランザクションコンテキスト
 </summary>
	<param name="val"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.Tx.Local.LocalTransactionContext.Add(Moca.Db.Tx.Local.LocalTransactionScope)">
	<summary>
 トランザクションメソッドコンテキスト追加
 </summary>
	<param name="context"></param>
	<remarks></remarks>
</member><member name="M:Moca.Db.Tx.Local.LocalTransactionContext.Remove(Moca.Db.Tx.Local.LocalTransactionScope)">
	<summary>
 トランザクションメソッドコンテキスト削除
 </summary>
	<param name="context"></param>
	<remarks></remarks>
</member><member name="M:Moca.Db.Tx.Local.LocalTransactionContext.Complete">
	<summary>
 トランザクション終了
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Db.Tx.Local.LocalTransactionContext.Rollback">
	<summary>
 トランザクションロールバック
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Db.Tx.Local.LocalTransactionContext._isLastTransaction">
	<summary>
 最終のトランザクションかどうか
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.Tx.Local.LocalTransactionContext">
	<summary>
 ローカルトランザクションコンテキスト
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.Tx.Local.LocalTransactionManager._localTxContexts">
	<summary>ローカルトランザクションコンテキストたち</summary>
</member><member name="F:Moca.Db.Tx.Local.LocalTransactionManager._currentLocalTxContext">
	<summary>カレントのローカルトランザクションコンテキスト</summary>
</member><member name="F:Moca.Db.Tx.Local.LocalTransactionManager._mylog">
	<summary>Logging For Log4net</summary>
</member><member name="M:Moca.Db.Tx.Local.LocalTransactionManager.#ctor">
	<summary>
 デフォルトコンストラクタ
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Db.Tx.Local.LocalTransactionManager.GetLocalTransactionContext(System.Object,System.Object)">
	<summary>
 コンテキスト返す
 </summary>
	<param name="scopeOption"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.Tx.Local.LocalTransactionManager.RemoveScope(Moca.Db.Tx.Local.LocalTransactionContext)">
	<summary>
 コンテキスト削除する
 </summary>
	<param name="val"></param>
	<remarks></remarks>
</member><member name="T:Moca.Db.Tx.Local.LocalTransactionManager">
	<summary>
 ローカルトランザクションマネージャー
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.Tx.LocalTxInterceptor._scopeOption">
	<summary>スコープオプション</summary>
</member><member name="F:Moca.Db.Tx.LocalTxInterceptor._isolationLevel">
	<summary>分離レベル</summary>
</member><member name="F:Moca.Db.Tx.LocalTxInterceptor._mylog">
	<summary>Logging For Log4net</summary>
</member><member name="M:Moca.Db.Tx.LocalTxInterceptor.#ctor(System.Object,System.Object)">
	<summary>
 コンストラクタ
 </summary>
	<param name="scopeOption">スコープオプション</param>
	<remarks></remarks>
</member><member name="M:Moca.Db.Tx.LocalTxInterceptor.Invoke(Moca.Aop.IMethodInvocation)">
	<summary>
 メソッド実行
 </summary>
	<param name="invocation">Interceptorからインターセプトされているメソッドの情報</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.Tx.LocalTxInterceptor">
	<summary>
 ローカルトランザクション処理のインターセプター
 </summary>
	<remarks></remarks>
</member><member name="P:Moca.Db.Tx.ITransactionContext.Transaction">
	<summary>
 トランザクションオブジェクト
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Moca.Db.Tx.ITransactionContext.IsAlreadyTransaction">
	<summary>
 既にトランザクションを開始しているかどうか
 </summary>
	<returns>True:開始している、False:開始していない</returns>
	<remarks></remarks>
</member><member name="P:Moca.Db.Tx.ITransactionContext.RollbackStatus">
	<summary>
 ロールバックステータス
 </summary>
	<value></value>
	<returns></returns>
	<remarks>True:ロールバックする、False:ロールバックしない</remarks>
</member><member name="M:Moca.Db.Tx.ITransactionContext.Start">
	<summary>
 トランザクションを開始する
 </summary>
	<remarks>
 トランザクションを使用する場合は事前にDBへの接続が必要な為、自動でDBとの接続を行います。<br/>
	</remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.Tx.ITransactionContext.Complete">
	<summary>
 トランザクションを完了する
 </summary>
	<remarks></remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="M:Moca.Db.Tx.ITransactionContext.Rollback">
	<summary>
 トランザクションをロールバックする
 </summary>
	<remarks>
 DBとの接続を切断します。
 </remarks>
	<exception cref="T:Moca.Db.DbAccessException">
 DBアクセスでエラーが発生した
 </exception>
</member><member name="T:Moca.Db.Tx.ITransactionContext">
	<summary>
 トランザクション制御情報インタフェース
 </summary>
	<remarks></remarks>
</member><member name="P:Moca.Db.ISQLStatementResult.IsDBOpen">
	<summary>
 DBをオープンしたかどうか
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.ISQLStatementResult.Result``1">
	<summary>
 結果を返す
 </summary>
	<typeparam name="T">エンティティ</typeparam>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.ISQLStatementResult.NextResult``1">
	<summary>
 次の結果を返す
 </summary>
	<typeparam name="T">エンティティ</typeparam>
	<returns>存在しないときは Nothing をかえす</returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.ISQLStatementResult">
	<summary>
 SQL ステートメントの結果インタフェース
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.Interceptor.TableInfoInterceptor._info">
	<summary>Table</summary>
</member><member name="F:Moca.Db.Interceptor.TableInfoInterceptor._mylog">
	<summary>Logging For Log4net</summary>
</member><member name="M:Moca.Db.Interceptor.TableInfoInterceptor.#ctor(Moca.Db.DbInfoTable)">
	<summary>
 コンストラクタ
 </summary>
	<remarks></remarks>
</member><member name="T:Moca.Db.Interceptor.TableInfoInterceptor">
	<summary>
 DBのカラム情報を返す Getter メソッドインターセプター
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.Attr.TableAttributeAnalyzer._mylog">
	<summary>Logging For Log4net</summary>
</member><member name="T:Moca.Db.Attr.TableAttributeAnalyzer">
	<summary>
 テーブル属性の解析
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.Attr.TableAttribute._appkey">
	<summary>コネクションストリングのキー値</summary>
</member><member name="F:Moca.Db.Attr.TableAttribute._tableName">
	<summary>テーブル名</summary>
</member><member name="F:Moca.Db.Attr.TableAttribute._mylog">
	<summary>Logging For Log4net</summary>
</member><member name="M:Moca.Db.Attr.TableAttribute.#ctor(System.String,System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="appkey">アプリケーション構成のキー</param>
	<param name="tableName">テーブル名</param>
	<remarks></remarks>
</member><member name="P:Moca.Db.Attr.TableAttribute.Appkey">
	<summary>キー値</summary>
</member><member name="P:Moca.Db.Attr.TableAttribute.TableName">
	<summary>
 テーブル名プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.Attr.TableAttribute.CreateComponent(System.Object,System.Reflection.FieldInfo)">
	<summary>
 コンポーネント作成
 </summary>
	<returns>コンポーネント</returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.Attr.TableAttribute">
	<summary>
 DBテーブル属性
 </summary>
	<remarks>
 DBテーブルの定義を表すクラスとする場合にこの属性を使う。<br/>
 DBから情報を取得する為にアプリケーション構成ファイルからコネクションストリングを取得します。
 </remarks>
</member><member name="F:Moca.Db.Interceptor.ColumnInfoInterceptor._info">
	<summary>桁数</summary>
</member><member name="F:Moca.Db.Interceptor.ColumnInfoInterceptor._mylog">
	<summary>Logging For Log4net</summary>
</member><member name="M:Moca.Db.Interceptor.ColumnInfoInterceptor.#ctor(Moca.Db.DbInfoColumn)">
	<summary>
 コンストラクタ
 </summary>
	<remarks></remarks>
</member><member name="T:Moca.Db.Interceptor.ColumnInfoInterceptor">
	<summary>
 DBのカラム情報を返す Getter メソッドインターセプター
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.Interceptor.AbstractDaoInterceptor._mylog">
	<summary>log4net logger</summary>
</member><member name="M:Moca.Db.Interceptor.AbstractDaoInterceptor.#ctor">
	<summary>
 コンストラクタ
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Db.Interceptor.AbstractDaoInterceptor.executeBegin(Moca.Db.IDao)">
	<summary>
 実行前
 </summary>
	<param name="dao"></param>
	<remarks></remarks>
</member><member name="M:Moca.Db.Interceptor.AbstractDaoInterceptor.executeEnd(Moca.Db.IDao)">
	<summary>
 実行後
 </summary>
	<param name="dao"></param>
	<remarks>
 エラー発生時でも実行されます。
 </remarks>
</member><member name="M:Moca.Db.Interceptor.AbstractDaoInterceptor.executeError(Moca.Db.IDao,System.Exception)">
	<summary>
 エラー発生時
 </summary>
	<param name="dao"></param>
	<remarks>
	</remarks>
</member><member name="T:Moca.Db.Interceptor.AbstractDaoInterceptor">
	<summary>
 DBアクセス実行時のインターセプター抽象クラス
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.Helper.OracleMSErrorNumbers.DuplicationPKey">
	<summary>重複エラーコード</summary>
</member><member name="F:Moca.Db.Helper.OracleMSErrorNumbers.LockTimeOut">
	<summary>タイムアウトエラーコード</summary>
	<remarks>
	</remarks>
</member><member name="F:Moca.Db.Helper.OracleMSErrorNumbers.LockTimeOutNoWait">
	<summary>タイムアウトエラーコード(nowait)</summary>
</member><member name="T:Moca.Db.Helper.OracleMSErrorNumbers">
	<summary>ＳＱＬエラーコード</summary>
</member><member name="F:Moca.Db.Helper.OracleMSAccessHelper._conn">
	<summary>ＳＱＬコネクション</summary>
</member><member name="M:Moca.Db.Helper.OracleMSAccessHelper.#ctor(Moca.Db.IDao)">
	<summary>
 コンストラクタ
 </summary>
	<param name="dba">使用するデータベースアクセス</param>
	<remarks></remarks>
</member><member name="M:Moca.Db.Helper.OracleMSAccessHelper.getColumnMaxLength(System.Data.DataRow,System.Int32@,System.Int32@)">
	<summary>
 列の最大桁数を返す
 </summary>
	<param name="row">行データ</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Db.Helper.OracleMSAccessHelper.getColumnLength(System.Data.DataRow)">
	<summary>
 列の桁数を返します。
 </summary>
	<param name="row">行データ</param>
	<returns>テーブル又は列が存在しないときや、桁数の指定が不要な型の時は DBNull.Value を返します。</returns>
	<remarks>
 バイナリ データ、文字データ、またはテキスト/イメージ データの最大長 (文字単位)。
 それ以外の場合は、NULL が返されます。
 </remarks>
</member><member name="M:Moca.Db.Helper.OracleMSAccessHelper.getColumnPrecision(System.Data.DataRow)">
	<summary>
 列の桁数を返します。
 </summary>
	<param name="row">行データ</param>
	<returns>テーブル又は列が存在しないときや、桁数の指定が不要な型の時は DBNull.Value を返します。</returns>
	<remarks>
 概数データ、真数データ、整数データ、または通貨データの有効桁数。それ以外の場合は、NULL が返されます。
 </remarks>
</member><member name="M:Moca.Db.Helper.OracleMSAccessHelper.getColumnScale(System.Data.DataRow)">
	<summary>
 列の桁数を返します。
 </summary>
	<param name="row">行データ</param>
	<returns>テーブル又は列が存在しないときや、桁数の指定が不要な型の時は DBNull.Value を返します。</returns>
	<remarks>
 概数データ、真数データ、整数データ、または通貨データの桁数。それ以外の場合は、NULL が返されます。
 </remarks>
</member><member name="M:Moca.Db.Helper.OracleMSAccessHelper.getColumnDbType``1(System.Data.DataRow)">
	<summary>
 列の型をかえします。
 </summary>
	<typeparam name="T">使用する型のDbTypeを指定する</typeparam>
	<param name="row">行データ</param>
	<returns>テーブル又は列が存在しないときは DBNull.Value を返します。</returns>
	<remarks>
 SQLServer は numeric は SqlDbType には存在しないから Decimal にマップします。
 </remarks>
</member><member name="M:Moca.Db.Helper.OracleMSAccessHelper.isUniCode(System.String)">
	<summary>
 型がUniCodeか判定
 </summary>
	<param name="typ"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.Helper.OracleMSAccessHelper">
	<summary>
 MS Oracle ドライバー用ヘルパークラス
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Db.Helper.OleDbSQLAccessHelper.#ctor(Moca.Db.IDao)">
	<summary>
 コンストラクタ
 </summary>
	<param name="dba">使用するデータベースアクセス</param>
	<remarks></remarks>
</member><member name="F:Moca.Db.Helper.OleDbOracleErrorNumbers.DuplicationPKey">
	<summary>重複エラーコード</summary>
</member><member name="F:Moca.Db.Helper.OleDbOracleErrorNumbers.LockTimeOut">
	<summary>タイムアウトエラーコード</summary>
	<remarks>
	</remarks>
</member><member name="F:Moca.Db.Helper.OleDbOracleErrorNumbers.LockTimeOutNoWait">
	<summary>タイムアウトエラーコード(nowait)</summary>
</member><member name="F:Moca.Db.Helper.OleDbOracleErrorNumbers.TableCompatibilityRestrictions">
	<summary>
 指定した値は、列またはテーブルの整合性制約に違反しました。
 </summary>
	<remarks></remarks>
</member><member name="T:Moca.Db.Helper.OleDbOracleErrorNumbers">
	<summary>ＳＱＬエラーコード</summary>
</member><member name="M:Moca.Db.Helper.OleDbOraAccessHelper.#ctor(Moca.Db.IDao)">
	<summary>
 コンストラクタ
 </summary>
	<param name="dba">使用するデータベースアクセス</param>
	<remarks></remarks>
</member><member name="T:Moca.Db.Helper.OleDbOraAccessHelper">
	<summary>
	</summary>
	<remarks>
 スキーマ コレクションについて<br/>
 http://msdn.microsoft.com/ja-jp/library/vstudio/ms254969(v=vs.80).aspx
 </remarks>
</member><member name="F:Moca.Db.Helper.OdbcErrorNumbers.TimeOut">
	<summary>タイムアウトエラーコード</summary>
</member><member name="T:Moca.Db.Helper.OdbcErrorNumbers">
	<summary>ＳＱＬエラーコード</summary>
</member><member name="F:Moca.Db.Helper.OdbcAccessHelper._conn">
	<summary>ＳＱＬコネクション</summary>
</member><member name="M:Moca.Db.Helper.OdbcAccessHelper.#ctor(Moca.Db.IDao)">
	<summary>
 コンストラクタ
 </summary>
	<param name="dba">使用するデータベースアクセス</param>
	<remarks></remarks>
</member><member name="F:Moca.Db.Helper.DbAccessHelperFactory._dbSetting">
	<summary>構成ファイルの接続文字列セクション又はDB接続文字列を管理</summary>
</member><member name="M:Moca.Db.Helper.DbAccessHelperFactory.#ctor(Moca.Db.DbSetting)">
	<summary>
 コンストラクタ
 </summary>
	<param name="dbSetting"></param>
	<remarks></remarks>
</member><member name="M:Moca.Db.Helper.DbAccessHelperFactory.Create(Moca.Db.IDao)">
	<summary>
 ヘルパークラス生成
 </summary>
	<param name="dba"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.Helper.DbAccessHelperFactory">
	<summary>
 ヘルパークラスのファクトリー
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.ExecuteReaderResult._dbOpen">
	<summary>
 DBをオープンしたかどうか
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.ExecuteReaderResult._reader">
	<summary>
 Select結果
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Db.ExecuteReaderResult._mylog">
	<summary>Logging For Log4net</summary>
</member><member name="M:Moca.Db.ExecuteReaderResult.#ctor(System.Data.IDbCommand,System.Boolean,System.Data.IDataReader)">
	<summary>
 コンストラクタ
 </summary>
	<param name="cmd">DBコマンド</param>
	<param name="dbOpen">DBオープン有無</param>
	<param name="reader">Select結果の<see cref="T:System.Data.IDataReader"></see></param>
	<remarks></remarks>
</member><member name="P:Moca.Db.ExecuteReaderResult.IsDBOpen">
	<summary>
 DBをオープンしたかどうか
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Db.ExecuteReaderResult">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="P:Moca.Config.TransactionElement.Type">
	<summary>
 type 属性
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Config.TransactionElement">
	<summary>
 transactionType 要素
 </summary>
	<remarks></remarks>
</member><member name="P:Moca.Config.MocaSectionHandler.Transaction">
	<summary>
 transactionType 要素
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Config.MocaSectionHandler">
	<summary>
 moca セクション解析
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Config.MocaConfiguration._instance">
	<summary>シングルトン用インスタンス</summary>
</member><member name="F:Moca.Config.MocaConfiguration._mySection">
	<summary>セクションハンドラー</summary>
</member><member name="F:Moca.Config.MocaConfiguration._transactionType">
	<summary>トランザクションタイプ</summary>
</member><member name="M:Moca.Config.MocaConfiguration.#ctor">
	<summary>
 コンストラクタ
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Config.MocaConfiguration.#ctor(System.String)">
	<summary>
 コンストラクタ
 </summary>
	<remarks></remarks>
</member><member name="P:Moca.Config.MocaConfiguration.TransactionType">
	<summary>
 トランザクションタイプ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Config.MocaConfiguration.Section(System.String)">
	<summary>
 セクション
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Config.MocaConfiguration.getConfig">
	<summary>
 アプリケーション構成ファイルを取得する
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Config.MocaConfiguration._getMySection">
	<summary>
 アプリケーション構成ファイルからカスタムセクションを取得する
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Config.MocaConfiguration._getTransactionType">
	<summary>
 トランザクションタイプを取得
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Config.MocaConfiguration">
	<summary>
 app.config の moca セクション
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Attr.ValidateAttribute._validateType">
	<summary>チェック項目</summary>
</member><member name="F:Moca.Attr.ValidateAttribute._min">
	<summary>最小値</summary>
</member><member name="F:Moca.Attr.ValidateAttribute._max">
	<summary>最大値</summary>
</member><member name="M:Moca.Attr.ValidateAttribute.#ctor(Moca.Util.ValidateTypes,System.Object,System.Object)">
	<summary>
 コンストラクタ
 </summary>
	<param name="validateType">チェック項目</param>
	<param name="min">最小値</param>
	<param name="max">最大値</param>
	<remarks></remarks>
</member><member name="P:Moca.Attr.ValidateAttribute.ValidateType">
	<summary>
 チェック項目プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Attr.ValidateAttribute.Min">
	<summary>
 最小値プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Attr.ValidateAttribute.Max">
	<summary>
 最大値プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Attr.ValidateAttribute">
	<summary>
 検証属性
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Attr.IAttributeAnalyzer.Analyze(System.Type)">
	<summary>
 クラス解析
 </summary>
	<param name="target">対象となるオブジェクト</param>
	<returns>作成したコンポーネント</returns>
	<remarks></remarks>
</member><member name="M:Moca.Attr.IAttributeAnalyzer.Analyze(System.Object,System.Reflection.FieldInfo)">
	<summary>
 フィールド解析
 </summary>
	<param name="target">対象となるオブジェクト</param>
	<param name="field">フィールド</param>
	<returns>作成したコンポーネント</returns>
	<remarks></remarks>
</member><member name="M:Moca.Attr.IAttributeAnalyzer.Analyze(System.Type,System.Reflection.PropertyInfo)">
	<summary>
 プロパティ解析
 </summary>
	<param name="targetType">対象となるタイプ</param>
	<param name="prop">プロパティ</param>
	<returns>アスペクト配列</returns>
	<remarks></remarks>
</member><member name="M:Moca.Attr.IAttributeAnalyzer.Analyze(System.Type,System.Reflection.MethodInfo)">
	<summary>
 メソッド解析
 </summary>
	<param name="targetType">対象となるタイプ</param>
	<param name="method">メソッド</param>
	<returns>アスペクト配列</returns>
	<remarks></remarks>
</member><member name="M:Moca.Attr.IAttributeAnalyzer.Analyze(System.Type,System.Reflection.EventInfo)">
	<summary>
 イベント解析
 </summary>
	<param name="targetType">対象となるタイプ</param>
	<param name="method">イベント</param>
	<returns>アスペクト配列</returns>
	<remarks></remarks>
</member><member name="T:Moca.Attr.IAttributeAnalyzer">
	<summary>
 属性解析のインタフェース
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Attr.FormatAttribute._format">
	<summary>フォーマット</summary>
</member><member name="M:Moca.Attr.FormatAttribute.#ctor(System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="format">フォーマット</param>
	<remarks></remarks>
</member><member name="P:Moca.Attr.FormatAttribute.Format">
	<summary>
 フォーマットプロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Attr.FormatAttribute">
	<summary>
 フォーマット属性
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Attr.BindControlAttribute._name">
	<summary>コントロール名</summary>
</member><member name="M:Moca.Attr.BindControlAttribute.#ctor(System.String[])">
	<summary>
 コンストラクタ
 </summary>
	<param name="name">コントロール名</param>
	<remarks></remarks>
</member><member name="P:Moca.Attr.BindControlAttribute.ControlName">
	<summary>
 コントロール名プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Attr.BindControlAttribute">
	<summary>
 バインドコントロール属性
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Attr.CaptionAttribute._caption">
	<summary>キャプション</summary>
</member><member name="M:Moca.Attr.CaptionAttribute.#ctor(System.String)">
	<summary>
 コンストラクタ
 </summary>
	<param name="caption">キャプション</param>
	<remarks></remarks>
</member><member name="P:Moca.Attr.CaptionAttribute.Caption">
	<summary>
 キャプションプロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Attr.CaptionAttribute">
	<summary>
 キャプション属性
 </summary>
	<remarks></remarks>
</member><member name="T:Moca.Attr.MocaFieldInject">
	<summary>
 フィールドインジェクトデリゲート
 </summary>
	<param name="target">インジェクト対象となるインスタンス</param>
	<param name="field">対象となるフィールド定義</param>
	<param name="component">インジェクトするコンポーネント</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Attr.MocaEventDelegateInject">
	<summary>
 実装実験中
 </summary>
	<param name="parent"></param>
	<param name="obj"></param>
	<remarks></remarks>
</member><member name="F:Moca.Attr.AttributeAnalyzerTargets.Class">
	<summary>クラス</summary>
</member><member name="F:Moca.Attr.AttributeAnalyzerTargets.Field">
	<summary>フィールド</summary>
</member><member name="F:Moca.Attr.AttributeAnalyzerTargets.Interface">
	<summary>インタフェース</summary>
</member><member name="F:Moca.Attr.AttributeAnalyzerTargets.Method">
	<summary>メソッド</summary>
</member><member name="F:Moca.Attr.AttributeAnalyzerTargets.Property">
	<summary>プロパティ</summary>
</member><member name="T:Moca.Attr.AttributeAnalyzerTargets">
	<summary>
 属性解析するターゲット列挙型
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Attr.AttributeAnalyzer._analyzers">
	<summary>各種解析たち</summary>
</member><member name="F:Moca.Attr.AttributeAnalyzer._ignoreNamespace">
	<summary>解析を除外するNamespace</summary>
</member><member name="F:Moca.Attr.AttributeAnalyzer._injectMethod">
	<summary>フィールドインジェクトデリゲート</summary>
</member><member name="F:Moca.Attr.AttributeAnalyzer._injectEventDelegate">
	<summary>実装中</summary>
</member><member name="F:Moca.Attr.AttributeAnalyzer._mylog">
	<summary>log4net logger</summary>
</member><member name="M:Moca.Attr.AttributeAnalyzer.#ctor">
	<summary>
 デフォルトコンストラクタ
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Attr.AttributeAnalyzer.Create(System.Type)">
	<summary>
 クラスを解析してインスタンスを生成する
 </summary>
	<param name="typ"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Attr.AttributeAnalyzer.analyzeClass(System.Type)">
	<summary>
 フィールド解析
 </summary>
	<param name="target">対象となるオブジェクト</param>
	<returns>作成したコンポーネント</returns>
	<remarks></remarks>
</member><member name="M:Moca.Attr.AttributeAnalyzer.Analyze(System.Object)">
	<summary>
 解析
 </summary>
	<param name="target">対象となるオブジェクト</param>
	<remarks>
 解析を開始する前に解析した属性のアナライザーを追加してください。
 </remarks>
</member><member name="M:Moca.Attr.AttributeAnalyzer.analyze(System.Object,System.Reflection.FieldInfo)">
	<summary>
 フィールド解析
 </summary>
	<param name="target">対象となるオブジェクト</param>
	<param name="field">対象となるフィールド</param>
	<remarks></remarks>
</member><member name="M:Moca.Attr.AttributeAnalyzer.analyzeInterfaces(System.Type)">
	<summary>
 インタフェースの継承元を辿る
 </summary>
	<param name="targetTyp">対象のType</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Attr.AttributeAnalyzer.analyzeField(System.Object,System.Reflection.FieldInfo)">
	<summary>
 フィールド解析
 </summary>
	<param name="target">対象となるオブジェクト</param>
	<param name="field">フィールド</param>
	<returns>作成したコンポーネント</returns>
	<remarks></remarks>
</member><member name="M:Moca.Attr.AttributeAnalyzer.analyzeProperty(System.Type)">
	<summary>
 プロパティ解析
 </summary>
	<param name="targetType">対象となる型</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Attr.AttributeAnalyzer.analyzeProperty(System.Type,System.Reflection.PropertyInfo)">
	<summary>
 プロパティ解析
 </summary>
	<param name="typ">対象となる型</param>
	<param name="prop">プロパティ</param>
	<returns>アスペクト配列</returns>
	<remarks></remarks>
</member><member name="M:Moca.Attr.AttributeAnalyzer.analyzeMethod(System.Type)">
	<summary>
 メソッド解析
 </summary>
	<param name="targetType">対象となる型</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Attr.AttributeAnalyzer.analyzeMethod(System.Type,System.Reflection.MethodInfo)">
	<summary>
 メソッド解析
 </summary>
	<param name="typ">対象となる型</param>
	<param name="method">メソッド</param>
	<returns>アスペクト配列</returns>
	<remarks></remarks>
</member><member name="M:Moca.Attr.AttributeAnalyzer.analyzeEventDelegate(System.Object,System.Reflection.PropertyInfo)">
	<summary>
 イベントデリゲート解析
 </summary>
	<param name="parent"></param>
	<param name="prop"></param>
	<remarks></remarks>
</member><member name="M:Moca.Attr.AttributeAnalyzer.analyzeEvent(System.Type)">
	<summary>
 イベント解析
 </summary>
	<param name="targetType">対象となる型</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Attr.AttributeAnalyzer.analyzeEvent(System.Type,System.Reflection.EventInfo)">
	<summary>
 イベント解析
 </summary>
	<param name="typ">対象となる型</param>
	<param name="method">イベント</param>
	<returns>アスペクト配列</returns>
	<remarks></remarks>
</member><member name="M:Moca.Attr.AttributeAnalyzer.getInstance(Moca.Di.MocaComponent)">
	<summary>
 コンポーネントから実態化
 </summary>
	<param name="component"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Attr.AttributeAnalyzer.getInstance(System.Object,Moca.Di.MocaComponent)">
	<summary>
 コンポーネントから実態化
 </summary>
	<param name="component"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Attr.AttributeAnalyzer._isIgnore(System.String)">
	<summary>
 解析除外チェック
 </summary>
	<param name="val"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Attr.AttributeAnalyzer.FieldInject">
	<summary>
 フィールドインジェクションデリゲートプロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Attr.AttributeAnalyzer.EventDelegateInject">
	<summary>
 実装実験中
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Attr.AttributeAnalyzer.Add(Moca.Attr.AttributeAnalyzerTargets,Moca.Attr.IAttributeAnalyzer)">
	<summary>
 １属性解析を追加する
 </summary>
	<param name="attributeTarget">解析ターゲット</param>
	<param name="analyzer">属性解析機</param>
	<remarks></remarks>
</member><member name="M:Moca.Attr.AttributeAnalyzer.AddIgnoreNamespace(System.String)">
	<summary>
 解析を除外するNamespaceを追加する
 </summary>
	<param name="val"></param>
	<remarks></remarks>
</member><member name="M:Moca.Attr.AttributeAnalyzer.inject(System.Object,System.Reflection.FieldInfo,Moca.Di.MocaComponent)">
	<summary>
 フィールドへインスタンスの注入
 </summary>
	<param name="target">対象となるオブジェクト</param>
	<param name="field">対象となるフィールド</param>
	<param name="component">対象となるコンポーネント</param>
	<returns>生成したインスタンス</returns>
	<remarks></remarks>
</member><member name="T:Moca.Attr.AttributeAnalyzer">
	<summary>
 属性解析
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Attr.AspectAttributeAnalyzer._mylog">
	<summary>log4net logger</summary>
</member><member name="T:Moca.Attr.AspectAttributeAnalyzer">
	<summary>
 アスペクト属性解析
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Attr.AspectAttribute._type">
	<summary>指定された実体化するクラスタイプ</summary>
</member><member name="M:Moca.Attr.AspectAttribute.#ctor(System.Type)">
	<summary>
 コンストラクタ
 </summary>
	<param name="typ">クラスタイプ</param>
	<remarks></remarks>
</member><member name="P:Moca.Attr.AspectAttribute.ImplType">
	<summary>
 クラスタイププロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Attr.AspectAttribute.CreateAspect(System.Reflection.MethodBase)">
	<summary>
 アスペクトを作成する
 </summary>
	<param name="method">メソッド</param>
	<returns>アスペクト</returns>
	<remarks></remarks>
</member><member name="M:Moca.Attr.AspectAttribute.CreateAspect(System.Reflection.EventInfo)">
	<summary>
 アスペクトを作成する
 </summary>
	<param name="method">メソッド</param>
	<returns>アスペクト</returns>
	<remarks></remarks>
</member><member name="T:Moca.Attr.AspectAttribute">
	<summary>
 アスペクト属性
 </summary>
	<remarks>
 アスペクトしたいときに指定する。
 メソッドのみ指定可能です。
 </remarks>
</member><member name="F:Moca.Aop.Pointcut._patterns">
	<summary>メソッド名の文字列リスト</summary>
</member><member name="M:Moca.Aop.Pointcut.#ctor(System.String[])">
	<summary>
 コンストラクタ
 </summary>
	<param name="names">メソッド名の文字列配列</param>
	<remarks></remarks>
</member><member name="P:Moca.Aop.Pointcut.Names">
	<summary>
 メソッド名の文字列リスト
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Aop.Pointcut.IsExecution(System.String)">
	<summary>
 引数で渡されたメソッド名にAdviceを挿入するか確認します。
 </summary>
	<param name="pattern">メソッド名</param>
	<returns>TrueならAdviceを挿入する、FalseならAdviceは挿入されない</returns>
	<remarks></remarks>
</member><member name="T:Moca.Aop.Pointcut">
	<summary>
 Joinpointのうち、Adviceを適用したいJoinpointを正規表現などを用いた条件を使用して絞り込むためのフィルタです。
 例えば、Adviceを適用したいのは「add」ではじまるメソッドが実行された時だけだとすると、
 条件を「add*」として絞り込まれたaddXxxメソッドが実行された時だけにAdviceが実行されるようにもできます。
 ここでは指定されたメソッド文字列が一致するときだけAdviceが実行されるようにします。
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Aop.MethodInvocation._this">
	<summary>実行対象のインスタンス</summary>
</member><member name="F:Moca.Aop.MethodInvocation._method">
	<summary>メソッド定義</summary>
</member><member name="F:Moca.Aop.MethodInvocation._args">
	<summary>メソッドの引数</summary>
</member><member name="F:Moca.Aop.MethodInvocation._advice">
	<summary>実行するAdvice(Interceptor)</summary>
</member><member name="F:Moca.Aop.MethodInvocation._nextInvocation">
	<summary>次に実行するInterceptorからインターセプトされているメソッドの情報</summary>
</member><member name="M:Moca.Aop.MethodInvocation.#ctor(System.Object,System.Reflection.MethodBase,System.Object[])">
	<summary>
 コンストラクタ
 </summary>
	<param name="this">実行対象となるインスタンス</param>
	<param name="method">実行対象となるメソッド定義</param>
	<param name="args">実行するメソッドの引数配列</param>
	<remarks></remarks>
</member><member name="M:Moca.Aop.MethodInvocation.#ctor(Moca.Aop.IMethodInterceptor,Moca.Aop.MethodInvocation)">
	<summary>
 コンストラクタ
 </summary>
	<param name="interceptor">実行するAdvice</param>
	<param name="forwardInvocation">一つ前のInterceptorからインターセプトされているメソッドの情報</param>
	<remarks></remarks>
</member><member name="P:Moca.Aop.MethodInvocation.NextInvocation">
	<summary>
 次に実行するInterceptorからインターセプトされているメソッドの情報 プロパティ
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Moca.Aop.MethodInvocation.Advice">
	<summary>
 実行するAdvice(Interceptor) プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Aop.MethodInvocation">
	<summary>
 Interceptorからインターセプトされているメソッドの情報
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Aop.IPointcut.IsExecution(System.String)">
	<summary>
 引数で渡されたメソッド名にAdviceを挿入するか確認します。
 </summary>
	<param name="pattern">メソッド名</param>
	<returns>TrueならAdviceを挿入する、FalseならAdviceは挿入されない</returns>
	<remarks></remarks>
</member><member name="T:Moca.Aop.IPointcut">
	<summary>
 Joinpointのうち、Adviceを適用したいJoinpointを正規表現などを用いた条件を使用して絞り込むためのフィルタです。
 例えば、Adviceを適用したいのは「add」ではじまるメソッドが実行された時だけだとすると、
 条件を「add*」として絞り込まれたaddXxxメソッドが実行された時だけにAdviceが実行されるようにもできますし、
 指定されたメソッド名が一致するときだけAdviceが実行されるようにするなどのフィルタを作成します。
 </summary>
	<remarks></remarks>
</member><member name="T:Moca.Aop.IMethodInvocation">
	<summary>
 Interceptorからインターセプトされているメソッドの情報にアクセスするためのインターフェイス
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Aop.IMethodInterceptor.Invoke(Moca.Aop.IMethodInvocation)">
	<summary>
 メソッド実行
 </summary>
	<param name="invocation">Interceptorからインターセプトされているメソッドの情報</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Aop.IMethodInterceptor">
	<summary>
 メソッドに対するInterceptorのインターフェイス
 </summary>
	<remarks></remarks>
</member><member name="P:Moca.Aop.IJoinpoint.Method">
	<summary>
 メソッド定義
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Aop.IJoinpoint.This">
	<summary>
 実行対象のインスタンス
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Aop.IJoinpoint.Proceed">
	<summary>
 実行
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Aop.IJoinpoint">
	<summary>
 プロパティが利用された時やメソッドが呼び出された時など、Advice（振る舞い）を割り込ませることが可能なときのことです。
 なおAOPの実装によっては、「プロパティの利用はJoinpointにならない」「メソッドが呼び出されたときだけがJoinpointになる」などのように異なります。
 </summary>
	<remarks></remarks>
</member><member name="P:Moca.Aop.IInvocation.Args">
	<summary>
 メソッドの引数 プロパティ
 </summary>
	<value>オブジェクト配列</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Aop.IInvocation">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="T:Moca.Aop.IInterceptor">
	<summary>
 Interceptorのインターフェイス
 </summary>
	<remarks></remarks>
</member><member name="P:Moca.Aop.IAspect.Advice">
	<summary>
 Advice(Interceptor) プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Aop.IAspect.Pointcut">
	<summary>
 Pointcut プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Aop.IAspect">
	<summary>
 横断的な関心事が持つ振る舞い（処理のこと）と、いつ振る舞いを適用するかを関連付けします。
 Advice(Interceptor)とPointcutをまとめたものをAspect(アスペクト)といいます。
 </summary>
	<remarks></remarks>
</member><member name="T:Moca.Aop.IAdvice">
	<summary>
 Joinpointで実行される処理です。
 例えば、オブジェクトから分離されたログ出力などの処理はAdviceと呼ばれ、Joinpointで実行されます。
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Aop.Aspect._advice">
	<summary>Advice(Interceptor)</summary>
</member><member name="F:Moca.Aop.Aspect._adviceType">
	<summary>Advice(Interceptor)の型</summary>
</member><member name="F:Moca.Aop.Aspect._pointcut">
	<summary>Pointcut</summary>
</member><member name="M:Moca.Aop.Aspect.#ctor(Moca.Aop.IMethodInterceptor,Moca.Aop.IPointcut)">
	<summary>
 コンストラクタ
 </summary>
	<param name="advice">Advice(Interceptor)</param>
	<param name="pointcut">Pointcut</param>
	<remarks></remarks>
</member><member name="M:Moca.Aop.Aspect.#ctor(System.Type,Moca.Aop.IPointcut)">
	<summary>
 コンストラクタ
 </summary>
	<param name="adviceType">Advice(Interceptor)の型</param>
	<param name="pointcut">Pointcut</param>
	<remarks></remarks>
</member><member name="P:Moca.Aop.Aspect.Advice">
	<summary>
 Advice(Interceptor) プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Aop.Aspect.Pointcut">
	<summary>
 Pointcut プロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Aop.Aspect">
	<summary>
 横断的な関心事が持つ振る舞い（処理のこと）と、いつ振る舞いを適用するかを関連付けします。
 Advice(Interceptor)とPointcutをまとめたものをAspect(アスペクト)といいます。
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Aop.AopProxy._type">
	<summary>透過的プロクシを作成する型</summary>
</member><member name="F:Moca.Aop.AopProxy._aspects">
	<summary>適用する Aspect 配列</summary>
</member><member name="F:Moca.Aop.AopProxy._target">
	<summary>透過的プロクシを作成するインスタンス</summary>
</member><member name="M:Moca.Aop.AopProxy.#ctor(System.Object)">
	<summary>
 コンストラクタ
 </summary>
	<param name="target">透過的プロクシを作成するインスタンス</param>
	<remarks></remarks>
</member><member name="M:Moca.Aop.AopProxy.#ctor(System.Type)">
	<summary>
 コンストラクタ
 </summary>
	<param name="type">透過的プロクシを作成する型</param>
	<remarks></remarks>
</member><member name="M:Moca.Aop.AopProxy.#ctor(System.Type,Moca.Aop.IAspect[])">
	<summary>
 コンストラクタ
 </summary>
	<param name="type">透過的プロクシを作成する型</param>
	<param name="aspects">適用する Aspect 配列</param>
	<remarks></remarks>
</member><member name="M:Moca.Aop.AopProxy.#ctor(System.Type,Moca.Aop.IAspect[],System.Object)">
	<summary>
 コンストラクタ
 </summary>
	<param name="type">透過的プロクシを作成する型</param>
	<param name="aspects">適用する Aspect 配列</param>
	<param name="target">透過的プロクシを作成するインスタンス</param>
	<remarks></remarks>
</member><member name="M:Moca.Aop.AopProxy.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
	<summary>
 IMessage で指定されたメソッドを、現在のインスタンスが表すリモート オブジェクトで呼び出します。
 </summary>
	<param name="msg">メソッドの呼び出しに関する情報</param>
	<returns>呼び出されたメソッドが返すメッセージで、out パラメータまたは ref パラメータのどちらかと戻り値を格納しているメッセージ。</returns>
	<remarks></remarks>
</member><member name="M:Moca.Aop.AopProxy.AddAspect(Moca.Aop.IAspect)">
	<summary>
 適用する Aspect を追加する
 </summary>
	<param name="aspect">Aspect インスタンス</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Aop.AopProxy.AddAspect(Moca.Aop.IMethodInterceptor,Moca.Aop.IPointcut)">
	<summary>
 適用する Aspect を追加する
 </summary>
	<param name="advice">Advice(Interceptor)</param>
	<param name="pointcut">Pointcut</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Aop.AopProxy.Create">
	<summary>
 透過的プロクシを返す
 </summary>
	<returns>透過的プロクシのインスタンス</returns>
	<remarks></remarks>
</member><member name="M:Moca.Aop.AopProxy.Create``1">
	<summary>
 透過的プロクシを返す
 </summary>
	<typeparam name="T">透過的プロクシのインスタンスの型</typeparam>
	<returns>透過的プロクシのインスタンス</returns>
	<remarks></remarks>
</member><member name="T:Moca.Aop.AopProxy">
	<summary>
 透過的プロクシ
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Ad.AdUtil._path">
	<summary>Directory Path</summary>
</member><member name="F:Moca.Ad.AdUtil._filterAttribute">
	<summary>属性</summary>
</member><member name="F:Moca.Ad.AdUtil._mylog">
	<summary>Logging For Log4net</summary>
</member><member name="M:Moca.Ad.AdUtil.IsAuthenticated(System.String,System.String,System.String,System.String)">
	<summary>
 ログインしているユーザーがActive Directoryサービスに登録されているか確認します。
 </summary>
	<param name="domain">ドメイン名</param>
	<param name="username">ユーザー名</param>
	<param name="pwd">パスワード</param>
	<returns>
 True: 登録されている。<br/>
 False: 登録されていない。<br/>
	</returns>
	<remarks></remarks>
</member><member name="T:Moca.Ad.AdUtil">
	<summary>
 Active Directoryサービスへアクセスするためのメソッド集
 </summary>
	<remarks></remarks>
</member><member name="T:Moca.Action.ActionManager">
	<summary>
	</summary>
	<remarks></remarks>
</member>
</members>
</doc>