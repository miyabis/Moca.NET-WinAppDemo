<?xml version="1.0"?>
<doc>
<assembly>
<name>
MocaWin
</name>
</assembly>
<members>
<member name="F:Moca.Win.TabControlHelper._tab">
	<summary>操作するタブコントロール</summary>
</member><member name="M:Moca.Win.TabControlHelper.#ctor(System.Windows.Forms.TabControl)">
	<summary>
 コンストラクタ
 </summary>
	<param name="tab">操作するタブコントロール</param>
	<remarks></remarks>
</member><member name="M:Moca.Win.TabControlHelper.AddPage(System.Windows.Forms.Form)">
	<summary>
 タブページとして画面を追加する
 </summary>
	<param name="frm">追加するフォーム</param>
	<remarks></remarks>
</member><member name="M:Moca.Win.TabControlHelper.AddPage(System.Type)">
	<summary>
 タブページとして画面を追加する
 </summary>
	<param name="frmType">追加するフォームの型</param>
	<remarks></remarks>
</member><member name="T:Moca.Win.TabControlHelper">
	<summary>
 タブコントロールの制御を行うクラス
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Win.DataGridViewHelper.CellType.Button">
	<summary>ボタン</summary>
</member><member name="F:Moca.Win.DataGridViewHelper.CellType.CheckBox">
	<summary>チェックボックス</summary>
</member><member name="F:Moca.Win.DataGridViewHelper.CellType.ComboBox">
	<summary>コンボボックス</summary>
</member><member name="F:Moca.Win.DataGridViewHelper.CellType.Image">
	<summary>イメージ</summary>
</member><member name="F:Moca.Win.DataGridViewHelper.CellType.Link">
	<summary>リンク</summary>
</member><member name="F:Moca.Win.DataGridViewHelper.CellType.TextBox">
	<summary>テキストボックス</summary>
</member><member name="T:Moca.Win.DataGridViewHelper.CellType">
	<summary>
 セルのコントロール種別
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Win.DataGridViewHelper._frozenIndex">
	<summary>固定列位置</summary>
</member><member name="F:Moca.Win.DataGridViewHelper._frozenCellStyle">
	<summary>固定列のセルスタイル</summary>
</member><member name="F:Moca.Win.DataGridViewHelper._grd">
	<summary>制御対象となるDataGridView</summary>
</member><member name="M:Moca.Win.DataGridViewHelper.#ctor(System.Windows.Forms.DataGridView)">
	<summary>
 コンストラクタ
 </summary>
	<param name="grd">制御するDataGridView</param>
	<remarks>
 指定されたグリッドを下記の状態に初期化します。<br/>
		<list>
			<item><description>固定列はなしとする。</description></item>
			<item><description>固定列のセルスタイルはデフォルトセルスタイルとする。</description></item>
			<item><description>列指定はクリアする。</description></item>
			<item><description>ヘッダー列のセルの内容の表示場所は <see cref="F:System.Windows.Forms.DataGridViewContentAlignment.MiddleCenter"/> とする。</description></item>
			<item><description><see cref="P:System.Windows.Forms.DataGridView.DataSource"/> 設定時の自動列作成をOFF (<c>AutoGenerateColumns</c> = False) </description></item>
		</list>
	</remarks>
</member><member name="P:Moca.Win.DataGridViewHelper.FrozenIndex">
	<summary>固定列位置</summary>
</member><member name="P:Moca.Win.DataGridViewHelper.FrozenCellStyle">
	<summary>固定列のセルスタイル</summary>
</member><member name="P:Moca.Win.DataGridViewHelper.DoubleBuffered">
	<summary>
 ダブルバッファー
 </summary>
	<value></value>
	<returns></returns>
	<remarks>
 表示のちらつきを抑えたいときはTrueにする
 </remarks>
</member><member name="M:Moca.Win.DataGridViewHelper.AddColumn(System.String,System.String,System.Int32,System.Windows.Forms.DataGridViewContentAlignment,System.String,Moca.Win.DataGridViewHelper.CellType)">
	<summary>
 列の追加
 </summary>
	<param name="propertyName">DBの列とバインディングする名称</param>
	<param name="caption">画面に表示するタイトル</param>
	<param name="width">列幅</param>
	<param name="align">データの表示位置</param>
	<param name="format">データの表示フォーマット</param>
	<param name="cellTyp">セルのコントロール種別</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Win.DataGridViewHelper.AddTxtColumn(System.String,System.String,System.Int32,System.Windows.Forms.DataGridViewContentAlignment,System.String)">
	<summary>
 テキストボックス表示の列を追加
 </summary>
	<param name="propertyName">DBの列とバインディングする名称</param>
	<param name="caption">画面に表示するタイトル</param>
	<param name="width">列幅</param>
	<param name="align">データの表示位置</param>
	<param name="format">データの表示フォーマット</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Win.DataGridViewHelper.AddCboColumn(System.String,System.String,System.Int32,System.Windows.Forms.DataGridViewContentAlignment,System.Data.DataTable,System.String,System.String,System.String)">
	<summary>
 コンボボックス表示の列を追加
 </summary>
	<param name="propertyName">DBの列とバインディングする名称</param>
	<param name="caption">画面に表示するタイトル</param>
	<param name="width">列幅</param>
	<param name="align">データの表示位置</param>
	<param name="dataSource">コンボボックスへバインドするデータソース</param>
	<param name="displayMember">コンボ ボックスに表示する文字列の取得先となるプロパティまたは列を指定する文字列を取得または設定します。 </param>
	<param name="valueMember">ドロップダウン リストの選択項目に対応する値の取得先となる、プロパティまたは列を指定する文字列を取得または設定します。 </param>
	<param name="format">データの表示フォーマット</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Win.DataGridViewHelper.SetComboBoxItems(System.String,System.Data.DataTable,System.String,System.String)">
	<summary>
 コンボボックスへ表示するデータをバインドする
 </summary>
	<param name="propertyName">バインドしたい列名称</param>
	<param name="dataSource">コンボボックスへバインドするデータソース</param>
	<param name="displayMember">コンボ ボックスに表示する文字列の取得先となるプロパティまたは列を指定する文字列を取得または設定します。 </param>
	<param name="valueMember">ドロップダウン リストの選択項目に対応する値の取得先となる、プロパティまたは列を指定する文字列を取得または設定します。 </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Win.DataGridViewHelper.SetComboBoxItems(System.Int32,System.Data.DataTable,System.String,System.String)">
	<summary>
 コンボボックスへ表示するデータをバインドする
 </summary>
	<param name="index">列位置</param>
	<param name="dataSource">コンボボックスへバインドするデータソース</param>
	<param name="displayMember">コンボ ボックスに表示する文字列の取得先となるプロパティまたは列を指定する文字列を取得または設定します。 </param>
	<param name="valueMember">ドロップダウン リストの選択項目に対応する値の取得先となる、プロパティまたは列を指定する文字列を取得または設定します。 </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Win.DataGridViewHelper._setComboBoxItems(System.Windows.Forms.DataGridViewColumn,System.Data.DataTable,System.String,System.String)">
	<summary>
 コンボボックスへ表示するデータをバインドする
 </summary>
	<param name="col">列</param>
	<param name="dataSource">コンボボックスへバインドするデータソース</param>
	<param name="displayMember">コンボ ボックスに表示する文字列の取得先となるプロパティまたは列を指定する文字列を取得または設定します。 </param>
	<param name="valueMember">ドロップダウン リストの選択項目に対応する値の取得先となる、プロパティまたは列を指定する文字列を取得または設定します。 </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Win.DataGridViewHelper._makeColumn(Moca.Win.DataGridViewHelper.CellType)">
	<summary>
 指定されたセル種別でDataGridViewColumnを作成する。
 </summary>
	<param name="type"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Moca.Win.DataGridViewHelper">
	<summary>
 DataGridViewを扱うときの便利メソッド集
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Win.WinUtil.MessageBoxType.InformationOK">
	<summary>情報メッセージアイコン    【表示形態：OKﾎﾞﾀﾝのみ】</summary>
</member><member name="F:Moca.Win.WinUtil.MessageBoxType.InformationYesNo">
	<summary>情報メッセージアイコン    【表示形態：はい・いいえﾎﾞﾀﾝのみ】</summary>
</member><member name="F:Moca.Win.WinUtil.MessageBoxType.QuestionOK">
	<summary>問い合わせアイコン        【表示形態：OKﾎﾞﾀﾝのみ】</summary>
</member><member name="F:Moca.Win.WinUtil.MessageBoxType.QuestionYesNo">
	<summary>問い合わせアイコン        【表示形態：はい・いいえﾎﾞﾀﾝのみ】</summary>
</member><member name="F:Moca.Win.WinUtil.MessageBoxType.QuestionYesNoCancel">
	<summary>問い合わせアイコン        【表示形態：はい・いいえ・キャンセルﾎﾞﾀﾝのみ】</summary>
</member><member name="F:Moca.Win.WinUtil.MessageBoxType.CriticalOK">
	<summary>警告アイコン              【表示形態：OKﾎﾞﾀﾝのみ】</summary>
</member><member name="F:Moca.Win.WinUtil.MessageBoxType.CriticalYesNO">
	<summary>警告アイコン              【表示形態：はい・いいえﾎﾞﾀﾝのみ】</summary>
</member><member name="F:Moca.Win.WinUtil.MessageBoxType.ExclamationOK">
	<summary>注意アイコン              【表示形態：OKﾎﾞﾀﾝのみ】</summary>
</member><member name="F:Moca.Win.WinUtil.MessageBoxType.ExclamationYesNo">
	<summary>注意アイコン              【表示形態：はい・いいえﾎﾞﾀﾝのみ】</summary>
</member><member name="F:Moca.Win.WinUtil.MessageBoxType.ErrorOkHelp">
	<summary>表示アイコンなし          【表示形態：OK・ﾍﾙﾌﾟﾎﾞﾀﾝのみ】</summary>
</member><member name="F:Moca.Win.WinUtil.MessageBoxType.ErrorTransactionOk">
	<summary>表示アイコンなし          【表示形態：OKﾎﾞﾀﾝのみ】</summary>
</member><member name="T:Moca.Win.WinUtil.MessageBoxType">
	<summary>メッセージボックスの表示スタイル</summary>
</member><member name="F:Moca.Win.WinUtil.appExceptionListener">
	<summary>アプリケーションでキャッチしきれていない例外をキャッチした時のリスナー</summary>
</member><member name="M:Moca.Win.WinUtil.ClearInput(System.Windows.Forms.Control,System.Boolean,System.Collections.IList)">
	<summary>
 入力系コントロールの自動クリア
 </summary>
	<param name="parent">親コントロール</param>
	<param name="bindingClear">バインディングのクリア指定</param>
	<param name="noExist">クリアしないコントロールの指定</param>
	<remarks>
 指定されたコントロール内のすべてのコントロールを列挙し、入力内容をクリアする。<br/>
		<c>bindingClear</c> が True のときは、データがバインディングされているものはクリアされます。<br/>
		<c>noExist</c> に指定されたコントロールはクリア対象外となります。<br/>
		<list>
			<item><code>TextBoxBase からの派生型</code><description>Text をクリアする</description></item>
			<item><code>ListControl からの派生型</code><description>DataSource と Items をクリアする</description></item>
			<item><code>CheckBox の場合</code><description>Checked を False にする</description></item>
			<item><code>RadioButton の場合</code><description>Checked を False にする</description></item>
			<item><code>DateTimePicker の場合</code><description>Value を Date.Today にする</description></item>
			<item><code>NullableDateTimePicker の場合</code><description>Value を Nothing にする</description></item>
		</list>
	</remarks>
</member><member name="M:Moca.Win.WinUtil.ClearTextBox(System.Windows.Forms.Control)">
	<summary>
 指定したコントロール内に含まれる TextBox の Text をクリアする。
 </summary>
	<param name="parent"></param>
	<remarks>
 コントロールの型が TextBoxBase からの派生型の場合は Text をクリアする
 </remarks>
</member><member name="M:Moca.Win.WinUtil.ClearComboBox(System.Windows.Forms.Control)">
	<summary>
 指定したコントロール内に含まれる ComboBox の Text をクリアする。
 </summary>
	<param name="parent"></param>
	<remarks>
 コントロールの型が ListControl からの派生型の場合は SelectedIndex をクリアする
 </remarks>
</member><member name="M:Moca.Win.WinUtil.SetComboBox(System.Windows.Forms.ComboBox,System.Object,System.String,System.String,System.Int32)">
	<summary>
 コンボボックスを構築する
 </summary>
	<param name="cbo">対象のコンボボックス</param>
	<param name="dataSource">データソース</param>
	<param name="displayMember">リストに表示する列名</param>
	<param name="valueMember">値にする列名</param>
	<param name="selectedIndex">デフォルトのSelectedIndex</param>
	<remarks>
	</remarks>
</member><member name="M:Moca.Win.WinUtil.DispMessageBox(System.String,Moca.Win.WinUtil.MessageBoxType,System.String)">
	<summary>
 メッセージの内容により表示スタイルを変更する
 </summary>
	<param name="strMsg">表示メッセージ内容</param>
	<param name="LngFlg">表示形態</param>
	<returns>メッセージに対しての応答　OK・1　はい・6　いいえ・7　ﾍﾙﾌﾟ・処理が中断する(ﾍﾙﾌﾟﾌｧｲﾙ表示)</returns>
	<remarks>
 表示形態に設定出来る値は下記のとおりです。
 
     0・情報メッセージアイコン   【表示形態：OKﾎﾞﾀﾝのみ】
     1・情報メッセージアイコン   【表示形態：はい・いいえﾎﾞﾀﾝのみ】
     2・問い合わせアイコン       【表示形態：OKﾎﾞﾀﾝのみ】
     3・問い合わせアイコン       【表示形態：はい・いいえﾎﾞﾀﾝのみ】
     4・警告アイコン             【表示形態：OKﾎﾞﾀﾝのみ】
     5・警告アイコン             【表示形態：はい・いいえﾎﾞﾀﾝのみ】
     6・注意アイコン             【表示形態：OKﾎﾞﾀﾝのみ】
     7・注意アイコン             【表示形態：はい・いいえﾎﾞﾀﾝのみ】
     8・表示アイコンなし         【表示形態：OK・ﾍﾙﾌﾟﾎﾞﾀﾝのみ】
     9・表示アイコンなし         【表示形態：OKﾎﾞﾀﾝのみ】
 </remarks>
</member><member name="M:Moca.Win.WinUtil.CImage2ByteArray(System.Drawing.Image)">
	<summary>
 イメージオブジェクトをバイト配列へ変換
 </summary>
	<param name="img">イメージオブジェクト</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Win.WinUtil.CByteArray2Image(System.Byte[])">
	<summary>
 バイト配列をイメージオブジェクトへ変換
 </summary>
	<param name="img">バイト配列</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Win.WinUtil.SetCultureControls(System.String,System.Windows.Forms.Control)">
	<summary>
 コントロールに対してカルチャーを設定
 </summary>
	<param name="cultureName"></param>
	<param name="target"></param>
	<remarks></remarks>
</member><member name="M:Moca.Win.WinUtil.UserControlDesignMode">
	<summary>
 ユーザーコントロール内で、デザインモードかどうか判定する。
 </summary>
	<returns>True:デザインモード、False:実行モード</returns>
	<remarks>
 ユーザーコントロール内では、親フォームがデザインモードかどうか判定するのに、Me.DesignMode が使えない。（必ず False のため）<br/>
 よって、こちらを使用する。
 </remarks>
</member><member name="M:Moca.Win.WinUtil.ApplicationExceptionHandler(Moca.Exceptions.IApplicationExceptionListener)">
 -----------------------------------------------------------------------------
 <summary>
 アプリケーションでキャッチしきれていない例外をキャッチする準備
 </summary>
	<param name="listener"></param>
	<remarks>
 発生した例外がどこでもキャッチされていないと、ユーザーには理解できないメッセージが表示されてアプリケーションが落ちてしまう。
 これを避ける為に、アプリケーション全体で最終的に例外をキャッチする機能を付加する。
 </remarks>
 -----------------------------------------------------------------------------

</member><member name="M:Moca.Win.WinUtil.Application_ThreadException(System.Object,System.Threading.ThreadExceptionEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 未処理例外をキャッチするイベント・ハンドラ（Windowsアプリケーション用）
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>
	</remarks>
 -----------------------------------------------------------------------------

</member><member name="M:Moca.Win.WinUtil.Application_UnhandledException(System.Object,System.UnhandledExceptionEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 未処理例外をキャッチするイベント・ハンドラ （主にコンソール・アプリケーション用） 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>
	</remarks>
 -----------------------------------------------------------------------------

</member><member name="T:Moca.Win.WinUtil">
	<summary>
 コントロールを扱う上で便利なメソッドたち
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Win.ToolStripStatusDateTime._timer">
	<summary>タイマー</summary>
</member><member name="P:Moca.Win.ToolStripStatusDateTime.Format">
	<summary>
 日時のフォーマット
 </summary>
</member><member name="T:Moca.Win.ToolStripStatusDateTime">
	<summary>
 StatusStripに現在の時間を表示する
 </summary>
	<remarks></remarks>
</member><member name="P:Moca.My.Resources.Resources.ResourceManager">
	<summary>
  このクラスで使用されているキャッシュされた ResourceManager インスタンスを返します。
</summary>
</member><member name="P:Moca.My.Resources.Resources.Culture">
	<summary>
  厳密に型指定されたこのリソース クラスを使用して、すべての検索リソースに対し、
  現在のスレッドの CurrentUICulture プロパティをオーバーライドします。
</summary>
</member><member name="T:Moca.My.Resources.Resources">
	<summary>
  ローカライズされた文字列などを検索するための、厳密に型指定されたリソース クラスです。
</summary>
</member><member name="F:Moca.Serialization.XMLSerialier._dlgFilter">
	<summary>ファイル選択ダイアログ画面で使用する拡張子フィルター</summary>
</member><member name="F:Moca.Serialization.XMLSerialier._dlgInitialDirectory">
	<summary>ファイル選択ダイアログ画面で使用する初期フォルダ</summary>
</member><member name="P:Moca.Serialization.XMLSerialier.DlgFilter">
	<summary>
 ファイル選択ダイアログ画面で使用する拡張子フィルタープロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Serialization.XMLSerialier.DlgInitialDirectory">
	<summary>
 ファイル選択ダイアログ画面で使用する初期フォルダプロパティ
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Serialization.XMLSerialier.SelectSaveFile(System.String,System.String)">
	<summary>
 保存するファイル名を入力する
 </summary>
	<param name="title">ダイアログ画面のタイトル</param>
	<param name="defaultFilename">デフォルトのファイル名</param>
	<returns></returns>
	<remarks>
 あらかじめフィルターと初期フォルダを指定してください。<br/>
 指定しない場合は、デフォルト値を使用します。<br/>
		<list>
			<item>
				<code>フィルター</code>
				<description>XML File(*.xml)|*.xml</description>
			</item>
			<item>
				<code>初期フォルダ</code>
				<description>マイ ドキュメント フォルダ</description>
			</item>
		</list>
	</remarks>
</member><member name="M:Moca.Serialization.XMLSerialier.SelectOpenFile(System.String,System.String)">
	<summary>
 開くファイル名を入力する
 </summary>
	<param name="title">ダイアログ画面のタイトル</param>
	<param name="defaultFilename">デフォルトのファイル名</param>
	<returns></returns>
	<remarks>
 あらかじめフィルターと初期フォルダを指定してください。<br/>
 指定しない場合は、デフォルト値を使用します。<br/>
		<list>
			<item>
				<code>フィルター</code>
				<description>XML File(*.xml)|*.xml</description>
			</item>
			<item>
				<code>初期フォルダ</code>
				<description>マイ ドキュメント フォルダ</description>
			</item>
		</list>
	</remarks>
</member><member name="T:Moca.Serialization.XMLSerialier">
	<summary>
 オブジェクトをXMLファイルにシリアル化又は逆シリアル化するための抽象クラス
 </summary>
	<remarks>
 ファイルを開く又は保存するときのファイル選択ダイアログ画面を表示するメソッドあり
 </remarks>
</member><member name="F:Moca.Win.PrintScreen.C_FILENAME">
	<summary>イメージ出力ファイル名</summary>
</member><member name="F:Moca.Win.PrintScreen._ctrl">
	<summary>対象となるWindow</summary>
</member><member name="F:Moca.Win.PrintScreen._preview">
	<summary>プレビューかどうか</summary>
</member><member name="F:Moca.Win.PrintScreen._filename">
	<summary>ハードコピーの出力ファイルパス</summary>
</member><member name="F:Moca.Win.PrintScreen._autoPrint">
	<summary>自動印刷するかどうか</summary>
</member><member name="P:Moca.Win.PrintScreen.AutoPrint">
	<summary>
 自動印刷するかどうか
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Win.PrintScreen.Preview">
	<summary>
 プレビューするかどうか
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Moca.Win.PrintScreen.Filename">
	<summary>
 画面イメージ出力ファイル名
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Moca.Win.PrintScreen.Copy">
	<summary>
 画面ハードコピー
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Win.PrintScreen.Copy(System.Windows.Forms.Control)">
	<summary>
 画面ハードコピー
 </summary>
	<param name="ctrl">対象となる画面</param>
	<remarks></remarks>
</member><member name="M:Moca.Win.PrintScreen._doSomething(System.Object)">
	<summary>
 スレッドで実行するメソッド
 </summary>
	<param name="obj"></param>
	<remarks></remarks>
</member><member name="M:Moca.Win.PrintScreen._copyTimer(System.Object,System.Timers.ElapsedEventArgs)">
	<summary>
 タイマーで実行するメソッド
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:Moca.Win.PrintScreen._copyScreen">
	<summary>
 画面全体のハードコピー
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Win.PrintScreen._copyControl">
	<summary>
 指定されたWindowのハードコピー
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Win.PrintScreen._print">
	<summary>
 印刷
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Win.PrintScreen.pd_PrintPage(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
	<summary>
 印刷イベント
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:Moca.Win.PrintScreen">
	<summary>
 画面ハードコピー
 </summary>
	<remarks>
 画面全体のハードコピー又は、特定のWindowのハードコピーを取得します。<br/>
 取得したイメージは一旦、ユーザーの作業フォルダへWindowCopy.pngとして保存します。<br/>
 画面全体のハードコピー取得時は、メッセージボックス表示される可能性を考慮して0.5秒後に画面イメージを取得します。<br/>
 印刷又はプレビューする場合は、<see cref="M:Moca.Win.PrintScreen.Copy"></see>実行前に、<see cref="P:Moca.Win.PrintScreen.AutoPrint"></see>又は<see cref="P:Moca.Win.PrintScreen.Preview"></see>を設定します。<br/>
 両方指定されているときは、プレビューを優先します。<br/>
 印刷時はデフォルトのプリンタへ印刷します。<br/>
		<example>
 画面全体を取得し、プレビューする場合
 <code lang="vb">
 Dim ps As New PrintScreen
 ps.Preview = True
 ps.Copy()
 </code>
		</example>
	</remarks>
</member><member name="T:Moca.Win.AnimateWindow.AnimateWindowFlags">
	<summary>
 AnimateWindow関数にて利用されるフラグ
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Win.AnimateWindow.AnimateWindow(System.IntPtr,System.Int32,Moca.Win.AnimateWindow.AnimateWindowFlags)">
	<summary>
 AnimateWindow関数
 </summary>
	<param name="hwnd">ハンドル</param>
	<param name="time">アニメーションを行う時間</param>
	<param name="flags">挙動を表すフラグ</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:Moca.Win.AnimateWindow.C_DEFAULT_TIME">
	<summary>
アニメーション時間のデフォルト値
 </summary>
	<remarks></remarks>
</member><member name="F:Moca.Win.AnimateWindow.DirectionType.Left">
	<summary>左から</summary>
</member><member name="F:Moca.Win.AnimateWindow.DirectionType.Right">
	<summary>右から</summary>
</member><member name="F:Moca.Win.AnimateWindow.DirectionType.Top">
	<summary>上から</summary>
</member><member name="F:Moca.Win.AnimateWindow.DirectionType.Bottom">
	<summary>下から</summary>
</member><member name="T:Moca.Win.AnimateWindow.DirectionType">
	<summary>
 アニメーションの方向
 </summary>
	<remarks></remarks>
</member><member name="M:Moca.Win.AnimateWindow.Slide(System.Windows.Forms.Control,Moca.Win.AnimateWindow.DirectionType,System.Int32)">
	<summary>
 スライドしながら表示
 </summary>
	<param name="val"></param>
	<remarks></remarks>
</member><member name="M:Moca.Win.AnimateWindow.SlideClose(System.Windows.Forms.Control,Moca.Win.AnimateWindow.DirectionType,System.Int32)">
	<summary>
 スライドしながら非表示
 </summary>
	<param name="val"></param>
	<remarks></remarks>
</member><member name="M:Moca.Win.AnimateWindow.FadeIn(System.Windows.Forms.Control,Moca.Win.AnimateWindow.DirectionType,System.Int32)">
	<summary>
 フェードインしながら表示
 </summary>
	<param name="val"></param>
	<remarks></remarks>
</member><member name="M:Moca.Win.AnimateWindow.FadeInClose(System.Windows.Forms.Control,Moca.Win.AnimateWindow.DirectionType,System.Int32)">
	<summary>
 フェードインしながら非表示
 </summary>
	<param name="val"></param>
	<remarks></remarks>
</member><member name="M:Moca.Win.AnimateWindow.Center(System.Windows.Forms.Control,Moca.Win.AnimateWindow.DirectionType,System.Int32)">
	<summary>
 中央から徐々に表示
 </summary>
	<param name="val"></param>
	<remarks></remarks>
</member><member name="M:Moca.Win.AnimateWindow.CenterClose(System.Windows.Forms.Control,Moca.Win.AnimateWindow.DirectionType,System.Int32)">
	<summary>
 中央から徐々に非表示
 </summary>
	<param name="val"></param>
	<remarks></remarks>
</member><member name="T:Moca.Win.AnimateWindow">
	<summary>
 ウィンドウやコントロールにアニメーションさせる
 </summary>
	<remarks>
 user32.dll の <c>AnimateWindow</c> APIを使って表示させます。
 </remarks>
</member><member name="T:Moca.resourceDummy">
	<summary>
	</summary>
	<remarks></remarks>
</member><member name="M:Moca.Exceptions.IApplicationExceptionListener.ApplicationException(System.Exception)">
	<summary>
 アプリケーションでキャッチしきれていない例外が発生
 </summary>
	<param name="ex">対象の例外</param>
	<remarks></remarks>
</member><member name="T:Moca.Exceptions.IApplicationExceptionListener">
	<summary>
 アプリケーションでキャッチしきれていない例外をキャッチした時に、
 システム固有の処理を行うクラスを作成する為のインタフェース
 </summary>
	<remarks></remarks>
</member>
</members>
</doc>